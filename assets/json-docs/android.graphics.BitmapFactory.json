{
  "methods": {
    "create(java.lang.String,android.graphics.BitmapFactory.Options,org.robolectric.shadows.ImageUtil.RobolectricBufferedImage)": {
      "isImplementation": false,
      "modifiers": [
        "static"
      ],
      "params": [
        "name",
        "options",
        "image"
      ],
      "returnType": "android.graphics.Bitmap",
      "exceptions": [],
      "name": "create(java.lang.String,android.graphics.BitmapFactory.Options,org.robolectric.shadows.ImageUtil.RobolectricBufferedImage)"
    },
    "create(java.lang.String,byte[],android.graphics.Rect,android.graphics.BitmapFactory.Options,android.graphics.Point,org.robolectric.shadows.ImageUtil.RobolectricBufferedImage)": {
      "isImplementation": false,
      "modifiers": [
        "private",
        "static"
      ],
      "params": [
        "name",
        "bytes",
        "outPadding",
        "options",
        "widthAndHeightOverride",
        "image"
      ],
      "returnType": "android.graphics.Bitmap",
      "exceptions": [],
      "name": "create(java.lang.String,byte[],android.graphics.Rect,android.graphics.BitmapFactory.Options,android.graphics.Point,org.robolectric.shadows.ImageUtil.RobolectricBufferedImage)"
    },
    "decodeByteArray(byte[],int,int)": {
      "isImplementation": true,
      "modifiers": [
        "protected",
        "static"
      ],
      "params": [
        "data",
        "offset",
        "length"
      ],
      "returnType": "android.graphics.Bitmap",
      "exceptions": [],
      "name": "decodeByteArray(byte[],int,int)"
    },
    "decodeByteArray(byte[],int,int,android.graphics.BitmapFactory.Options)": {
      "isImplementation": true,
      "modifiers": [
        "protected",
        "static"
      ],
      "params": [
        "data",
        "offset",
        "length",
        "opts"
      ],
      "returnType": "android.graphics.Bitmap",
      "exceptions": [],
      "name": "decodeByteArray(byte[],int,int,android.graphics.BitmapFactory.Options)"
    },
    "decodeFile(java.lang.String)": {
      "isImplementation": true,
      "modifiers": [
        "protected",
        "static"
      ],
      "params": [
        "pathName"
      ],
      "returnType": "android.graphics.Bitmap",
      "exceptions": [],
      "name": "decodeFile(java.lang.String)"
    },
    "decodeFile(java.lang.String,android.graphics.BitmapFactory.Options)": {
      "isImplementation": true,
      "modifiers": [
        "protected",
        "static"
      ],
      "params": [
        "pathName",
        "options"
      ],
      "returnType": "android.graphics.Bitmap",
      "exceptions": [],
      "name": "decodeFile(java.lang.String,android.graphics.BitmapFactory.Options)"
    },
    "decodeFileDescriptor(java.io.FileDescriptor,android.graphics.Rect,android.graphics.BitmapFactory.Options)": {
      "isImplementation": true,
      "modifiers": [
        "protected",
        "static"
      ],
      "params": [
        "fd",
        "outPadding",
        "opts"
      ],
      "returnType": "android.graphics.Bitmap",
      "exceptions": [],
      "name": "decodeFileDescriptor(java.io.FileDescriptor,android.graphics.Rect,android.graphics.BitmapFactory.Options)"
    },
    "decodeResource(android.content.res.Resources,int,android.graphics.BitmapFactory.Options)": {
      "isImplementation": true,
      "modifiers": [
        "protected",
        "static"
      ],
      "params": [
        "res",
        "id",
        "options"
      ],
      "returnType": "android.graphics.Bitmap",
      "exceptions": [],
      "name": "decodeResource(android.content.res.Resources,int,android.graphics.BitmapFactory.Options)"
    },
    "decodeResourceStream(android.content.res.Resources,android.util.TypedValue,java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory.Options)": {
      "isImplementation": true,
      "modifiers": [
        "protected",
        "static"
      ],
      "params": [
        "res",
        "value",
        "is",
        "pad",
        "opts"
      ],
      "returnType": "android.graphics.Bitmap",
      "exceptions": [],
      "name": "decodeResourceStream(android.content.res.Resources,android.util.TypedValue,java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory.Options)"
    },
    "decodeStream(java.io.InputStream)": {
      "isImplementation": true,
      "modifiers": [
        "protected",
        "static"
      ],
      "params": [
        "is"
      ],
      "returnType": "android.graphics.Bitmap",
      "exceptions": [],
      "name": "decodeStream(java.io.InputStream)"
    },
    "decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory.Options)": {
      "isImplementation": true,
      "modifiers": [
        "protected",
        "static"
      ],
      "params": [
        "is",
        "outPadding",
        "opts"
      ],
      "returnType": "android.graphics.Bitmap",
      "exceptions": [],
      "name": "decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory.Options)"
    },
    "provideWidthAndHeightHints(android.net.Uri,int,int)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "uri",
        "width",
        "height"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "provideWidthAndHeightHints(android.net.Uri,int,int)",
      "documentation": "@deprecated Use any of the BitmapFactory.decode methods with real image data.\n"
    },
    "provideWidthAndHeightHints(int,int,int)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "resourceId",
        "width",
        "height"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "provideWidthAndHeightHints(int,int,int)",
      "documentation": "@deprecated Use any of the BitmapFactory.decode methods with real image data.\n"
    },
    "provideWidthAndHeightHints(java.io.FileDescriptor,int,int)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "fd",
        "width",
        "height"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "provideWidthAndHeightHints(java.io.FileDescriptor,int,int)",
      "documentation": "@deprecated Use any of the BitmapFactory.decode methods with real image data.\n"
    },
    "provideWidthAndHeightHints(java.lang.String,int,int)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "file",
        "width",
        "height"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "provideWidthAndHeightHints(java.lang.String,int,int)",
      "documentation": "@deprecated Use any of the BitmapFactory.decode methods with real image data.\n"
    },
    "reset()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "reset()"
    },
    "selectWidthAndHeight(java.lang.String,byte[],android.graphics.Point,org.robolectric.shadows.ImageUtil.RobolectricBufferedImage)": {
      "isImplementation": false,
      "modifiers": [
        "private",
        "static"
      ],
      "params": [
        "name",
        "bytes",
        "widthAndHeightOverride",
        "robolectricBufferedImage"
      ],
      "returnType": "android.graphics.Point",
      "exceptions": [],
      "name": "selectWidthAndHeight(java.lang.String,byte[],android.graphics.Point,org.robolectric.shadows.ImageUtil.RobolectricBufferedImage)"
    },
    "setAllowInvalidImageData(boolean)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "allowInvalidImageData"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setAllowInvalidImageData(boolean)",
      "documentation": "Whether the BitmapFactory.decode methods, such as {@link\nBitmapFactory#decodeStream(InputStream, Rect, Options)} should allow invalid image data and\nalways return Bitmap objects. If set to false, BitmapFactory.decode methods will be consistent\nwith real Android, and return null Bitmap values and set {@link BitmapFactory.Options#outWidth}\nand {@link BitmapFactory.Options#outHeight} to -1.\n\n@param allowInvalidImageData whether invalid bitmap data is allowed and BitmapFactory should\n    always return Bitmap objects.\n"
    },
    "stringify(android.graphics.BitmapFactory.Options)": {
      "isImplementation": false,
      "modifiers": [
        "private",
        "static"
      ],
      "params": [
        "options"
      ],
      "returnType": "java.lang.String",
      "exceptions": [],
      "name": "stringify(android.graphics.BitmapFactory.Options)"
    }
  },
  "imports": [
    "java.lang.Math.round",
    "java.nio.charset.StandardCharsets.UTF_8",
    "org.robolectric.shadows.ImageUtil.getImageFromStream",
    "org.robolectric.util.reflector.Reflector.reflector",
    "android.content.res.AssetManager.AssetInputStream",
    "android.content.res.Resources",
    "android.graphics.Bitmap",
    "android.graphics.BitmapFactory",
    "android.graphics.Point",
    "android.graphics.Rect",
    "android.net.Uri",
    "android.os.Build",
    "android.util.TypedValue",
    "java.awt.Graphics2D",
    "java.awt.image.BufferedImage",
    "java.io.BufferedInputStream",
    "java.io.ByteArrayInputStream",
    "java.io.File",
    "java.io.FileDescriptor",
    "java.io.FileInputStream",
    "java.io.IOException",
    "java.io.InputStream",
    "java.util.ArrayList",
    "java.util.HashMap",
    "java.util.List",
    "java.util.Map",
    "org.robolectric.RuntimeEnvironment",
    "org.robolectric.annotation.Implementation",
    "org.robolectric.annotation.Implements",
    "org.robolectric.annotation.Resetter",
    "org.robolectric.shadow.api.Shadow",
    "org.robolectric.shadows.ImageUtil.RobolectricBufferedImage",
    "org.robolectric.util.Join",
    "org.robolectric.util.Logger",
    "org.robolectric.util.NamedStream",
    "org.robolectric.util.ReflectionHelpers",
    "org.robolectric.util.ReflectionHelpers.ClassParameter",
    "org.robolectric.util.reflector.Direct",
    "org.robolectric.util.reflector.ForType",
    "org.robolectric.util.reflector.Static",
    "org.robolectric.shadows.ShadowBitmapFactory.BitmapFactoryReflector"
  ],
  "name": "org.robolectric.shadows.ShadowBitmapFactory"
}