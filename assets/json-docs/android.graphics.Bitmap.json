{
  "methods": {
    "appendDescription(java.lang.String)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "abstract"
      ],
      "params": [
        "s"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "appendDescription(java.lang.String)"
    },
    "getCreatedFromBitmap()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "abstract"
      ],
      "params": [],
      "returnType": "android.graphics.Bitmap",
      "exceptions": [],
      "name": "getCreatedFromBitmap()",
      "documentation": "Reference to original Bitmap from which this Bitmap was created. {@code null} if this Bitmap\nwas not copied from another instance.\n\n@return Original Bitmap from which this Bitmap was created.\n"
    },
    "getCreatedFromBytes()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "abstract"
      ],
      "params": [],
      "returnType": "byte[]",
      "exceptions": [],
      "name": "getCreatedFromBytes()",
      "documentation": "Bytes from which this Bitmap was created. {@code null} if this Bitmap was not created from\nbytes.\n\n@return Bytes from which this Bitmap was created.\n"
    },
    "getCreatedFromColors()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "abstract"
      ],
      "params": [],
      "returnType": "int[]",
      "exceptions": [],
      "name": "getCreatedFromColors()",
      "documentation": "Color array from which this Bitmap was created. {@code null} if this Bitmap was not created\nfrom a color array.\n\n@return Color array from which this Bitmap was created.\n"
    },
    "getCreatedFromFilter()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "abstract"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "name": "getCreatedFromFilter()",
      "documentation": "{@code true} if this Bitmap was created with filtering.\n\n@return {@code true} if this Bitmap was created with filtering.\n"
    },
    "getCreatedFromHeight()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "abstract"
      ],
      "params": [],
      "returnType": "int",
      "exceptions": [],
      "name": "getCreatedFromHeight()",
      "documentation": "Height from {@link #getCreatedFromX()} within {@link #getCreatedFromBitmap()} of this Bitmap\u0027s\ncontent, or -1.\n\n@return Height from {@link #getCreatedFromX()} within {@link #getCreatedFromBitmap()} of this\n    Bitmap\u0027s content, or -1.\n"
    },
    "getCreatedFromMatrix()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "abstract"
      ],
      "params": [],
      "returnType": "android.graphics.Matrix",
      "exceptions": [],
      "name": "getCreatedFromMatrix()",
      "documentation": "Matrix from which this Bitmap\u0027s content was transformed, or {@code null}.\n\n@return Matrix from which this Bitmap\u0027s content was transformed, or {@code null}.\n"
    },
    "getCreatedFromPath()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "abstract"
      ],
      "params": [],
      "returnType": "java.lang.String",
      "exceptions": [],
      "name": "getCreatedFromPath()",
      "documentation": "Path from which this Bitmap was created. {@code null} if this Bitmap was not create from a\npath.\n\n@return Path from which this Bitmap was created.\n"
    },
    "getCreatedFromResId()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "abstract"
      ],
      "params": [],
      "returnType": "int",
      "exceptions": [],
      "name": "getCreatedFromResId()",
      "documentation": "Resource ID from which this Bitmap was created. {@code 0} if this Bitmap was not created from a\nresource.\n\n@return Resource ID from which this Bitmap was created.\n"
    },
    "getCreatedFromStream()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "abstract"
      ],
      "params": [],
      "returnType": "java.io.InputStream",
      "exceptions": [],
      "name": "getCreatedFromStream()",
      "documentation": "{@link InputStream} from which this Bitmap was created. {@code null} if this Bitmap was not\ncreated from a stream.\n\n@return InputStream from which this Bitmap was created.\n"
    },
    "getCreatedFromWidth()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "abstract"
      ],
      "params": [],
      "returnType": "int",
      "exceptions": [],
      "name": "getCreatedFromWidth()",
      "documentation": "Width from {@link #getCreatedFromX()} within {@link #getCreatedFromBitmap()} of this Bitmap\u0027s\ncontent, or -1.\n\n@return Width from {@link #getCreatedFromX()} within {@link #getCreatedFromBitmap()} of this\n    Bitmap\u0027s content, or -1.\n"
    },
    "getCreatedFromX()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "abstract"
      ],
      "params": [],
      "returnType": "int",
      "exceptions": [],
      "name": "getCreatedFromX()",
      "documentation": "Horizontal offset within {@link #getCreatedFromBitmap()} of this Bitmap\u0027s content, or -1.\n\n@return Horizontal offset within {@link #getCreatedFromBitmap()}.\n"
    },
    "getCreatedFromY()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "abstract"
      ],
      "params": [],
      "returnType": "int",
      "exceptions": [],
      "name": "getCreatedFromY()",
      "documentation": "Vertical offset within {@link #getCreatedFromBitmap()} of this Bitmap\u0027s content, or -1.\n\n@return Vertical offset within {@link #getCreatedFromBitmap()} of this Bitmap\u0027s content, or -1.\n"
    },
    "getDescription()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "abstract"
      ],
      "params": [],
      "returnType": "java.lang.String",
      "exceptions": [],
      "name": "getDescription()"
    },
    "setDescription(java.lang.String)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "abstract"
      ],
      "params": [
        "s"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setDescription(java.lang.String)"
    },
    "setMutable(boolean)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "abstract"
      ],
      "params": [
        "mutable"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setMutable(boolean)"
    },
    "visualize(android.graphics.Bitmap)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "bitmap"
      ],
      "returnType": "java.lang.String",
      "exceptions": [],
      "name": "visualize(android.graphics.Bitmap)",
      "documentation": "Returns a textual representation of the appearance of the object.\n\n@param bitmap the bitmap to visualize\n@return Textual representation of the appearance of the object.\n"
    }
  },
  "imports": [
    "android.graphics.Bitmap",
    "android.graphics.Matrix",
    "java.io.InputStream",
    "org.robolectric.annotation.Implements",
    "org.robolectric.shadow.api.Shadow",
    "org.robolectric.shadows.ShadowBitmap.Picker",
    "org.robolectric.shadows.ShadowBitmap.Picker"
  ],
  "name": "org.robolectric.shadows.ShadowBitmap",
  "documentation": "Base class for {@link Bitmap} shadows. "
}