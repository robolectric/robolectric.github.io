{
  "methods": {
    "canDrawOverlays(android.content.Context)": {
      "isImplementation": true,
      "modifiers": [
        "protected",
        "static"
      ],
      "params": [
        "context"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "minSdk": 23,
      "name": "canDrawOverlays(android.content.Context)",
      "documentation": "@return false by default, or the value specified via {@link #setCanDrawOverlays(boolean)}\n"
    },
    "reset()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "reset()"
    },
    "set24HourTimeFormat(boolean)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "use24HourTimeFormat"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "set24HourTimeFormat(boolean)",
      "documentation": "Sets the value of the {@link Settings.System#TIME_12_24} setting.\n\n@param use24HourTimeFormat new status for the time setting\n"
    },
    "setAdbEnabled(boolean)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "adbEnabled"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setAdbEnabled(boolean)",
      "documentation": "Sets the value of the {@link Settings.Global#ADB_ENABLED} setting or {@link\nSettings.Secure#ADB_ENABLED} depending on API level.\n\n@param adbEnabled new value for whether adb is enabled\n"
    },
    "setAirplaneMode(boolean)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "isAirplaneMode"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setAirplaneMode(boolean)",
      "documentation": "Sets the value of the {@link Settings.System#AIRPLANE_MODE_ON} setting.\n\n@param isAirplaneMode new status for airplane mode\n"
    },
    "setCanDrawOverlays(boolean)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "canDrawOverlays"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setCanDrawOverlays(boolean)",
      "documentation": "Sets the value returned by {@link #canDrawOverlays(Context)}. "
    },
    "setInstallNonMarketApps(boolean)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "installNonMarketApps"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setInstallNonMarketApps(boolean)",
      "documentation": "Sets the value of the {@link Settings.Global#INSTALL_NON_MARKET_APPS} setting or {@link\nSettings.Secure#INSTALL_NON_MARKET_APPS} depending on API level.\n\n@param installNonMarketApps new value for whether non-market apps are allowed to be installed\n"
    },
    "setLockScreenAllowPrivateNotifications(boolean)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "lockScreenAllowPrivateNotifications"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setLockScreenAllowPrivateNotifications(boolean)"
    },
    "setLockScreenShowNotifications(boolean)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "lockScreenShowNotifications"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setLockScreenShowNotifications(boolean)"
    },
    "setWifiOn(boolean)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "isOn"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setWifiOn(boolean)",
      "documentation": "Non-Android accessor that allows the value of the WIFI_ON setting to be set.\n\n@param isOn new status for wifi mode\n"
    }
  },
  "imports": [
    "android.os.Build.VERSION_CODES.JELLY_BEAN",
    "android.os.Build.VERSION_CODES.JELLY_BEAN_MR1",
    "android.os.Build.VERSION_CODES.KITKAT",
    "android.os.Build.VERSION_CODES.LOLLIPOP",
    "android.os.Build.VERSION_CODES.M",
    "android.os.Build.VERSION_CODES.P",
    "android.os.Build.VERSION_CODES.Q",
    "android.os.Build.VERSION_CODES.R",
    "android.provider.Settings.Secure.LOCATION_MODE_OFF",
    "android.content.ContentResolver",
    "android.content.Context",
    "android.content.Intent",
    "android.location.LocationManager",
    "android.os.Build",
    "android.provider.Settings",
    "android.provider.Settings.Secure",
    "android.provider.Settings.SettingNotFoundException",
    "android.text.TextUtils",
    "com.google.common.collect.ImmutableMap",
    "java.util.Arrays",
    "java.util.HashMap",
    "java.util.HashSet",
    "java.util.Map",
    "java.util.Objects",
    "java.util.Optional",
    "java.util.Set",
    "java.util.concurrent.ConcurrentHashMap",
    "org.robolectric.RuntimeEnvironment",
    "org.robolectric.annotation.Implementation",
    "org.robolectric.annotation.Implements",
    "org.robolectric.annotation.Resetter",
    "org.robolectric.shadow.api.Shadow",
    "org.robolectric.util.ReflectionHelpers.ClassParameter",
    "org.robolectric.shadows.ShadowSettings.ShadowSystem",
    "org.robolectric.shadows.ShadowSettings.ShadowSecure",
    "org.robolectric.shadows.ShadowSettings.ShadowGlobal"
  ],
  "name": "org.robolectric.shadows.ShadowSettings"
}