{
  "methods": {
    "I(int,int,int)": {
      "isImplementation": false,
      "modifiers": [
        "private",
        "static"
      ],
      "params": [
        "i",
        "j",
        "offset"
      ],
      "returnType": "int",
      "exceptions": [],
      "name": "I(int,int,int)"
    },
    "multiplyMM(float[],int,float[],int,float[],int)": {
      "isImplementation": true,
      "modifiers": [
        "protected",
        "static"
      ],
      "params": [
        "result",
        "resultOffset",
        "lhs",
        "lhsOffset",
        "rhs",
        "rhsOffset"
      ],
      "returnType": "void",
      "exceptions": [],
      "maxSdk": 33,
      "name": "multiplyMM(float[],int,float[],int,float[],int)",
      "documentation": "Multiplies two 4x4 matrices together and stores the result in a third 4x4 matrix. In matrix\nnotation: result \u003d lhs x rhs. Due to the way matrix multiplication works, the result matrix\nwill have the same effect as first multiplying by the rhs matrix, then multiplying by the lhs\nmatrix. This is the opposite of what you might expect.\n\n\u003cp\u003eThe same float array may be passed for result, lhs, and/or rhs. However, the result element\nvalues are undefined if the result elements overlap either the lhs or rhs elements.\n\n@param result The float array that holds the result.\n@param resultOffset The offset into the result array where the result is stored.\n@param lhs The float array that holds the left-hand-side matrix.\n@param lhsOffset The offset into the lhs array where the lhs is stored\n@param rhs The float array that holds the right-hand-side matrix.\n@param rhsOffset The offset into the rhs array where the rhs is stored.\n@throws IllegalArgumentException if result, lhs, or rhs are null, or if resultOffset + 16 \u003e\n    result.length or lhsOffset + 16 \u003e lhs.length or rhsOffset + 16 \u003e rhs.length.\n"
    },
    "multiplyMV(float[],int,float[],int,float[],int)": {
      "isImplementation": true,
      "modifiers": [
        "protected",
        "static"
      ],
      "params": [
        "resultVec",
        "resultVecOffset",
        "lhsMat",
        "lhsMatOffset",
        "rhsVec",
        "rhsVecOffset"
      ],
      "returnType": "void",
      "exceptions": [],
      "maxSdk": 33,
      "name": "multiplyMV(float[],int,float[],int,float[],int)",
      "documentation": "Multiplies a 4 element vector by a 4x4 matrix and stores the result in a 4-element column\nvector. In matrix notation: result \u003d lhs x rhs\n\n\u003cp\u003eThe same float array may be passed for resultVec, lhsMat, and/or rhsVec. However, the\nresultVec element values are undefined if the resultVec elements overlap either the lhsMat or\nrhsVec elements.\n\n@param resultVec The float array that holds the result vector.\n@param resultVecOffset The offset into the result array where the result vector is stored.\n@param lhsMat The float array that holds the left-hand-side matrix.\n@param lhsMatOffset The offset into the lhs array where the lhs is stored\n@param rhsVec The float array that holds the right-hand-side vector.\n@param rhsVecOffset The offset into the rhs vector where the rhs vector is stored.\n@throws IllegalArgumentException if resultVec, lhsMat, or rhsVec are null, or if\n    resultVecOffset + 4 \u003e resultVec.length or lhsMatOffset + 16 \u003e lhsMat.length or rhsVecOffset\n    + 4 \u003e rhsVec.length.\n"
    }
  },
  "imports": [
    "android.os.Build.VERSION_CODES.TIRAMISU",
    "android.opengl.Matrix",
    "org.robolectric.annotation.Implementation",
    "org.robolectric.annotation.Implements"
  ],
  "name": "org.robolectric.shadows.ShadowOpenGLMatrix"
}