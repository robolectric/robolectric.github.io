{
  "methods": {
    "cancel()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "cancel()"
    },
    "create(android.content.Context,android.content.Intent[],org.robolectric.shadows.ShadowPendingIntent.Type,int,int)": {
      "isImplementation": false,
      "modifiers": [
        "private",
        "static"
      ],
      "params": [
        "context",
        "intents",
        "type",
        "requestCode",
        "flags"
      ],
      "returnType": "android.app.PendingIntent",
      "exceptions": [],
      "name": "create(android.content.Context,android.content.Intent[],org.robolectric.shadows.ShadowPendingIntent.Type,int,int)"
    },
    "equals(java.lang.Object)": {
      "isImplementation": true,
      "modifiers": [
        "public"
      ],
      "params": [
        "o"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "name": "equals(java.lang.Object)"
    },
    "getActivities(android.content.Context,int,android.content.Intent[],int)": {
      "isImplementation": true,
      "modifiers": [
        "protected",
        "static"
      ],
      "params": [
        "context",
        "requestCode",
        "intents",
        "flags"
      ],
      "returnType": "android.app.PendingIntent",
      "exceptions": [],
      "name": "getActivities(android.content.Context,int,android.content.Intent[],int)"
    },
    "getActivities(android.content.Context,int,android.content.Intent[],int,android.os.Bundle)": {
      "isImplementation": true,
      "modifiers": [
        "protected",
        "static"
      ],
      "params": [
        "context",
        "requestCode",
        "intents",
        "flags",
        "options"
      ],
      "returnType": "android.app.PendingIntent",
      "exceptions": [],
      "name": "getActivities(android.content.Context,int,android.content.Intent[],int,android.os.Bundle)"
    },
    "getActivity(android.content.Context,int,android.content.Intent,int)": {
      "isImplementation": true,
      "modifiers": [
        "protected",
        "static"
      ],
      "params": [
        "context",
        "requestCode",
        "intent",
        "flags"
      ],
      "returnType": "android.app.PendingIntent",
      "exceptions": [],
      "name": "getActivity(android.content.Context,int,android.content.Intent,int)"
    },
    "getActivity(android.content.Context,int,android.content.Intent,int,android.os.Bundle)": {
      "isImplementation": true,
      "modifiers": [
        "protected",
        "static"
      ],
      "params": [
        "context",
        "requestCode",
        "intent",
        "flags",
        "options"
      ],
      "returnType": "android.app.PendingIntent",
      "exceptions": [],
      "name": "getActivity(android.content.Context,int,android.content.Intent,int,android.os.Bundle)"
    },
    "getBroadcast(android.content.Context,int,android.content.Intent,int)": {
      "isImplementation": true,
      "modifiers": [
        "protected",
        "static"
      ],
      "params": [
        "context",
        "requestCode",
        "intent",
        "flags"
      ],
      "returnType": "android.app.PendingIntent",
      "exceptions": [],
      "name": "getBroadcast(android.content.Context,int,android.content.Intent,int)"
    },
    "getCreatedIntentFor(org.robolectric.shadows.ShadowPendingIntent.Type,android.content.Intent[],int,int)": {
      "isImplementation": false,
      "modifiers": [
        "private",
        "static"
      ],
      "params": [
        "type",
        "intents",
        "requestCode",
        "flags"
      ],
      "returnType": "android.app.PendingIntent",
      "exceptions": [],
      "name": "getCreatedIntentFor(org.robolectric.shadows.ShadowPendingIntent.Type,android.content.Intent[],int,int)"
    },
    "getCreatorPackage()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "java.lang.String",
      "exceptions": [],
      "minSdk": 17,
      "name": "getCreatorPackage()"
    },
    "getFlags()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "int",
      "exceptions": [],
      "name": "getFlags()",
      "documentation": "@return the flags with which this PendingIntent was created\n"
    },
    "getForegroundService(android.content.Context,int,android.content.Intent,int)": {
      "isImplementation": true,
      "modifiers": [
        "protected",
        "static"
      ],
      "params": [
        "context",
        "requestCode",
        "intent",
        "flags"
      ],
      "returnType": "android.app.PendingIntent",
      "exceptions": [],
      "minSdk": 26,
      "name": "getForegroundService(android.content.Context,int,android.content.Intent,int)"
    },
    "getIntentSender()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "android.content.IntentSender",
      "exceptions": [],
      "name": "getIntentSender()"
    },
    "getRequestCode()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "int",
      "exceptions": [],
      "name": "getRequestCode()",
      "documentation": "@return the request code with which this PendingIntent was created\n"
    },
    "getSavedContext()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "android.content.Context",
      "exceptions": [],
      "name": "getSavedContext()",
      "documentation": "@return the context in which this PendingIntent was created\n"
    },
    "getSavedIntent()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "android.content.Intent",
      "exceptions": [],
      "name": "getSavedIntent()",
      "documentation": "This returns the last Intent in the Intent[] to be delivered when the PendingIntent is sent.\nThis method is particularly useful for PendingIntents created with a single Intent:\n\u003cul\u003e\n  \u003cli\u003e{@link #getActivity(Context, int, Intent, int)}\u003c/li\u003e\n  \u003cli\u003e{@link #getActivity(Context, int, Intent, int, Bundle)}\u003c/li\u003e\n  \u003cli\u003e{@link #getBroadcast(Context, int, Intent, int)}\u003c/li\u003e\n  \u003cli\u003e{@link #getService(Context, int, Intent, int)}\u003c/li\u003e\n\u003c/ul\u003e\n\n@return the final Intent to be delivered when the PendingIntent is sent\n"
    },
    "getSavedIntents()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "android.content.Intent[]",
      "exceptions": [],
      "name": "getSavedIntents()",
      "documentation": "This method is particularly useful for PendingIntents created with multiple Intents:\n\u003cul\u003e\n  \u003cli\u003e{@link #getActivities(Context, int, Intent[], int)}\u003c/li\u003e\n  \u003cli\u003e{@link #getActivities(Context, int, Intent[], int, Bundle)}\u003c/li\u003e\n\u003c/ul\u003e\n\n@return all Intents to be delivered when the PendingIntent is sent\n"
    },
    "getService(android.content.Context,int,android.content.Intent,int)": {
      "isImplementation": true,
      "modifiers": [
        "protected",
        "static"
      ],
      "params": [
        "context",
        "requestCode",
        "intent",
        "flags"
      ],
      "returnType": "android.app.PendingIntent",
      "exceptions": [],
      "name": "getService(android.content.Context,int,android.content.Intent,int)"
    },
    "getTargetPackage()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "java.lang.String",
      "exceptions": [],
      "name": "getTargetPackage()"
    },
    "hashCode()": {
      "isImplementation": true,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "int",
      "exceptions": [],
      "name": "hashCode()"
    },
    "isActivityIntent()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "name": "isActivityIntent()",
      "documentation": "@return {@code true} iff sending this PendingIntent will start an activity\n"
    },
    "isBroadcastIntent()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "name": "isBroadcastIntent()",
      "documentation": "@return {@code true} iff sending this PendingIntent will broadcast an Intent\n"
    },
    "isCanceled()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "name": "isCanceled()",
      "documentation": "@return {@true} iff this PendingIntent has been canceled\n"
    },
    "isForegroundServiceIntent()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "name": "isForegroundServiceIntent()",
      "documentation": "@return {@code true} iff sending this PendingIntent will start a foreground service "
    },
    "isMutable(int)": {
      "isImplementation": false,
      "modifiers": [
        "private",
        "static"
      ],
      "params": [
        "flags"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "name": "isMutable(int)"
    },
    "isOneShot(int)": {
      "isImplementation": false,
      "modifiers": [
        "private",
        "static"
      ],
      "params": [
        "flags"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "name": "isOneShot(int)"
    },
    "isServiceIntent()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "name": "isServiceIntent()",
      "documentation": "@return {@code true} iff sending this PendingIntent will start a service\n"
    },
    "readPendingIntentOrNullFromParcel(android.os.Parcel)": {
      "isImplementation": true,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "in"
      ],
      "returnType": "android.app.PendingIntent",
      "exceptions": [],
      "name": "readPendingIntentOrNullFromParcel(android.os.Parcel)"
    },
    "reset()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "reset()"
    },
    "send()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [
        "android.app.PendingIntent.CanceledException"
      ],
      "name": "send()"
    },
    "send(android.content.Context,int,android.content.Intent)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "context",
        "code",
        "intent"
      ],
      "returnType": "void",
      "exceptions": [
        "android.app.PendingIntent.CanceledException"
      ],
      "name": "send(android.content.Context,int,android.content.Intent)"
    },
    "send(android.content.Context,int,android.content.Intent,android.app.PendingIntent.OnFinished,android.os.Handler)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "context",
        "code",
        "intent",
        "onFinished",
        "handler"
      ],
      "returnType": "void",
      "exceptions": [
        "android.app.PendingIntent.CanceledException"
      ],
      "name": "send(android.content.Context,int,android.content.Intent,android.app.PendingIntent.OnFinished,android.os.Handler)"
    },
    "send(android.content.Context,int,android.content.Intent,android.app.PendingIntent.OnFinished,android.os.Handler,java.lang.String)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "context",
        "code",
        "intent",
        "onFinished",
        "handler",
        "requiredPermission"
      ],
      "returnType": "void",
      "exceptions": [
        "android.app.PendingIntent.CanceledException"
      ],
      "name": "send(android.content.Context,int,android.content.Intent,android.app.PendingIntent.OnFinished,android.os.Handler,java.lang.String)"
    },
    "send(android.content.Context,int,android.content.Intent,android.app.PendingIntent.OnFinished,android.os.Handler,java.lang.String,android.os.Bundle)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "context",
        "code",
        "intent",
        "onFinished",
        "handler",
        "requiredPermission",
        "options"
      ],
      "returnType": "void",
      "exceptions": [
        "android.app.PendingIntent.CanceledException"
      ],
      "minSdk": 23,
      "name": "send(android.content.Context,int,android.content.Intent,android.app.PendingIntent.OnFinished,android.os.Handler,java.lang.String,android.os.Bundle)"
    },
    "send(int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "code"
      ],
      "returnType": "void",
      "exceptions": [
        "android.app.PendingIntent.CanceledException"
      ],
      "name": "send(int)"
    },
    "send(int,android.app.PendingIntent.OnFinished,android.os.Handler)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "code",
        "onFinished",
        "handler"
      ],
      "returnType": "void",
      "exceptions": [
        "android.app.PendingIntent.CanceledException"
      ],
      "name": "send(int,android.app.PendingIntent.OnFinished,android.os.Handler)"
    },
    "setCreatorPackage(java.lang.String)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "creatorPackage"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setCreatorPackage(java.lang.String)"
    },
    "writePendingIntentOrNullToParcel(android.app.PendingIntent,android.os.Parcel)": {
      "isImplementation": true,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "sender",
        "out"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "writePendingIntentOrNullToParcel(android.app.PendingIntent,android.os.Parcel)"
    }
  },
  "imports": [
    "android.app.PendingIntent.FLAG_CANCEL_CURRENT",
    "android.app.PendingIntent.FLAG_IMMUTABLE",
    "android.app.PendingIntent.FLAG_NO_CREATE",
    "android.app.PendingIntent.FLAG_ONE_SHOT",
    "android.app.PendingIntent.FLAG_UPDATE_CURRENT",
    "android.os.Build.VERSION_CODES.JELLY_BEAN_MR1",
    "android.os.Build.VERSION_CODES.M",
    "android.os.Build.VERSION_CODES.O",
    "android.annotation.NonNull",
    "android.annotation.SuppressLint",
    "android.app.Activity",
    "android.app.ActivityThread",
    "android.app.PendingIntent",
    "android.app.PendingIntent.CanceledException",
    "android.content.Context",
    "android.content.Intent",
    "android.content.IntentSender",
    "android.os.Bundle",
    "android.os.Handler",
    "android.os.IBinder",
    "android.os.Parcel",
    "java.util.ArrayList",
    "java.util.Arrays",
    "java.util.Iterator",
    "java.util.List",
    "java.util.Objects",
    "javax.annotation.Nullable",
    "javax.annotation.concurrent.GuardedBy",
    "org.robolectric.RuntimeEnvironment",
    "org.robolectric.annotation.Implementation",
    "org.robolectric.annotation.Implements",
    "org.robolectric.annotation.RealObject",
    "org.robolectric.annotation.Resetter",
    "org.robolectric.fakes.RoboIntentSender",
    "org.robolectric.shadow.api.Shadow",
    "org.robolectric.util.ReflectionHelpers",
    "org.robolectric.shadows.ShadowPendingIntent.Type"
  ],
  "name": "org.robolectric.shadows.ShadowPendingIntent"
}