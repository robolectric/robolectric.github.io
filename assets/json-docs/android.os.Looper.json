{
  "methods": {
    "assertLooperMode(org.robolectric.annotation.LooperMode.Mode)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "expectedMode"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "assertLooperMode(org.robolectric.annotation.LooperMode.Mode)"
    },
    "getAllLoopers()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [],
      "returnType": "java.util.Collection\u003candroid.os.Looper\u003e",
      "exceptions": [],
      "name": "getAllLoopers()",
      "documentation": "Return all created loopers. "
    },
    "getLastScheduledTaskTime()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "abstract"
      ],
      "params": [],
      "returnType": "java.time.Duration",
      "exceptions": [],
      "name": "getLastScheduledTaskTime()",
      "documentation": "@return the scheduled time of the last posted task; Duration.ZERO 0 if there is no currently\n    scheduled task.\n"
    },
    "getLooperForThread(java.lang.Thread)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "thread"
      ],
      "returnType": "android.os.Looper",
      "exceptions": [],
      "name": "getLooperForThread(java.lang.Thread)"
    },
    "getNextScheduledTaskTime()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "abstract"
      ],
      "params": [],
      "returnType": "java.time.Duration",
      "exceptions": [],
      "name": "getNextScheduledTaskTime()",
      "documentation": "@return the scheduled time of the next posted task; Duration.ZERO if there is no currently\n    scheduled task.\n"
    },
    "getScheduler()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "abstract"
      ],
      "params": [],
      "returnType": "org.robolectric.util.Scheduler",
      "exceptions": [],
      "name": "getScheduler()",
      "documentation": "Returns the {@link org.robolectric.util.Scheduler} that is being used to manage the enqueued\ntasks. This scheduler is managed by the Looper\u0027s associated queue.\n\n\u003cp\u003eOnly supported for {@link LooperMode.Mode.LEGACY}.\n\n@return the {@link org.robolectric.util.Scheduler} that is being used to manage the enqueued\n    tasks.\n"
    },
    "getShadowMainLooper()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [],
      "returnType": "org.robolectric.shadows.ShadowLooper",
      "exceptions": [],
      "name": "getShadowMainLooper()",
      "documentation": "@deprecated Use {@code shadowOf({@link Looper#getMainLooper()})} instead. "
    },
    "hasQuit()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "abstract"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "name": "hasQuit()"
    },
    "idle()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "abstract"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "idle()",
      "documentation": "Executes all posted tasks scheduled before or at the current time. "
    },
    "idle(long)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "intervalMillis"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "idle(long)",
      "documentation": "Causes {@link Runnable}s that have been scheduled to run within the next {@code intervalMillis}\nmilliseconds to run while advancing the scheduler\u0027s clock.\n\n@deprecated Use {@link #idle(long, TimeUnit)}.\n"
    },
    "idle(long,java.util.concurrent.TimeUnit)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "amount",
        "unit"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "idle(long,java.util.concurrent.TimeUnit)",
      "documentation": "Causes {@link Runnable}s that have been scheduled to run within the next specified amount of\ntime to run while advancing the clock.\n\n@deprecated use {@link idleFor(amount, unit)}\n"
    },
    "idleConstantly(boolean)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "abstract"
      ],
      "params": [
        "shouldIdleConstantly"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "idleConstantly(boolean)"
    },
    "idleFor(java.time.Duration)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "duration"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "idleFor(java.time.Duration)",
      "documentation": "A variant of {@link #idleFor(long, TimeUnit)} that accepts a Duration. "
    },
    "idleFor(long,java.util.concurrent.TimeUnit)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "abstract"
      ],
      "params": [
        "time",
        "timeUnit"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "idleFor(long,java.util.concurrent.TimeUnit)",
      "documentation": "Advances the system clock by the given time, then executes all posted tasks scheduled before or\nat the given time.\n"
    },
    "idleIfPaused()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "abstract"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "idleIfPaused()",
      "documentation": "Helper method to selectively call idle() only if LooperMode is PAUSED.\n\n\u003cp\u003eIntended for backwards compatibility, to avoid changing behavior for tests still using\nLEGACY LooperMode.\n"
    },
    "idleMainLooper()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "idleMainLooper()"
    },
    "idleMainLooper(long)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "interval"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "idleMainLooper(long)",
      "documentation": "@deprecated Use {@link #idleMainLooper(long, TimeUnit)}. "
    },
    "idleMainLooper(long,java.util.concurrent.TimeUnit)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "amount",
        "unit"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "idleMainLooper(long,java.util.concurrent.TimeUnit)"
    },
    "idleMainLooperConstantly(boolean)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "shouldIdleConstantly"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "idleMainLooperConstantly(boolean)"
    },
    "isIdle()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "abstract"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "name": "isIdle()",
      "documentation": "Returns true if the looper has any pending tasks scheduled to be executed before current time.\n"
    },
    "isPaused()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "abstract"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "name": "isPaused()"
    },
    "looperMode()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [],
      "returnType": "org.robolectric.annotation.LooperMode.Mode",
      "exceptions": [],
      "name": "looperMode()",
      "documentation": "Return the current {@link LooperMode}. "
    },
    "pause()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "abstract"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "pause()",
      "documentation": "Pause the looper.\n\n\u003cp\u003eHas no practical effect for realistic looper, since it is always paused.\n"
    },
    "pauseLooper(android.os.Looper)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "looper"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "pauseLooper(android.os.Looper)",
      "documentation": "Pauses execution of tasks posted to the ShadowLegacyLooper. This means that during tests, tasks\nsent to the looper will not execute immediately, but will be queued in a way that is similar to\nhow a real looper works. These queued tasks must be executed explicitly by calling {@link\n#runToEndOftasks} or a similar method, otherwise they will not run at all before your test\nends.\n\n@param looper the looper to pause\n"
    },
    "pauseMainLooper()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "pauseMainLooper()",
      "documentation": "Puts the main ShadowLegacyLooper in an \"paused\" state.\n\n@see #pauseLooper\n"
    },
    "post(java.lang.Runnable,long)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "abstract"
      ],
      "params": [
        "runnable",
        "delayMillis"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "name": "post(java.lang.Runnable,long)",
      "documentation": "Enqueue a task to be run later.\n\n@param runnable the task to be run\n@param delayMillis how many milliseconds into the (virtual) future to run it\n@return true if the runnable is enqueued\n@see android.os.Handler#postDelayed(Runnable,long)\n@deprecated Use a {@link android.os.Handler} instance to post to a looper.\n"
    },
    "postAtFrontOfQueue(java.lang.Runnable)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "abstract"
      ],
      "params": [
        "runnable"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "name": "postAtFrontOfQueue(java.lang.Runnable)",
      "documentation": "Enqueue a task to be run ahead of all other delayed tasks.\n\n@param runnable the task to be run\n@return true if the runnable is enqueued\n@see android.os.Handler#postAtFrontOfQueue(Runnable)\n@deprecated Use a {@link android.os.Handler} instance to post to a looper.\n"
    },
    "quitUnchecked()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "abstract"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "quitUnchecked()"
    },
    "reset()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "abstract"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "reset()",
      "documentation": "Causes all enqueued tasks to be discarded, and pause state to be reset "
    },
    "resetScheduler()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "abstract"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "resetScheduler()",
      "documentation": "Only supported for {@link LooperMode.Mode.LEGACY}. "
    },
    "resetThreadLoopers()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "resetThreadLoopers()",
      "documentation": "Should not be called directly - Robolectric internal use only. "
    },
    "runMainLooperOneTask()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "runMainLooperOneTask()"
    },
    "runMainLooperToNextTask()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "runMainLooperToNextTask()"
    },
    "runOneTask()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "abstract"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "runOneTask()",
      "documentation": "Causes only one of the next {@link Runnable}s that have been scheduled to run while advancing\nthe clock to its start time. Only one {@link Runnable} will run even if more than one has been\nscheduled to run at the same time.\n"
    },
    "runPaused(java.lang.Runnable)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "abstract"
      ],
      "params": [
        "run"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "runPaused(java.lang.Runnable)",
      "documentation": "Runs the current task with the looper paused.\n\n\u003cp\u003eWhen LooperMode is PAUSED, this will execute all pending tasks scheduled before the current\ntime.\n"
    },
    "runToEndOfTasks()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "abstract"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "runToEndOfTasks()",
      "documentation": "Causes all of the {@link Runnable}s that have been scheduled to run while advancing the clock\nto the start time of the last scheduled {@link Runnable}.\n"
    },
    "runToNextTask()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "abstract"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "runToNextTask()",
      "documentation": "Causes the next {@link Runnable}(s) that have been scheduled to run while advancing the clock\nto its start time. If more than one {@link Runnable} is scheduled to run at this time then they\nwill all be run.\n"
    },
    "runUiThreadTasks()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "runUiThreadTasks()",
      "documentation": "Runs any immediately runnable tasks previously queued on the UI thread, e.g. by {@link\nandroid.app.Activity#runOnUiThread(Runnable)} or {@link\nandroid.os.AsyncTask#onPostExecute(Object)}.\n\n\u003cp\u003e**Note:** calling this method does not pause or un-pause the scheduler.\n\n@see #runUiThreadTasksIncludingDelayedTasks\n"
    },
    "runUiThreadTasksIncludingDelayedTasks()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "runUiThreadTasksIncludingDelayedTasks()",
      "documentation": "Runs all runnable tasks (pending and future) that have been queued on the UI thread. Such tasks\nmay be queued by e.g. {@link android.app.Activity#runOnUiThread(Runnable)} or {@link\nandroid.os.AsyncTask#onPostExecute(Object)}.\n\n\u003cp\u003e**Note:** calling this method does not pause or un-pause the scheduler, however the clock is\nadvanced as future tasks are run.\n\n@see #runUiThreadTasks\n"
    },
    "setPaused(boolean)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "abstract"
      ],
      "params": [
        "shouldPause"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "name": "setPaused(boolean)",
      "documentation": "Control the paused state of the Looper.\n\n\u003cp\u003eNot supported for the main Looper in {@link LooperMode.Mode.PAUSED}.\n"
    },
    "shadowLooper(android.os.Looper)": {
      "isImplementation": false,
      "modifiers": [
        "private",
        "static"
      ],
      "params": [
        "looper"
      ],
      "returnType": "org.robolectric.shadows.ShadowLooper",
      "exceptions": [],
      "name": "shadowLooper(android.os.Looper)"
    },
    "shadowMainLooper()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [],
      "returnType": "org.robolectric.shadows.ShadowLooper",
      "exceptions": [],
      "name": "shadowMainLooper()"
    },
    "unPause()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "abstract"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "unPause()",
      "documentation": "Not supported for the main Looper in {@link LooperMode.Mode.PAUSED}. "
    },
    "unPauseLooper(android.os.Looper)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "looper"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "unPauseLooper(android.os.Looper)",
      "documentation": "Puts the shadow looper in an \"unpaused\" state (this is the default state). This means that\nduring tests, tasks sent to the looper will execute inline, immediately, on the calling (main)\nthread instead of being queued, in a way similar to how Guava\u0027s \"DirectExecutorService\" works.\nThis is likely not to be what you want: it will cause code to be potentially executed in a\ndifferent order than how it would execute on the device, and if you are using certain Android\nAPIs (such as view animations) that are non-reentrant, they may not work at all or do\nunpredictable things. For more information, see \u003ca\nhref\u003d\"https://github.com/robolectric/robolectric/issues/3369\"\u003ethis discussion\u003c/a\u003e.\n\n@param looper the looper to pause\n"
    },
    "unPauseMainLooper()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "unPauseMainLooper()",
      "documentation": "Puts the main ShadowLegacyLooper in an \"unpaused\" state.\n\n@see #unPauseLooper\n"
    }
  },
  "imports": [
    "android.os.Looper.getMainLooper",
    "org.robolectric.annotation.LooperMode.Mode.LEGACY",
    "android.os.Looper",
    "java.time.Duration",
    "java.util.Collection",
    "java.util.concurrent.TimeUnit",
    "org.robolectric.annotation.Implements",
    "org.robolectric.annotation.LooperMode",
    "org.robolectric.config.ConfigurationRegistry",
    "org.robolectric.shadow.api.Shadow",
    "org.robolectric.util.Scheduler",
    "org.robolectric.shadows.ShadowLooper.Picker"
  ],
  "name": "org.robolectric.shadows.ShadowLooper",
  "documentation": "The base shadow API class for controlling Loopers.\n\n\u003cp\u003eIt will delegate calls to the appropriate shadow based on the current LooperMode.\n"
}