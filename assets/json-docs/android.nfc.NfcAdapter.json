{
  "methods": {
    "disableForegroundDispatch(android.app.Activity)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "activity"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "disableForegroundDispatch(android.app.Activity)"
    },
    "disableReaderMode(android.app.Activity)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "activity"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 19,
      "name": "disableReaderMode(android.app.Activity)"
    },
    "dispatchTagDiscovered(android.nfc.Tag)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "tag"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "dispatchTagDiscovered(android.nfc.Tag)",
      "documentation": "Dispatches the tag onto any registered readers. "
    },
    "enableForegroundDispatch(android.app.Activity,android.app.PendingIntent,android.content.IntentFilter[],java.lang.String[][])": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "activity",
        "intent",
        "filters",
        "techLists"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "enableForegroundDispatch(android.app.Activity,android.app.PendingIntent,android.content.IntentFilter[],java.lang.String[][])"
    },
    "enableReaderMode(android.app.Activity,android.nfc.NfcAdapter.ReaderCallback,int,android.os.Bundle)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "activity",
        "callback",
        "flags",
        "extras"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 19,
      "name": "enableReaderMode(android.app.Activity,android.nfc.NfcAdapter.ReaderCallback,int,android.os.Bundle)"
    },
    "getDisabledActivity()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "android.app.Activity",
      "exceptions": [],
      "name": "getDisabledActivity()"
    },
    "getEnabledActivity()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "android.app.Activity",
      "exceptions": [],
      "name": "getEnabledActivity()"
    },
    "getFilters()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "android.content.IntentFilter[]",
      "exceptions": [],
      "name": "getFilters()"
    },
    "getIntent()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "android.app.PendingIntent",
      "exceptions": [],
      "name": "getIntent()"
    },
    "getNdefPushMessage()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "android.nfc.NdefMessage",
      "exceptions": [],
      "name": "getNdefPushMessage()",
      "documentation": "Returns last set NDEF message, or throws {@code IllegalStateException} if it was never set. "
    },
    "getNdefPushMessageCallback()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "android.nfc.NfcAdapter.CreateNdefMessageCallback",
      "exceptions": [],
      "name": "getNdefPushMessageCallback()",
      "documentation": "Returns last registered callback, or {@code null} if none was set. "
    },
    "getNfcAdapter(android.content.Context)": {
      "isImplementation": true,
      "modifiers": [
        "protected",
        "static"
      ],
      "params": [
        "context"
      ],
      "returnType": "android.nfc.NfcAdapter",
      "exceptions": [],
      "name": "getNfcAdapter(android.content.Context)"
    },
    "getOnNdefPushCompleteCallback()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "android.nfc.NfcAdapter.OnNdefPushCompleteCallback",
      "exceptions": [],
      "name": "getOnNdefPushCompleteCallback()"
    },
    "getTechLists()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "java.lang.String[][]",
      "exceptions": [],
      "name": "getTechLists()"
    },
    "isEnabled()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "name": "isEnabled()"
    },
    "isInReaderMode()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "name": "isInReaderMode()",
      "documentation": "Returns true if NFC is in reader mode. "
    },
    "reset()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static",
        "synchronized"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "reset()"
    },
    "setEnabled(boolean)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "enabled"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setEnabled(boolean)"
    },
    "setNdefPushMessage(android.nfc.NdefMessage,android.app.Activity,android.app.Activity...)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "message",
        "activity",
        "activities"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setNdefPushMessage(android.nfc.NdefMessage,android.app.Activity,android.app.Activity...)",
      "documentation": "Mocks setting NDEF push message so that it could be verified in the test. Use {@link\n#getNdefPushMessage()} to verify that message was set.\n"
    },
    "setNdefPushMessageCallback(android.nfc.NfcAdapter.CreateNdefMessageCallback,android.app.Activity,android.app.Activity...)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "callback",
        "activity",
        "activities"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setNdefPushMessageCallback(android.nfc.NfcAdapter.CreateNdefMessageCallback,android.app.Activity,android.app.Activity...)"
    },
    "setNfcHardwareExists(boolean)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "hardwareExists"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setNfcHardwareExists(boolean)",
      "documentation": "Modifies behavior of {@link #getNfcAdapter(Context)} to return {@code null}, to simulate\nabsence of NFC hardware.\n"
    },
    "setOnNdefPushCompleteCallback(android.nfc.NfcAdapter.OnNdefPushCompleteCallback,android.app.Activity,android.app.Activity...)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "callback",
        "activity",
        "activities"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setOnNdefPushCompleteCallback(android.nfc.NfcAdapter.OnNdefPushCompleteCallback,android.app.Activity,android.app.Activity...)",
      "documentation": "Sets callback that should be used on successful Android Beam (TM).\n\n\u003cp\u003eThe last registered callback is recalled and can be fetched using {@link\n#getOnNdefPushCompleteCallback}.\n"
    }
  },
  "imports": [
    "android.app.Activity",
    "android.app.PendingIntent",
    "android.content.Context",
    "android.content.IntentFilter",
    "android.content.pm.PackageManager",
    "android.nfc.NdefMessage",
    "android.nfc.NfcAdapter",
    "android.nfc.Tag",
    "android.os.Build",
    "android.os.Bundle",
    "org.robolectric.RuntimeEnvironment",
    "org.robolectric.annotation.Implementation",
    "org.robolectric.annotation.Implements",
    "org.robolectric.annotation.RealObject",
    "org.robolectric.annotation.Resetter",
    "org.robolectric.util.ReflectionHelpers"
  ],
  "name": "org.robolectric.shadows.ShadowNfcAdapter"
}