{
  "methods": {
    "abandonAudioFocus(android.media.AudioManager.OnAudioFocusChangeListener)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "l"
      ],
      "returnType": "int",
      "exceptions": [],
      "name": "abandonAudioFocus(android.media.AudioManager.OnAudioFocusChangeListener)"
    },
    "abandonAudioFocusRequest(android.media.AudioFocusRequest)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "audioFocusRequest"
      ],
      "returnType": "int",
      "exceptions": [],
      "minSdk": 26,
      "name": "abandonAudioFocusRequest(android.media.AudioFocusRequest)",
      "documentation": "Provides a mock like interface for the abandonAudioFocusRequest method by storing the request\nobject for later inspection and returning the value specified in setNextFocusRequestResponse.\n"
    },
    "adjustStreamVolume(int,int,int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "streamType",
        "direction",
        "flags"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "adjustStreamVolume(int,int,int)",
      "documentation": "Implements {@link AudioManager#adjustStreamVolume(int, int, int)}.\n\n\u003cp\u003eCurrently supports only the directions {@link AudioManager#ADJUST_MUTE}, {@link\nAudioManager#ADJUST_UNMUTE}, {@link AudioManager#ADJUST_LOWER} and {@link\nAudioManager#ADJUST_RAISE}.\n"
    },
    "clearCommunicationDevice()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 31,
      "name": "clearCommunicationDevice()"
    },
    "createActiveRecordingConfiguration(int,int,java.lang.String)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "sessionId",
        "audioSource",
        "clientPackageName"
      ],
      "returnType": "android.media.AudioRecordingConfiguration",
      "exceptions": [],
      "name": "createActiveRecordingConfiguration(int,int,java.lang.String)",
      "documentation": "Creates simple active recording configuration. The resulting configuration will return {@code\nnull} for {@link android.media.AudioRecordingConfiguration#getAudioDevice}.\n"
    },
    "createAudioPlaybackConfiguration(android.media.AudioAttributes)": {
      "isImplementation": false,
      "modifiers": [
        "protected"
      ],
      "params": [
        "audioAttributes"
      ],
      "returnType": "android.media.AudioPlaybackConfiguration",
      "exceptions": [],
      "name": "createAudioPlaybackConfiguration(android.media.AudioAttributes)"
    },
    "generateAudioSessionId()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "int",
      "exceptions": [],
      "minSdk": 21,
      "name": "generateAudioSessionId()",
      "documentation": "Provides a mock like interface for the {@link AudioManager#generateAudioSessionId} method by\nreturning positive distinct values, or {@link AudioManager#ERROR} if all possible values have\nalready been returned.\n"
    },
    "getActivePlaybackConfigurations()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "java.util.List\u003candroid.media.AudioPlaybackConfiguration\u003e",
      "exceptions": [],
      "minSdk": 26,
      "name": "getActivePlaybackConfigurations()"
    },
    "getActiveRecordingConfigurations()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "java.util.List\u003candroid.media.AudioRecordingConfiguration\u003e",
      "exceptions": [],
      "minSdk": 24,
      "name": "getActiveRecordingConfigurations()",
      "documentation": "Returns list of active recording configurations that was set by {@link\n#setActiveRecordingConfigurations} or empty list otherwise.\n"
    },
    "getCommunicationDevice()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "android.media.AudioDeviceInfo",
      "exceptions": [],
      "minSdk": 31,
      "name": "getCommunicationDevice()"
    },
    "getDevices(int)": {
      "isImplementation": true,
      "modifiers": [
        "public"
      ],
      "params": [
        "flags"
      ],
      "returnType": "android.media.AudioDeviceInfo[]",
      "exceptions": [],
      "minSdk": 23,
      "name": "getDevices(int)"
    },
    "getDevicesForAttributes(android.media.AudioAttributes)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "attributes"
      ],
      "returnType": "java.util.List\u003cjava.lang.Object\u003e",
      "exceptions": [],
      "minSdk": 30,
      "name": "getDevicesForAttributes(android.media.AudioAttributes)",
      "documentation": "Returns the devices associated with the given audio stream.\n\n\u003cp\u003eIn this shadow-implementation the devices returned are either\n\n\u003col\u003e\n  \u003cli\u003edevices set through {@link #setDevicesForAttributes}, or\n  \u003cli\u003edevices set through {@link #setDefaultDevicesForAttributes}, or\n  \u003cli\u003ean empty list.\n\u003c/ol\u003e\n"
    },
    "getIdForAudioPolicy(java.lang.Object)": {
      "isImplementation": false,
      "modifiers": [
        "private",
        "static"
      ],
      "params": [
        "audioPolicy"
      ],
      "returnType": "java.lang.String",
      "exceptions": [],
      "name": "getIdForAudioPolicy(java.lang.Object)"
    },
    "getInputDevices()": {
      "isImplementation": false,
      "modifiers": [
        "private"
      ],
      "params": [],
      "returnType": "java.util.List\u003candroid.media.AudioDeviceInfo\u003e",
      "exceptions": [],
      "name": "getInputDevices()"
    },
    "getLastAbandonedAudioFocusListener()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "android.media.AudioManager.OnAudioFocusChangeListener",
      "exceptions": [],
      "name": "getLastAbandonedAudioFocusListener()"
    },
    "getLastAbandonedAudioFocusRequest()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "android.media.AudioFocusRequest",
      "exceptions": [],
      "name": "getLastAbandonedAudioFocusRequest()"
    },
    "getLastAudioFocusRequest()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "org.robolectric.shadows.ShadowAudioManager.AudioFocusRequest",
      "exceptions": [],
      "name": "getLastAudioFocusRequest()"
    },
    "getMode()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "int",
      "exceptions": [],
      "name": "getMode()"
    },
    "getOutputDevices()": {
      "isImplementation": false,
      "modifiers": [
        "private"
      ],
      "params": [],
      "returnType": "java.util.List\u003candroid.media.AudioDeviceInfo\u003e",
      "exceptions": [],
      "name": "getOutputDevices()"
    },
    "getParameter(java.lang.String)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "key"
      ],
      "returnType": "java.lang.String",
      "exceptions": [],
      "name": "getParameter(java.lang.String)",
      "documentation": "Returns a single parameter that was set via {@link #setParameters(String)}. "
    },
    "getParameters(java.lang.String)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "keys"
      ],
      "returnType": "java.lang.String",
      "exceptions": [],
      "name": "getParameters(java.lang.String)",
      "documentation": "The expected composition for keys is not well defined.\n\n\u003cp\u003eFor testing purposes this method call always returns null.\n"
    },
    "getRingerMode()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "int",
      "exceptions": [],
      "name": "getRingerMode()"
    },
    "getStreamMaxVolume(int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "streamType"
      ],
      "returnType": "int",
      "exceptions": [],
      "name": "getStreamMaxVolume(int)"
    },
    "getStreamVolume(int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "streamType"
      ],
      "returnType": "int",
      "exceptions": [],
      "name": "getStreamVolume(int)"
    },
    "getStreamVolumeDb(int,int,int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "streamType",
        "index",
        "deviceType"
      ],
      "returnType": "float",
      "exceptions": [],
      "minSdk": 28,
      "name": "getStreamVolumeDb(int,int,int)"
    },
    "isAnyAudioPolicyRegistered()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "name": "isAnyAudioPolicyRegistered()",
      "documentation": "Returns true if at least one audio policy is registered with this manager, and false otherwise.\n"
    },
    "isBluetoothA2dpOn()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "name": "isBluetoothA2dpOn()"
    },
    "isBluetoothScoAvailableOffCall()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "name": "isBluetoothScoAvailableOffCall()"
    },
    "isBluetoothScoOn()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "name": "isBluetoothScoOn()"
    },
    "isMicrophoneMute()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "name": "isMicrophoneMute()"
    },
    "isMusicActive()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "name": "isMusicActive()"
    },
    "isSpeakerphoneOn()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "name": "isSpeakerphoneOn()"
    },
    "isStreamMute(int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "streamType"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "minSdk": 23,
      "name": "isStreamMute(int)"
    },
    "isValidRingerMode(int)": {
      "isImplementation": true,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "ringerMode"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "name": "isValidRingerMode(int)"
    },
    "isWiredHeadsetOn()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "name": "isWiredHeadsetOn()"
    },
    "registerAudioPlaybackCallback(android.media.AudioManager.AudioPlaybackCallback,android.os.Handler)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "cb",
        "handler"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 26,
      "name": "registerAudioPlaybackCallback(android.media.AudioManager.AudioPlaybackCallback,android.os.Handler)",
      "documentation": "Registers callback that will receive changes made to the list of active playback configurations\nby {@link setActivePlaybackConfigurationsFor}.\n"
    },
    "registerAudioPolicy(java.lang.Object)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "audioPolicy"
      ],
      "returnType": "int",
      "exceptions": [],
      "minSdk": 28,
      "name": "registerAudioPolicy(java.lang.Object)",
      "documentation": "Registers an {@link AudioPolicy} to allow that policy to control audio routing and audio focus.\n\n\u003cp\u003eNote: this implementation does NOT ensure that we have the permissions necessary to register\nthe given {@link AudioPolicy}.\n\n@return {@link AudioManager.ERROR} if the given policy has already been registered, and {@link\n    AudioManager.SUCCESS} otherwise.\n"
    },
    "registerAudioRecordingCallback(android.media.AudioManager.AudioRecordingCallback,android.os.Handler)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "cb",
        "handler"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 24,
      "name": "registerAudioRecordingCallback(android.media.AudioManager.AudioRecordingCallback,android.os.Handler)",
      "documentation": "Registers callback that will receive changes made to the list of active recording\nconfigurations by {@link setActiveRecordingConfigurations}.\n"
    },
    "requestAudioFocus(android.media.AudioFocusRequest)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "audioFocusRequest"
      ],
      "returnType": "int",
      "exceptions": [],
      "minSdk": 26,
      "name": "requestAudioFocus(android.media.AudioFocusRequest)",
      "documentation": "Provides a mock like interface for the requestAudioFocus method by storing the request object\nfor later inspection and returning the value specified in setNextFocusRequestResponse.\n"
    },
    "requestAudioFocus(android.media.AudioManager.OnAudioFocusChangeListener,int,int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "l",
        "streamType",
        "durationHint"
      ],
      "returnType": "int",
      "exceptions": [],
      "name": "requestAudioFocus(android.media.AudioManager.OnAudioFocusChangeListener,int,int)"
    },
    "setActivePlaybackConfigurationsFor(java.util.List\u003candroid.media.AudioAttributes\u003e)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "audioAttributes"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setActivePlaybackConfigurationsFor(java.util.List\u003candroid.media.AudioAttributes\u003e)",
      "documentation": "Sets active playback configurations that will be served by {@link\nAudioManager#getActivePlaybackConfigurations}.\n\n\u003cp\u003eNote that there is no public {@link AudioPlaybackConfiguration} constructor, so the\nconfigurations returned are specified by their audio attributes only.\n"
    },
    "setActivePlaybackConfigurationsFor(java.util.List\u003candroid.media.AudioAttributes\u003e,boolean)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "audioAttributes",
        "notifyCallbackListeners"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setActivePlaybackConfigurationsFor(java.util.List\u003candroid.media.AudioAttributes\u003e,boolean)",
      "documentation": "Same as {@link #setActivePlaybackConfigurationsFor(List)}, but also notifies callbacks if\nnotifyCallbackListeners is true.\n"
    },
    "setActiveRecordingConfigurations(java.util.List\u003candroid.media.AudioRecordingConfiguration\u003e,boolean)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "activeRecordingConfigurations",
        "notifyCallbackListeners"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setActiveRecordingConfigurations(java.util.List\u003candroid.media.AudioRecordingConfiguration\u003e,boolean)",
      "documentation": "Sets active recording configurations that will be served by {@link\nAudioManager#getActiveRecordingConfigurations} and notifies callback listeners about that\nchange.\n"
    },
    "setBluetoothA2dpOn(boolean)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "on"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setBluetoothA2dpOn(boolean)"
    },
    "setBluetoothScoOn(boolean)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "isBluetoothScoOn"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setBluetoothScoOn(boolean)"
    },
    "setCommunicationDevice(android.media.AudioDeviceInfo)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "communicationDevice"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "minSdk": 31,
      "name": "setCommunicationDevice(android.media.AudioDeviceInfo)"
    },
    "setDefaultDevicesForAttributes(com.google.common.collect.ImmutableList\u003cjava.lang.Object\u003e)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "devices"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setDefaultDevicesForAttributes(com.google.common.collect.ImmutableList\u003cjava.lang.Object\u003e)",
      "documentation": "Sets the devices to use as default for all audio streams. "
    },
    "setDevicesForAttributes(android.media.AudioAttributes,com.google.common.collect.ImmutableList\u003cjava.lang.Object\u003e)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "attributes",
        "devices"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setDevicesForAttributes(android.media.AudioAttributes,com.google.common.collect.ImmutableList\u003cjava.lang.Object\u003e)",
      "documentation": "Sets the devices associated with the given audio stream. "
    },
    "setInputDevices(java.util.List\u003candroid.media.AudioDeviceInfo\u003e)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "inputDevices"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setInputDevices(java.util.List\u003candroid.media.AudioDeviceInfo\u003e)"
    },
    "setIsBluetoothScoAvailableOffCall(boolean)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "isBluetoothScoAvailableOffCall"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setIsBluetoothScoAvailableOffCall(boolean)"
    },
    "setIsMusicActive(boolean)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "isMusicActive"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setIsMusicActive(boolean)"
    },
    "setIsStreamMute(int,boolean)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "streamType",
        "isMuted"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setIsStreamMute(int,boolean)"
    },
    "setMicrophoneMute(boolean)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "on"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setMicrophoneMute(boolean)"
    },
    "setMode(int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "mode"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setMode(int)"
    },
    "setNextFocusRequestResponse(int)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "nextResponseValue"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setNextFocusRequestResponse(int)"
    },
    "setOutputDevices(java.util.List\u003candroid.media.AudioDeviceInfo\u003e)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "outputDevices"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setOutputDevices(java.util.List\u003candroid.media.AudioDeviceInfo\u003e)"
    },
    "setParameters(java.lang.String)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "keyValuePairs"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setParameters(java.lang.String)"
    },
    "setRingerMode(int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "ringerMode"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setRingerMode(int)"
    },
    "setSpeakerphoneOn(boolean)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "on"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setSpeakerphoneOn(boolean)"
    },
    "setStreamMaxVolume(int)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "streamMaxVolume"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setStreamMaxVolume(int)"
    },
    "setStreamVolume(int)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "streamVolume"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setStreamVolume(int)"
    },
    "setStreamVolume(int,int,int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "streamType",
        "index",
        "flags"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setStreamVolume(int,int,int)"
    },
    "setWiredHeadsetOn(boolean)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "on"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setWiredHeadsetOn(boolean)"
    },
    "unregisterAudioPlaybackCallback(android.media.AudioManager.AudioPlaybackCallback)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "cb"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 26,
      "name": "unregisterAudioPlaybackCallback(android.media.AudioManager.AudioPlaybackCallback)",
      "documentation": "Unregisters callback listening to changes made to list of active playback configurations. "
    },
    "unregisterAudioPolicy(java.lang.Object)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "audioPolicy"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 29,
      "name": "unregisterAudioPolicy(java.lang.Object)"
    },
    "unregisterAudioRecordingCallback(android.media.AudioManager.AudioRecordingCallback)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "cb"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 24,
      "name": "unregisterAudioRecordingCallback(android.media.AudioManager.AudioRecordingCallback)",
      "documentation": "Unregisters callback listening to changes made to list of active recording configurations. "
    },
    "writeMono16BitAudioFormatToParcel(android.os.Parcel)": {
      "isImplementation": false,
      "modifiers": [
        "private",
        "static"
      ],
      "params": [
        "p"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "writeMono16BitAudioFormatToParcel(android.os.Parcel)"
    }
  },
  "imports": [
    "android.os.Build.VERSION_CODES.LOLLIPOP",
    "android.os.Build.VERSION_CODES.M",
    "android.os.Build.VERSION_CODES.N",
    "android.os.Build.VERSION_CODES.O",
    "android.os.Build.VERSION_CODES.P",
    "android.os.Build.VERSION_CODES.Q",
    "android.os.Build.VERSION_CODES.R",
    "android.os.Build.VERSION_CODES.S",
    "org.robolectric.util.ReflectionHelpers.ClassParameter.from",
    "android.annotation.NonNull",
    "android.annotation.RequiresPermission",
    "android.annotation.TargetApi",
    "android.media.AudioAttributes",
    "android.media.AudioDeviceInfo",
    "android.media.AudioFormat",
    "android.media.AudioManager",
    "android.media.AudioPlaybackConfiguration",
    "android.media.AudioRecordingConfiguration",
    "android.media.IPlayer",
    "android.media.PlayerBase",
    "android.media.audiopolicy.AudioPolicy",
    "android.os.Build.VERSION_CODES",
    "android.os.Handler",
    "android.os.Parcel",
    "com.android.internal.util.Preconditions",
    "com.google.common.collect.ImmutableList",
    "java.util.ArrayList",
    "java.util.Collections",
    "java.util.HashMap",
    "java.util.HashSet",
    "java.util.List",
    "java.util.Map",
    "org.robolectric.RuntimeEnvironment",
    "org.robolectric.annotation.HiddenApi",
    "org.robolectric.annotation.Implementation",
    "org.robolectric.annotation.Implements",
    "org.robolectric.util.ReflectionHelpers",
    "org.robolectric.shadows.ShadowAudioManager.AudioFocusRequest",
    "org.robolectric.shadows.ShadowAudioManager.AudioStream"
  ],
  "name": "org.robolectric.shadows.ShadowAudioManager"
}