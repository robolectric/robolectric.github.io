{
  "methods": {
    "addException(org.robolectric.shadows.util.DataSource,java.lang.RuntimeException)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "ds",
        "e"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "addException(org.robolectric.shadows.util.DataSource,java.lang.RuntimeException)",
      "documentation": "Configures an exception to be thrown when {@link #setDataSource} is called for the given data\nsource.\n\n@param ds the data source that will trigger an exception\n@param e the exception to trigger, or null to avoid throwing an exception.\n"
    },
    "addFrame(android.content.Context,android.net.Uri,long,android.graphics.Bitmap)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "context",
        "uri",
        "time",
        "bitmap"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "addFrame(android.content.Context,android.net.Uri,long,android.graphics.Bitmap)",
      "documentation": "Adds the given bitmap at the given time for the given data source. Uses {@code path} to call\n{@link org.robolectric.shadows.util.DataSource#toDataSource(Context, Uri)} and then calls\n{@link #addFrame(DataSource, long, Bitmap)}. This method is retained mostly for backwards\ncompatibility; you can call {@link #addFrame(DataSource, long, Bitmap)} directly.\n\n@param context the Context object to match on the data source.\n@param uri the Uri of the data source.\n@param time the playback time at which the specified bitmap should be retrieved.\n@param bitmap the bitmap to retrieve.\n"
    },
    "addFrame(java.io.FileDescriptor,long,android.graphics.Bitmap)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "fd",
        "time",
        "bitmap"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "addFrame(java.io.FileDescriptor,long,android.graphics.Bitmap)",
      "documentation": "Adds the given bitmap at the given time for the given data source. Uses {@code path} to call\n{@link org.robolectric.shadows.util.DataSource#toDataSource(FileDescriptor)} and then calls\n{@link #addFrame(DataSource, long, Bitmap)}. This method is retained mostly for backwards\ncompatibility; you can call {@link #addFrame(DataSource, long, Bitmap)} directly.\n\n@param fd file descriptor of the data source.\n@param time the playback time at which the specified bitmap should be retrieved.\n@param bitmap the bitmap to retrieve.\n"
    },
    "addFrame(java.io.FileDescriptor,long,long,long,android.graphics.Bitmap)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "fd",
        "offset",
        "length",
        "time",
        "bitmap"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "addFrame(java.io.FileDescriptor,long,long,long,android.graphics.Bitmap)",
      "documentation": "Adds the given bitmap at the given time for the given data source. Uses {@code path} to call\n{@link org.robolectric.shadows.util.DataSource#toDataSource(FileDescriptor, long, long)} and\nthen calls {@link #addFrame(DataSource, long, Bitmap)}. This method is retained mostly for\nbackwards compatibility; you can call {@link #addFrame(DataSource, long, Bitmap)} directly.\n\n@param fd file descriptor of the data source.\n@param offset the byte offset within the specified file from which to start reading the data.\n@param length the number of bytes to read from the file.\n@param time the playback time at which the specified bitmap should be retrieved.\n@param bitmap the bitmap to retrieve.\n"
    },
    "addFrame(java.lang.String,java.util.Map\u003cjava.lang.String,java.lang.String\u003e,long,android.graphics.Bitmap)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "uri",
        "headers",
        "time",
        "bitmap"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "addFrame(java.lang.String,java.util.Map\u003cjava.lang.String,java.lang.String\u003e,long,android.graphics.Bitmap)",
      "documentation": "Adds the given bitmap at the given time for the given data source. Uses {@code path} to call\n{@link org.robolectric.shadows.util.DataSource#toDataSource(String, Map)} and then calls {@link\n#addFrame(DataSource, long, Bitmap)}. This method is retained mostly for backwards\ncompatibility; you can call {@link #addFrame(DataSource, long, Bitmap)} directly.\n\n@param uri the Uri of the data source.\n@param headers the headers to use when requesting the specified uri.\n@param time the playback time at which the specified bitmap should be retrieved.\n@param bitmap the bitmap to retrieve.\n"
    },
    "addFrame(java.lang.String,long,android.graphics.Bitmap)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "path",
        "time",
        "bitmap"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "addFrame(java.lang.String,long,android.graphics.Bitmap)",
      "documentation": "Adds the given bitmap at the given time for the given data source. Uses {@code path} to call\n{@link org.robolectric.shadows.util.DataSource#toDataSource(String)} and then calls {@link\n#addFrame(DataSource, long, Bitmap)}. This method is retained mostly for backwards\ncompatibility; you can call {@link #addFrame(DataSource, long, Bitmap)} directly.\n\n@param path the path to the data source.\n@param time the playback time at which the specified bitmap should be retrieved.\n@param bitmap the bitmap to retrieve.\n"
    },
    "addFrame(org.robolectric.shadows.util.DataSource,long,android.graphics.Bitmap)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "ds",
        "time",
        "bitmap"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "addFrame(org.robolectric.shadows.util.DataSource,long,android.graphics.Bitmap)"
    },
    "addMetadata(java.lang.String,int,java.lang.String)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "path",
        "keyCode",
        "value"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "addMetadata(java.lang.String,int,java.lang.String)",
      "documentation": "Adds the given keyCode/value pair for the given data source. Uses {@code path} to call {@link\norg.robolectric.shadows.util.DataSource#toDataSource(String)} and then calls {@link\n#addMetadata(DataSource, int, String)}. This method is retained mostly for backwards\ncompatibility; you can call {@link #addMetadata(DataSource, int, String)} directly.\n\n@param path the path to the data source whose metadata is being set.\n@param keyCode the keyCode for the metadata being set, as used by {@link\n    MediaMetadataRetriever#extractMetadata(int)}.\n@param value the value for the specified metadata.\n"
    },
    "addMetadata(org.robolectric.shadows.util.DataSource,int,java.lang.String)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "ds",
        "keyCode",
        "value"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "addMetadata(org.robolectric.shadows.util.DataSource,int,java.lang.String)"
    },
    "addScaledFrame(org.robolectric.shadows.util.DataSource,long,int,int,android.graphics.Bitmap)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "ds",
        "time",
        "dstWidth",
        "dstHeight",
        "bitmap"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "addScaledFrame(org.robolectric.shadows.util.DataSource,long,int,int,android.graphics.Bitmap)"
    },
    "extractMetadata(int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "keyCode"
      ],
      "returnType": "java.lang.String",
      "exceptions": [],
      "name": "extractMetadata(int)"
    },
    "getFrameAtTime()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "android.graphics.Bitmap",
      "exceptions": [],
      "name": "getFrameAtTime()"
    },
    "getFrameAtTime(long,int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "timeUs",
        "option"
      ],
      "returnType": "android.graphics.Bitmap",
      "exceptions": [],
      "name": "getFrameAtTime(long,int)"
    },
    "getScaledFrameAtTime(long,int,int,int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "timeUs",
        "option",
        "dstWidth",
        "dstHeight"
      ],
      "returnType": "android.graphics.Bitmap",
      "exceptions": [],
      "minSdk": 27,
      "name": "getScaledFrameAtTime(long,int,int,int)"
    },
    "getScaledFrameKey(long,int,int)": {
      "isImplementation": false,
      "modifiers": [
        "private",
        "static"
      ],
      "params": [
        "time",
        "dstWidth",
        "dstHeight"
      ],
      "returnType": "java.lang.String",
      "exceptions": [],
      "name": "getScaledFrameKey(long,int,int)"
    },
    "reset()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "reset()"
    },
    "setDataSource(android.content.Context,android.net.Uri)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "context",
        "uri"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setDataSource(android.content.Context,android.net.Uri)"
    },
    "setDataSource(android.media.MediaDataSource)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "mediaDataSource"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 23,
      "name": "setDataSource(android.media.MediaDataSource)"
    },
    "setDataSource(java.io.FileDescriptor,long,long)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "fd",
        "offset",
        "length"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setDataSource(java.io.FileDescriptor,long,long)"
    },
    "setDataSource(java.lang.String)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "path"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setDataSource(java.lang.String)"
    },
    "setDataSource(java.lang.String,java.util.Map\u003cjava.lang.String,java.lang.String\u003e)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "uri",
        "headers"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setDataSource(java.lang.String,java.util.Map\u003cjava.lang.String,java.lang.String\u003e)"
    },
    "setDataSource(org.robolectric.shadows.util.DataSource)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "dataSource"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setDataSource(org.robolectric.shadows.util.DataSource)"
    }
  },
  "imports": [
    "android.os.Build.VERSION_CODES.M",
    "android.os.Build.VERSION_CODES.O_MR1",
    "org.robolectric.shadows.util.DataSource.toDataSource",
    "android.content.Context",
    "android.graphics.Bitmap",
    "android.media.MediaDataSource",
    "android.media.MediaMetadataRetriever",
    "android.net.Uri",
    "java.io.FileDescriptor",
    "java.util.HashMap",
    "java.util.Map",
    "org.robolectric.annotation.Implementation",
    "org.robolectric.annotation.Implements",
    "org.robolectric.annotation.Resetter",
    "org.robolectric.shadows.util.DataSource"
  ],
  "name": "org.robolectric.shadows.ShadowMediaMetadataRetriever"
}