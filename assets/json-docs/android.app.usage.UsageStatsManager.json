{
  "methods": {
    "addEvent(android.app.usage.UsageEvents.Event)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "event"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "addEvent(android.app.usage.UsageEvents.Event)",
      "documentation": "Adds an event to be returned by {@link UsageStatsManager#queryEvents}.\n\n\u003cp\u003eThis method won\u0027t affect the results of {@link #queryUsageStats} method.\n\n\u003cp\u003eThe {@link Event} can be built by {@link EventBuilder}.\n"
    },
    "addEvent(java.lang.String,long,int)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "packageName",
        "timeStamp",
        "eventType"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "addEvent(java.lang.String,long,int)",
      "documentation": "Adds an event to be returned by {@link UsageStatsManager#queryEvents}.\n\n\u003cp\u003eThis method won\u0027t affect the results of {@link #queryUsageStats} method.\n\n@deprecated Use {@link #addEvent(Event)} and {@link EventBuilder} instead.\n"
    },
    "addUsageStats(int,android.app.usage.UsageStats)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "intervalType",
        "stats"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "addUsageStats(int,android.app.usage.UsageStats)",
      "documentation": "Adds an aggregated {@code UsageStats} object, to be returned by {@link #queryUsageStats}.\nConstruct these objects with {@link UsageStatsBuilder}, and set the firstTimestamp and\nlastTimestamp fields to make time filtering work in {@link #queryUsageStats}.\n\n@param intervalType An interval type constant, e.g. {@link UsageStatsManager#INTERVAL_WEEKLY}.\n"
    },
    "getAppStandbyBucket()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "int",
      "exceptions": [],
      "minSdk": 28,
      "name": "getAppStandbyBucket()",
      "documentation": "Returns the current app\u0027s standby bucket that is set by {@code setCurrentAppStandbyBucket}. If\nthe standby bucket value has never been set, return {@link\nUsageStatsManager.STANDBY_BUCKET_ACTIVE}.\n"
    },
    "getAppStandbyBucket(java.lang.String)": {
      "isImplementation": true,
      "modifiers": [
        "public"
      ],
      "params": [
        "packageName"
      ],
      "returnType": "int",
      "exceptions": [],
      "minSdk": 28,
      "name": "getAppStandbyBucket(java.lang.String)",
      "documentation": "Returns the current standby bucket of the specified app that is set by {@code\nsetAppStandbyBucket}. If the standby bucket value has never been set, return {@link\nUsageStatsManager.STANDBY_BUCKET_ACTIVE}.\n"
    },
    "getAppStandbyBuckets()": {
      "isImplementation": true,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "java.util.Map\u003cjava.lang.String,java.lang.Integer\u003e",
      "exceptions": [],
      "minSdk": 28,
      "name": "getAppStandbyBuckets()"
    },
    "getRegisteredAppUsageLimitObservers()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "com.google.common.collect.ImmutableList\u003corg.robolectric.shadows.ShadowUsageStatsManager.AppUsageLimitObserver\u003e",
      "exceptions": [],
      "name": "getRegisteredAppUsageLimitObservers()",
      "documentation": "Returns the {@link AppUsageLimitObserver}s currently registered in {@link UsageStatsManager}.\n"
    },
    "getRegisteredAppUsageObservers()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "java.util.Collection\u003corg.robolectric.shadows.ShadowUsageStatsManager.AppUsageObserver\u003e",
      "exceptions": [],
      "name": "getRegisteredAppUsageObservers()",
      "documentation": "Returns the {@link AppUsageObserver}s currently registered in {@link UsageStatsManager}. "
    },
    "getRegisteredUsageSessionObservers()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "java.util.List\u003corg.robolectric.shadows.ShadowUsageStatsManager.UsageSessionObserver\u003e",
      "exceptions": [],
      "name": "getRegisteredUsageSessionObservers()",
      "documentation": "Returns the {@link UsageSessionObserver}s currently registered in {@link UsageStatsManager}.\n"
    },
    "getUsageSource()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "int",
      "exceptions": [],
      "minSdk": 29,
      "name": "getUsageSource()"
    },
    "queryEvents(long,long)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "beginTime",
        "endTime"
      ],
      "returnType": "android.app.usage.UsageEvents",
      "exceptions": [],
      "name": "queryEvents(long,long)"
    },
    "queryUsageStats(int,long,long)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "intervalType",
        "beginTime",
        "endTime"
      ],
      "returnType": "java.util.List\u003candroid.app.usage.UsageStats\u003e",
      "exceptions": [],
      "name": "queryUsageStats(int,long,long)",
      "documentation": "Returns aggregated UsageStats added by calling {@link #addUsageStats}.\n\n\u003cp\u003eThe real implementation creates these aggregated objects from individual {@link Event}. This\naggregation logic is nontrivial, so the shadow implementation just returns the aggregate data\nadded using {@link #addUsageStats}.\n"
    },
    "registerAppUsageLimitObserver(int,java.lang.String[],java.time.Duration,java.time.Duration,android.app.PendingIntent)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "observerId",
        "observedEntities",
        "timeLimit",
        "timeUsed",
        "callbackIntent"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 29,
      "name": "registerAppUsageLimitObserver(int,java.lang.String[],java.time.Duration,java.time.Duration,android.app.PendingIntent)",
      "documentation": "Registers an app usage limit observer that receives a callback on {@code callbackIntent} when\nthe sum of usages of apps and tokens in {@code observedEntities} exceeds {@code timeLimit -\ntimeUsed}.\n"
    },
    "registerAppUsageObserver(int,java.lang.String[],long,java.util.concurrent.TimeUnit,android.app.PendingIntent)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "observerId",
        "packages",
        "timeLimit",
        "timeUnit",
        "callbackIntent"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 28,
      "name": "registerAppUsageObserver(int,java.lang.String[],long,java.util.concurrent.TimeUnit,android.app.PendingIntent)"
    },
    "registerUsageSessionObserver(int,java.lang.String[],java.time.Duration,java.time.Duration,android.app.PendingIntent,android.app.PendingIntent)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "observerId",
        "packages",
        "sessionStepDuration",
        "thresholdTimeDuration",
        "sessionStepTriggeredIntent",
        "sessionEndedIntent"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 29,
      "name": "registerUsageSessionObserver(int,java.lang.String[],java.time.Duration,java.time.Duration,android.app.PendingIntent,android.app.PendingIntent)"
    },
    "reset()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "reset()"
    },
    "setAppStandbyBucket(java.lang.String,int)": {
      "isImplementation": true,
      "modifiers": [
        "public"
      ],
      "params": [
        "packageName",
        "bucket"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 28,
      "name": "setAppStandbyBucket(java.lang.String,int)",
      "documentation": "Sets the standby bucket of the specified app. "
    },
    "setAppStandbyBuckets(java.util.Map\u003cjava.lang.String,java.lang.Integer\u003e)": {
      "isImplementation": true,
      "modifiers": [
        "public"
      ],
      "params": [
        "appBuckets"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 28,
      "name": "setAppStandbyBuckets(java.util.Map\u003cjava.lang.String,java.lang.Integer\u003e)"
    },
    "setCurrentAppStandbyBucket(int)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "bucket"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setCurrentAppStandbyBucket(int)",
      "documentation": "Sets the current app\u0027s standby bucket "
    },
    "setUsageSource(int)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "usageSource"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setUsageSource(int)",
      "documentation": "Sets what app usage observers will consider the source of usage for an activity. "
    },
    "simulateTimeChange(long)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "offsetToAddInMillis"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "simulateTimeChange(long)",
      "documentation": "Simulates the operations done by the framework when there is a time change. If the time is\nchanged, the timestamps of all existing usage events will be shifted by the same offset as the\ntime change, in order to make sure they remain stable relative to the new time.\n\n\u003cp\u003eThis method won\u0027t affect the results of {@link #queryUsageStats} method.\n\n@param offsetToAddInMillis the offset to be applied to all events. For example, if {@code\n    offsetInMillis} is 60,000, then all {@link Event}s will be shifted forward by 1 minute\n    (into the future). Likewise, if {@code offsetInMillis} is -60,000, then all {@link Event}s\n    will be shifted backward by 1 minute (into the past).\n"
    },
    "triggerRegisteredAppUsageLimitObserver(int,java.time.Duration)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "observerId",
        "timeUsed"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "triggerRegisteredAppUsageLimitObserver(int,java.time.Duration)",
      "documentation": "Triggers a currently registered {@link AppUsageLimitObserver} with {@code observerId}.\n\n\u003cp\u003eThe observer will still be registered afterwards.\n"
    },
    "triggerRegisteredAppUsageObserver(int,long)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "observerId",
        "timeUsedInMillis"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "triggerRegisteredAppUsageObserver(int,long)",
      "documentation": "Triggers a currently registered {@link AppUsageObserver} with {@code observerId}.\n\n\u003cp\u003eThe observer will be no longer registered afterwards.\n"
    },
    "triggerRegisteredSessionEndedObserver(int)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "observerId"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "triggerRegisteredSessionEndedObserver(int)",
      "documentation": "Triggers a currently registered {@link UsageSessionObserver} with {@code observerId}.\n\n\u003cp\u003eThe observer SHOULD be registered afterwards.\n"
    },
    "triggerRegisteredSessionStepObserver(int,long)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "observerId",
        "timeUsedInMillis"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "triggerRegisteredSessionStepObserver(int,long)",
      "documentation": "Triggers a currently registered {@link UsageSessionObserver} with {@code observerId}.\n\n\u003cp\u003eThe observer SHOULD be registered afterwards.\n"
    },
    "unregisterAppUsageLimitObserver(int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "observerId"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 29,
      "name": "unregisterAppUsageLimitObserver(int)",
      "documentation": "Unregisters the app usage limit observer specified by {@code observerId}. "
    },
    "unregisterAppUsageObserver(int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "observerId"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 28,
      "name": "unregisterAppUsageObserver(int)"
    },
    "unregisterUsageSessionObserver(int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "observerId"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 29,
      "name": "unregisterUsageSessionObserver(int)"
    }
  },
  "imports": [
    "com.google.common.base.Preconditions.checkNotNull",
    "android.annotation.NonNull",
    "android.annotation.TargetApi",
    "android.app.PendingIntent",
    "android.app.PendingIntent.CanceledException",
    "android.app.usage.UsageEvents",
    "android.app.usage.UsageEvents.Event",
    "android.app.usage.UsageStats",
    "android.app.usage.UsageStatsManager",
    "android.app.usage.UsageStatsManager.StandbyBuckets",
    "android.app.usage.UsageStatsManager.UsageSource",
    "android.content.Intent",
    "android.content.res.Configuration",
    "android.os.Build",
    "android.os.Parcel",
    "android.util.ArraySet",
    "com.google.common.collect.HashMultimap",
    "com.google.common.collect.ImmutableList",
    "com.google.common.collect.ImmutableMap",
    "com.google.common.collect.Maps",
    "com.google.common.collect.Multimaps",
    "com.google.common.collect.Range",
    "com.google.common.collect.SetMultimap",
    "java.time.Duration",
    "java.util.ArrayList",
    "java.util.Arrays",
    "java.util.Collection",
    "java.util.HashMap",
    "java.util.LinkedHashMap",
    "java.util.List",
    "java.util.Map",
    "java.util.NavigableMap",
    "java.util.concurrent.TimeUnit",
    "org.robolectric.RuntimeEnvironment",
    "org.robolectric.annotation.HiddenApi",
    "org.robolectric.annotation.Implementation",
    "org.robolectric.annotation.Implements",
    "org.robolectric.annotation.Resetter",
    "org.robolectric.shadows.ShadowUsageStatsManager.AppUsageObserver",
    "org.robolectric.shadows.ShadowUsageStatsManager.UsageSessionObserver",
    "org.robolectric.shadows.ShadowUsageStatsManager.AppUsageLimitObserver",
    "org.robolectric.shadows.ShadowUsageStatsManager.UsageStatsBuilder",
    "org.robolectric.shadows.ShadowUsageStatsManager.EventBuilder"
  ],
  "name": "org.robolectric.shadows.ShadowUsageStatsManager",
  "documentation": "Shadow of {@link UsageStatsManager}. "
}