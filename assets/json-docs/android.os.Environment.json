{
  "methods": {
    "addExternalDir(java.lang.String)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "path"
      ],
      "returnType": "java.io.File",
      "exceptions": [],
      "name": "addExternalDir(java.lang.String)",
      "documentation": "Adds a directory to list returned by {@link ShadowUserEnvironment#getExternalDirs()}.\n\n@param path the external dir to add\n"
    },
    "buildExternalStorageAppCacheDirs(java.lang.String)": {
      "isImplementation": true,
      "modifiers": [
        "protected",
        "static"
      ],
      "params": [
        "packageName"
      ],
      "returnType": "java.io.File[]",
      "exceptions": [],
      "minSdk": 19,
      "name": "buildExternalStorageAppCacheDirs(java.lang.String)"
    },
    "getExternalStorageAppCacheDirectory(java.lang.String)": {
      "isImplementation": true,
      "modifiers": [
        "protected",
        "static"
      ],
      "params": [
        "packageName"
      ],
      "returnType": "java.io.File",
      "exceptions": [],
      "maxSdk": 18,
      "name": "getExternalStorageAppCacheDirectory(java.lang.String)"
    },
    "getExternalStorageDirectory()": {
      "isImplementation": true,
      "modifiers": [
        "protected",
        "static"
      ],
      "params": [],
      "returnType": "java.io.File",
      "exceptions": [],
      "name": "getExternalStorageDirectory()"
    },
    "getExternalStoragePublicDirectory(java.lang.String)": {
      "isImplementation": true,
      "modifiers": [
        "protected",
        "static"
      ],
      "params": [
        "type"
      ],
      "returnType": "java.io.File",
      "exceptions": [],
      "name": "getExternalStoragePublicDirectory(java.lang.String)"
    },
    "getExternalStorageState()": {
      "isImplementation": true,
      "modifiers": [
        "protected",
        "static"
      ],
      "params": [],
      "returnType": "java.lang.String",
      "exceptions": [],
      "name": "getExternalStorageState()"
    },
    "getExternalStorageState(java.io.File)": {
      "isImplementation": true,
      "modifiers": [
        "protected",
        "static"
      ],
      "params": [
        "directory"
      ],
      "returnType": "java.lang.String",
      "exceptions": [],
      "minSdk": 21,
      "name": "getExternalStorageState(java.io.File)"
    },
    "getStorageState(java.io.File)": {
      "isImplementation": true,
      "modifiers": [
        "protected",
        "static"
      ],
      "params": [
        "directory"
      ],
      "returnType": "java.lang.String",
      "exceptions": [],
      "minSdk": 19,
      "name": "getStorageState(java.io.File)"
    },
    "isExternalStorageEmulated()": {
      "isImplementation": true,
      "modifiers": [
        "protected",
        "static"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "name": "isExternalStorageEmulated()"
    },
    "isExternalStorageEmulated(java.io.File)": {
      "isImplementation": true,
      "modifiers": [
        "protected",
        "static"
      ],
      "params": [
        "path"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "minSdk": 21,
      "name": "isExternalStorageEmulated(java.io.File)"
    },
    "isExternalStorageLegacy()": {
      "isImplementation": true,
      "modifiers": [
        "protected",
        "static"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "minSdk": 29,
      "name": "isExternalStorageLegacy()"
    },
    "isExternalStorageLegacy(java.io.File)": {
      "isImplementation": true,
      "modifiers": [
        "protected",
        "static"
      ],
      "params": [
        "path"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "minSdk": 29,
      "name": "isExternalStorageLegacy(java.io.File)"
    },
    "isExternalStorageRemovable()": {
      "isImplementation": true,
      "modifiers": [
        "protected",
        "static"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "name": "isExternalStorageRemovable()"
    },
    "isExternalStorageRemovable(java.io.File)": {
      "isImplementation": true,
      "modifiers": [
        "protected",
        "static"
      ],
      "params": [
        "path"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "minSdk": 21,
      "name": "isExternalStorageRemovable(java.io.File)"
    },
    "reset()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "reset()"
    },
    "setExternalStorageDirectory(java.nio.file.Path)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "directory"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setExternalStorageDirectory(java.nio.file.Path)",
      "documentation": "Sets the return value of {@link #getExternalStorageDirectory()}.  Note that\nthe default value provides a directory that is usable in the test environment.\nIf the test app uses this method to override that default directory, please\nclean up any files written to that directory, as the Robolectric environment\nwill not purge that directory when the test ends.\n\n@param directory Path to return from {@link #getExternalStorageDirectory()}.\n"
    },
    "setExternalStorageEmulated(java.io.File,boolean)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "file",
        "isEmulated"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setExternalStorageEmulated(java.io.File,boolean)",
      "documentation": "Sets the \"isEmulated\" flag of a particular file.\n\n@param file Target file.\n@param isEmulated True if the filesystem is emulated.\n"
    },
    "setExternalStorageRemovable(java.io.File,boolean)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "file",
        "isRemovable"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setExternalStorageRemovable(java.io.File,boolean)",
      "documentation": "Sets the \"isRemovable\" flag of a particular file.\n\n@param file Target file.\n@param isRemovable True if the filesystem is removable.\n"
    },
    "setExternalStorageState(java.io.File,java.lang.String)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "directory",
        "state"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setExternalStorageState(java.io.File,java.lang.String)",
      "documentation": "Sets the {@link #getExternalStorageState(File)} for given directory.\n\n@param externalStorageState Value to return from {@link #getExternalStorageState(File)}.\n"
    },
    "setExternalStorageState(java.lang.String)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "externalStorageState"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setExternalStorageState(java.lang.String)",
      "documentation": "Sets the return value of {@link #getExternalStorageState()}.\n\n@param externalStorageState Value to return from {@link #getExternalStorageState()}.\n"
    },
    "setIsExternalStorageEmulated(boolean)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "emulated"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setIsExternalStorageEmulated(boolean)",
      "documentation": "Sets the return value of {@link #isExternalStorageEmulated()}.\n\n@param emulated Value to return from {@link #isExternalStorageEmulated()}.\n"
    },
    "setIsExternalStorageLegacy(boolean)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "legacy"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setIsExternalStorageLegacy(boolean)",
      "documentation": "Sets the return value of {@link #isExternalStorageLegacy()} ()}.\n\n@param legacy Value to return from {@link #isExternalStorageLegacy()}.\n"
    }
  },
  "imports": [
    "android.os.Build.VERSION_CODES.JELLY_BEAN_MR1",
    "android.os.Build.VERSION_CODES.JELLY_BEAN_MR2",
    "android.os.Build.VERSION_CODES.KITKAT",
    "android.os.Build.VERSION_CODES.LOLLIPOP",
    "android.os.Build.VERSION_CODES.M",
    "android.os.Build.VERSION_CODES.Q",
    "org.robolectric.util.reflector.Reflector.reflector",
    "android.os.Environment",
    "java.io.File",
    "java.io.IOException",
    "java.nio.file.FileAlreadyExistsException",
    "java.nio.file.Files",
    "java.nio.file.Path",
    "java.util.ArrayList",
    "java.util.HashMap",
    "java.util.List",
    "java.util.Map",
    "org.robolectric.RuntimeEnvironment",
    "org.robolectric.annotation.Implementation",
    "org.robolectric.annotation.Implements",
    "org.robolectric.annotation.Resetter",
    "org.robolectric.util.ReflectionHelpers",
    "org.robolectric.util.reflector.Accessor",
    "org.robolectric.util.reflector.ForType",
    "org.robolectric.shadows.ShadowEnvironment.ShadowUserEnvironment",
    "org.robolectric.shadows.ShadowEnvironment._UserEnvironment_"
  ],
  "name": "org.robolectric.shadows.ShadowEnvironment"
}