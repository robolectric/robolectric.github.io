{
  "methods": {
    "doFrame(long,int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "frameTimeNanos",
        "frame"
      ],
      "returnType": "void",
      "exceptions": [],
      "maxSdk": 30,
      "name": "doFrame(long,int)"
    },
    "getFrameDelay()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [],
      "returnType": "java.time.Duration",
      "exceptions": [],
      "name": "getFrameDelay()",
      "documentation": "See {@link #setFrameDelay(Duration)}. "
    },
    "getFrameInterval()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [],
      "returnType": "long",
      "exceptions": [],
      "name": "getFrameInterval()",
      "documentation": "Return the current inter-frame interval.\n\n\u003cp\u003eCan only be used in {@link LooperMode.Mode#LEGACY}\n\n@return Inter-frame interval.\n@deprecated Use the {@link Mode#PAUSED} looper and {@link #getFrameDelay()} to configure the\n    frame delay.\n"
    },
    "isPaused()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "name": "isPaused()",
      "documentation": "See {@link #setPaused(boolean)}. "
    },
    "reset()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "reset()"
    },
    "setFrameDelay(java.time.Duration)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "delay"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setFrameDelay(java.time.Duration)",
      "documentation": "Sets the delay between each frame. Note that the frames use the {@link ShadowSystemClock} and\nso have the same fidelity, when using the paused looper mode (which is the only mode supported\nby {@code ShadowDisplayEventReceiver}) the clock has millisecond fidelity.\n\n\u003cp\u003eReasonable delays may be 15ms (approximating 60fps ~16.6ms), 10ms (approximating 90fps\n~11.1ms), and 30ms (approximating 30fps ~33.3ms). Choosing too small of a frame delay may\nincrease runtime as animation frames will have more steps.\n\n\u003cp\u003eOnly works in {@link LooperMode.Mode#PAUSED} looper mode.\n"
    },
    "setFrameInterval(long)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "frameInterval"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setFrameInterval(long)",
      "documentation": "Set the inter-frame interval used to advance the clock. By default, this is set to 1ms.\n\n\u003cp\u003eOnly supported in {@link LooperMode.Mode#LEGACY}\n\n@param frameInterval Inter-frame interval.\n@deprecated Use the {@link Mode#PAUSED} looper and {@link #setFrameDelay(Duration)} to\n    configure the frame delay.\n"
    },
    "setPaused(boolean)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "paused"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setPaused(boolean)",
      "documentation": "Sets whether posting a frame should auto advance the clock or not. When paused the clock is not\nauto advanced, when unpaused the clock is advanced by the frame delay every time a frame\ncallback is added. The default is not paused.\n\n\u003cp\u003eOnly works in {@link LooperMode.Mode#PAUSED} looper mode.\n"
    },
    "setPostCallbackDelay(int)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "delayMillis"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setPostCallbackDelay(int)",
      "documentation": "Allows application to specify a fixed amount of delay when {@link #postCallback(int, Runnable,\nObject)} is invoked. The default delay value is 0. This can be used to avoid infinite animation\ntasks to be spawned when the Robolectric {@link org.robolectric.util.Scheduler} is in {@link\norg.robolectric.util.Scheduler.IdleState#PAUSED} mode.\n\n\u003cp\u003eOnly supported in {@link LooperMode.Mode#LEGACY}\n\n@deprecated Use the {@link Mode#PAUSED} looper instead.\n"
    },
    "setPostFrameCallbackDelay(int)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "delayMillis"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setPostFrameCallbackDelay(int)",
      "documentation": "Allows application to specify a fixed amount of delay when {@link\n#postFrameCallback(FrameCallback)} is invoked. The default delay value is 0. This can be used\nto avoid infinite animation tasks to be spawned when in LooperMode PAUSED or {@link\norg.robolectric.util.Scheduler.IdleState#PAUSED} and displaying an animation.\n\n@deprecated Use the {@link Mode#PAUSED} looper and {@link #setPaused(boolean)} and {@link\n    #setFrameDelay(Duration)} to configure the vsync event behavior.\n"
    }
  },
  "imports": [
    "android.os.Build.VERSION_CODES.N",
    "android.os.Build.VERSION_CODES.R",
    "com.google.common.base.Preconditions.checkState",
    "org.robolectric.shadows.ShadowLooper.looperMode",
    "org.robolectric.util.reflector.Reflector.reflector",
    "android.os.Looper",
    "android.view.Choreographer",
    "android.view.Choreographer.FrameCallback",
    "android.view.DisplayEventReceiver",
    "java.time.Duration",
    "org.robolectric.RuntimeEnvironment",
    "org.robolectric.annotation.Implementation",
    "org.robolectric.annotation.Implements",
    "org.robolectric.annotation.LooperMode",
    "org.robolectric.annotation.LooperMode.Mode",
    "org.robolectric.annotation.RealObject",
    "org.robolectric.annotation.Resetter",
    "org.robolectric.util.PerfStatsCollector",
    "org.robolectric.util.reflector.Accessor",
    "org.robolectric.util.reflector.Direct",
    "org.robolectric.util.reflector.ForType",
    "org.robolectric.util.reflector.Static",
    "org.robolectric.shadows.ShadowChoreographer.Picker",
    "org.robolectric.shadows.ShadowChoreographer.ChoreographerReflector"
  ],
  "name": "org.robolectric.shadows.ShadowChoreographer",
  "documentation": "The shadow API for {@link android.view.Choreographer}.\n\n\u003cp\u003eDifferent shadow implementations will be used depending on the current {@link LooperMode}. See\n{@link ShadowLegacyChoreographer} and {@link ShadowPausedChoreographer} for details.\n"
}