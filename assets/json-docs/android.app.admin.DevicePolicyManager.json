{
  "methods": {
    "__constructor__(android.content.Context,android.app.admin.IDevicePolicyManager)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "context",
        "service"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 26,
      "name": "__constructor__(android.content.Context,android.app.admin.IDevicePolicyManager)"
    },
    "__constructor__(android.content.Context,android.os.Handler)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "context",
        "handler"
      ],
      "returnType": "void",
      "exceptions": [],
      "maxSdk": 23,
      "name": "__constructor__(android.content.Context,android.os.Handler)"
    },
    "__constructor__(android.content.Context,boolean)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "context",
        "parentInstance"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 24,
      "maxSdk": 25,
      "name": "__constructor__(android.content.Context,boolean)"
    },
    "activateResetToken(android.content.ComponentName)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "admin"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "name": "activateResetToken(android.content.ComponentName)",
      "documentation": "Activates reset token for given admin.\n\n@param admin Which {@link DeviceAdminReceiver} this request is associated with.\n@return if the activation state changed.\n@throws IllegalArgumentException if there is no token set for this admin.\n"
    },
    "addPersistentPreferredActivity(android.content.ComponentName,android.content.IntentFilter,android.content.ComponentName)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin",
        "filter",
        "activity"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 21,
      "name": "addPersistentPreferredActivity(android.content.ComponentName,android.content.IntentFilter,android.content.ComponentName)"
    },
    "addUserRestriction(android.content.ComponentName,java.lang.String)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin",
        "key"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 21,
      "name": "addUserRestriction(android.content.ComponentName,java.lang.String)"
    },
    "bindDeviceAdminServiceAsUser(android.content.ComponentName,android.content.Intent,android.content.ServiceConnection,int,android.os.UserHandle)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin",
        "serviceIntent",
        "conn",
        "flags",
        "targetUser"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "minSdk": 26,
      "name": "bindDeviceAdminServiceAsUser(android.content.ComponentName,android.content.Intent,android.content.ServiceConnection,int,android.os.UserHandle)",
      "documentation": "Bind to the same package in another user.\n\n\u003cp\u003eThis validates that the targetUser is one from {@link\n#getBindDeviceAdminTargetUsers(ComponentName)} but does not actually bind to a different user,\ninstead binding to the same user.\n\n\u003cp\u003eIt also does not validate the service being bound to.\n"
    },
    "clearPackagePersistentPreferredActivities(android.content.ComponentName,java.lang.String)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin",
        "packageName"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 21,
      "name": "clearPackagePersistentPreferredActivities(android.content.ComponentName,java.lang.String)"
    },
    "clearProfileOwner(android.content.ComponentName)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 21,
      "name": "clearProfileOwner(android.content.ComponentName)"
    },
    "clearUserRestriction(android.content.ComponentName,java.lang.String)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin",
        "key"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 21,
      "name": "clearUserRestriction(android.content.ComponentName,java.lang.String)"
    },
    "enableSystemApp(android.content.ComponentName,java.lang.String)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin",
        "packageName"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 21,
      "name": "enableSystemApp(android.content.ComponentName,java.lang.String)"
    },
    "enforceActiveAdmin(android.content.ComponentName)": {
      "isImplementation": false,
      "modifiers": [
        "private"
      ],
      "params": [
        "admin"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "enforceActiveAdmin(android.content.ComponentName)"
    },
    "enforceDeviceOwnerOrProfileOwner(android.content.ComponentName)": {
      "isImplementation": false,
      "modifiers": [
        "private"
      ],
      "params": [
        "admin"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "enforceDeviceOwnerOrProfileOwner(android.content.ComponentName)"
    },
    "enforceProfileOwner(android.content.ComponentName)": {
      "isImplementation": false,
      "modifiers": [
        "private"
      ],
      "params": [
        "admin"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "enforceProfileOwner(android.content.ComponentName)"
    },
    "failSetApplicationHiddenFor(java.util.Collection\u003cjava.lang.String\u003e)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "packagesToFail"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "failSetApplicationHiddenFor(java.util.Collection\u003cjava.lang.String\u003e)",
      "documentation": "Set package names for witch {@link DevicePolicyManager#setApplicationHidden} should fail.\n\n@param packagesToFail collection of package names or {@code null} to clear the packages.\n"
    },
    "finalizeWorkProfileProvisioning(android.os.UserHandle,android.accounts.Account)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "managedProfileUser",
        "migratedAccount"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 33,
      "name": "finalizeWorkProfileProvisioning(android.os.UserHandle,android.accounts.Account)"
    },
    "getAccountTypesWithManagementDisabled()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "java.lang.String[]",
      "exceptions": [],
      "minSdk": 21,
      "name": "getAccountTypesWithManagementDisabled()"
    },
    "getActiveAdmins()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "java.util.List\u003candroid.content.ComponentName\u003e",
      "exceptions": [],
      "name": "getActiveAdmins()"
    },
    "getAffiliationIds(android.content.ComponentName)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin"
      ],
      "returnType": "java.util.Set\u003cjava.lang.String\u003e",
      "exceptions": [],
      "minSdk": 26,
      "name": "getAffiliationIds(android.content.ComponentName)"
    },
    "getApplicationRestrictions(android.content.ComponentName,java.lang.String)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin",
        "packageName"
      ],
      "returnType": "android.os.Bundle",
      "exceptions": [],
      "minSdk": 21,
      "name": "getApplicationRestrictions(android.content.ComponentName,java.lang.String)"
    },
    "getApplicationRestrictions(java.lang.String)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "packageName"
      ],
      "returnType": "android.os.Bundle",
      "exceptions": [],
      "name": "getApplicationRestrictions(java.lang.String)",
      "documentation": "Returns all application restrictions of the {@code packageName} in a {@link Bundle}. "
    },
    "getAutoTimeRequired()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "minSdk": 21,
      "name": "getAutoTimeRequired()"
    },
    "getAutoTimeZoneEnabled(android.content.ComponentName)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "minSdk": 30,
      "name": "getAutoTimeZoneEnabled(android.content.ComponentName)"
    },
    "getBindDeviceAdminTargetUsers(android.content.ComponentName)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin"
      ],
      "returnType": "java.util.List\u003candroid.os.UserHandle\u003e",
      "exceptions": [],
      "minSdk": 26,
      "name": "getBindDeviceAdminTargetUsers(android.content.ComponentName)",
      "documentation": "Returns the list of target users that the calling device or profile owner can use when calling\n{@link #bindDeviceAdminServiceAsUser}.\n\n@see #setBindDeviceAdminTargetUsers(List)\n"
    },
    "getCameraDisabled(android.content.ComponentName)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "name": "getCameraDisabled(android.content.ComponentName)"
    },
    "getDeviceOwner()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "java.lang.String",
      "exceptions": [],
      "minSdk": 18,
      "name": "getDeviceOwner()",
      "documentation": "@see #setDeviceOwner(ComponentName) "
    },
    "getDevicePolicyManagementRoleHolderPackage()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "java.lang.String",
      "exceptions": [],
      "minSdk": 33,
      "name": "getDevicePolicyManagementRoleHolderPackage()"
    },
    "getKeyguardDisabledFeatures(android.content.ComponentName)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin"
      ],
      "returnType": "int",
      "exceptions": [],
      "minSdk": 17,
      "name": "getKeyguardDisabledFeatures(android.content.ComponentName)"
    },
    "getLastSetPassword()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "java.lang.String",
      "exceptions": [],
      "name": "getLastSetPassword()",
      "documentation": "Retrieves last password set through {@link DevicePolicyManager#resetPassword} or {@link\nDevicePolicyManager#resetPasswordWithToken}.\n"
    },
    "getLockTaskPackages(android.content.ComponentName)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin"
      ],
      "returnType": "java.lang.String[]",
      "exceptions": [],
      "minSdk": 21,
      "name": "getLockTaskPackages(android.content.ComponentName)"
    },
    "getLongSupportMessage(android.content.ComponentName)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin"
      ],
      "returnType": "java.lang.CharSequence",
      "exceptions": [],
      "minSdk": 24,
      "name": "getLongSupportMessage(android.content.ComponentName)"
    },
    "getMaximumFailedPasswordsForWipe(android.content.ComponentName)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin"
      ],
      "returnType": "int",
      "exceptions": [],
      "name": "getMaximumFailedPasswordsForWipe(android.content.ComponentName)"
    },
    "getMaximumTimeToLock(android.content.ComponentName)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin"
      ],
      "returnType": "long",
      "exceptions": [],
      "name": "getMaximumTimeToLock(android.content.ComponentName)"
    },
    "getNearbyAppStreamingPolicy()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "int",
      "exceptions": [],
      "minSdk": 31,
      "name": "getNearbyAppStreamingPolicy()"
    },
    "getNearbyNotificationStreamingPolicy()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "int",
      "exceptions": [],
      "minSdk": 31,
      "name": "getNearbyNotificationStreamingPolicy()"
    },
    "getOrganizationColor(android.content.ComponentName)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin"
      ],
      "returnType": "int",
      "exceptions": [],
      "minSdk": 24,
      "name": "getOrganizationColor(android.content.ComponentName)"
    },
    "getOrganizationName(android.content.ComponentName)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin"
      ],
      "returnType": "java.lang.CharSequence",
      "exceptions": [],
      "minSdk": 24,
      "name": "getOrganizationName(android.content.ComponentName)",
      "documentation": "Returns organization name.\n\n\u003cp\u003eThe API can only be called by profile owner since Android N.\n\n\u003cp\u003eAndroid framework has a hidden API for getting the organization name for device owner since\nAndroid O. This method, however, is extended to return the organization name for device owners\ntoo to make testing of {@link #setOrganizationName(ComponentName, CharSequence)} easier for\ndevice owner cases.\n"
    },
    "getPasswordComplexity()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "int",
      "exceptions": [],
      "minSdk": 29,
      "name": "getPasswordComplexity()"
    },
    "getPasswordExpiration(android.content.ComponentName)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin"
      ],
      "returnType": "long",
      "exceptions": [],
      "name": "getPasswordExpiration(android.content.ComponentName)"
    },
    "getPasswordExpirationTimeout(android.content.ComponentName)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin"
      ],
      "returnType": "long",
      "exceptions": [],
      "name": "getPasswordExpirationTimeout(android.content.ComponentName)"
    },
    "getPasswordHistoryLength(android.content.ComponentName)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin"
      ],
      "returnType": "int",
      "exceptions": [],
      "name": "getPasswordHistoryLength(android.content.ComponentName)"
    },
    "getPasswordMinimumLength(android.content.ComponentName)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin"
      ],
      "returnType": "int",
      "exceptions": [],
      "name": "getPasswordMinimumLength(android.content.ComponentName)"
    },
    "getPasswordMinimumLetters(android.content.ComponentName)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin"
      ],
      "returnType": "int",
      "exceptions": [],
      "name": "getPasswordMinimumLetters(android.content.ComponentName)"
    },
    "getPasswordMinimumLowerCase(android.content.ComponentName)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin"
      ],
      "returnType": "int",
      "exceptions": [],
      "name": "getPasswordMinimumLowerCase(android.content.ComponentName)"
    },
    "getPasswordMinimumNonLetter(android.content.ComponentName)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin"
      ],
      "returnType": "int",
      "exceptions": [],
      "name": "getPasswordMinimumNonLetter(android.content.ComponentName)"
    },
    "getPasswordMinimumNumeric(android.content.ComponentName)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin"
      ],
      "returnType": "int",
      "exceptions": [],
      "name": "getPasswordMinimumNumeric(android.content.ComponentName)"
    },
    "getPasswordMinimumSymbols(android.content.ComponentName)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin"
      ],
      "returnType": "int",
      "exceptions": [],
      "name": "getPasswordMinimumSymbols(android.content.ComponentName)"
    },
    "getPasswordMinimumUpperCase(android.content.ComponentName)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin"
      ],
      "returnType": "int",
      "exceptions": [],
      "name": "getPasswordMinimumUpperCase(android.content.ComponentName)"
    },
    "getPasswordQuality(android.content.ComponentName)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin"
      ],
      "returnType": "int",
      "exceptions": [],
      "name": "getPasswordQuality(android.content.ComponentName)"
    },
    "getPermissionGrantState(android.content.ComponentName,java.lang.String,java.lang.String)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin",
        "packageName",
        "permission"
      ],
      "returnType": "int",
      "exceptions": [],
      "minSdk": 23,
      "name": "getPermissionGrantState(android.content.ComponentName,java.lang.String,java.lang.String)"
    },
    "getPermissionPolicy(android.content.ComponentName)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin"
      ],
      "returnType": "int",
      "exceptions": [],
      "minSdk": 23,
      "name": "getPermissionPolicy(android.content.ComponentName)"
    },
    "getPermittedAccessibilityServices(android.content.ComponentName)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin"
      ],
      "returnType": "java.util.List\u003cjava.lang.String\u003e",
      "exceptions": [],
      "minSdk": 21,
      "name": "getPermittedAccessibilityServices(android.content.ComponentName)"
    },
    "getPermittedInputMethods(android.content.ComponentName)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin"
      ],
      "returnType": "java.util.List\u003cjava.lang.String\u003e",
      "exceptions": [],
      "minSdk": 21,
      "name": "getPermittedInputMethods(android.content.ComponentName)"
    },
    "getPolicyManagedProfiles(android.os.UserHandle)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "userHandle"
      ],
      "returnType": "java.util.List\u003candroid.os.UserHandle\u003e",
      "exceptions": [],
      "minSdk": 33,
      "name": "getPolicyManagedProfiles(android.os.UserHandle)",
      "documentation": "Returns the managed profiles set in {@link #setPolicyManagedProfiles(List)}. This value does\nnot take the user handle parameter into account.\n"
    },
    "getProfileOwner()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "android.content.ComponentName",
      "exceptions": [],
      "minSdk": 21,
      "name": "getProfileOwner()",
      "documentation": "@see #setProfileOwner(ComponentName) "
    },
    "getProfileOwnerNameAsUser(int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "userId"
      ],
      "returnType": "java.lang.String",
      "exceptions": [],
      "minSdk": 21,
      "name": "getProfileOwnerNameAsUser(int)",
      "documentation": "Returns the human-readable name of the profile owner for a user if set using {@link\n#setProfileOwnerName}, otherwise null.\n"
    },
    "getShadowUserManager()": {
      "isImplementation": false,
      "modifiers": [
        "private"
      ],
      "params": [],
      "returnType": "org.robolectric.shadows.ShadowUserManager",
      "exceptions": [],
      "name": "getShadowUserManager()"
    },
    "getShortSupportMessage(android.content.ComponentName)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin"
      ],
      "returnType": "java.lang.CharSequence",
      "exceptions": [],
      "minSdk": 24,
      "name": "getShortSupportMessage(android.content.ComponentName)"
    },
    "getStorageEncryption(android.content.ComponentName)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "name": "getStorageEncryption(android.content.ComponentName)"
    },
    "getStorageEncryptionStatus()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "int",
      "exceptions": [],
      "name": "getStorageEncryptionStatus()",
      "documentation": "@return the previously set status; default is {@link\n    DevicePolicyManager#ENCRYPTION_STATUS_UNSUPPORTED}\n@see #setStorageEncryptionStatus(int)\n"
    },
    "getSystemUpdatePolicy()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "android.app.admin.SystemUpdatePolicy",
      "exceptions": [],
      "minSdk": 23,
      "name": "getSystemUpdatePolicy()"
    },
    "getTimeZone()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "java.lang.String",
      "exceptions": [],
      "name": "getTimeZone()",
      "documentation": "Returns the time zone set by setTimeZone. "
    },
    "getUserProvisioningState()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "int",
      "exceptions": [],
      "minSdk": 24,
      "name": "getUserProvisioningState()",
      "documentation": "Returns the provisioning state set in {@link #setUserProvisioningState(int)}, or {@link\nDevicePolicyManager#STATE_USER_UNMANAGED} if none is set.\n"
    },
    "getUserProvisioningStateForUser(int)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "userId"
      ],
      "returnType": "int",
      "exceptions": [],
      "name": "getUserProvisioningStateForUser(int)",
      "documentation": "Returns the user provisioning state set by {@link #setUserProvisioningState(int, UserHandle)},\nor {@link DevicePolicyManager#STATE_USER_UNMANAGED} if none is set.\n"
    },
    "getWipeCalledTimes()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "long",
      "exceptions": [],
      "name": "getWipeCalledTimes()"
    },
    "grantPolicy(android.content.ComponentName,int)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "admin",
        "usesPolicy"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "grantPolicy(android.content.ComponentName,int)",
      "documentation": "Grants a particular device policy for an active ComponentName.\n\n@param admin the ComponentName which DeviceAdminReceiver this request is associated with. Must\n    be an active administrator, or an exception will be thrown. This value must never be null.\n@param usesPolicy the uses-policy to check\n"
    },
    "hasGrantedPolicy(android.content.ComponentName,int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin",
        "usesPolicy"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "name": "hasGrantedPolicy(android.content.ComponentName,int)"
    },
    "init(android.content.Context)": {
      "isImplementation": false,
      "modifiers": [
        "private"
      ],
      "params": [
        "context"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "init(android.content.Context)"
    },
    "isActivePasswordSufficient()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "name": "isActivePasswordSufficient()"
    },
    "isAdminActive(android.content.ComponentName)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "who"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "name": "isAdminActive(android.content.ComponentName)"
    },
    "isApplicationHidden(android.content.ComponentName,java.lang.String)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin",
        "packageName"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "minSdk": 21,
      "name": "isApplicationHidden(android.content.ComponentName,java.lang.String)"
    },
    "isDeviceManaged()": {
      "isImplementation": true,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "minSdk": 24,
      "name": "isDeviceManaged()",
      "documentation": "@see #setDeviceOwner(ComponentName) "
    },
    "isDeviceOwnerApp(java.lang.String)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "packageName"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "minSdk": 18,
      "name": "isDeviceOwnerApp(java.lang.String)"
    },
    "isDeviceProvisioned()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "minSdk": 26,
      "name": "isDeviceProvisioned()"
    },
    "isDeviceProvisioningConfigApplied()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "minSdk": 26,
      "name": "isDeviceProvisioningConfigApplied()"
    },
    "isLockTaskPermitted(java.lang.String)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "pkg"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "minSdk": 21,
      "name": "isLockTaskPermitted(java.lang.String)"
    },
    "isOrganizationOwnedDeviceWithManagedProfile()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "minSdk": 30,
      "name": "isOrganizationOwnedDeviceWithManagedProfile()",
      "documentation": "Returns the value stored using in the shadow, while the real method returns the value store on\nthe device.\n\n\u003cp\u003eThe value can be set by {@link #setOrganizationOwnedDeviceWithManagedProfile} and is {@code\nfalse} by default.\n"
    },
    "isPackageSuspended(android.content.ComponentName,java.lang.String)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin",
        "packageName"
      ],
      "returnType": "boolean",
      "exceptions": [
        "android.content.pm.PackageManager.NameNotFoundException"
      ],
      "minSdk": 24,
      "name": "isPackageSuspended(android.content.ComponentName,java.lang.String)"
    },
    "isPermissionGranted(java.lang.String,java.lang.String)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "packageName",
        "permission"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "name": "isPermissionGranted(java.lang.String,java.lang.String)"
    },
    "isProfileOwnerApp(java.lang.String)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "packageName"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "minSdk": 21,
      "name": "isProfileOwnerApp(java.lang.String)"
    },
    "isResetPasswordTokenActive(android.content.ComponentName)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "minSdk": 26,
      "name": "isResetPasswordTokenActive(android.content.ComponentName)"
    },
    "isUninstallBlocked(android.content.ComponentName,java.lang.String)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin",
        "packageName"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "minSdk": 21,
      "name": "isUninstallBlocked(android.content.ComponentName,java.lang.String)"
    },
    "isUniqueDeviceAttestationSupported()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "minSdk": 30,
      "name": "isUniqueDeviceAttestationSupported()"
    },
    "isUsbDataSignalingEnabled()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "minSdk": 31,
      "name": "isUsbDataSignalingEnabled()"
    },
    "isWorkProfileProvisioningFinalized(android.os.UserHandle,android.accounts.Account)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "userHandle",
        "migratedAccount"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "name": "isWorkProfileProvisioningFinalized(android.os.UserHandle,android.accounts.Account)",
      "documentation": "Returns if {@link #finalizeWorkProfileProvisioning(UserHandle, Account)} was called with the\nprovided parameters.\n"
    },
    "lockNow()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "lockNow()"
    },
    "passwordMeetsRequirements(java.lang.String)": {
      "isImplementation": false,
      "modifiers": [
        "private"
      ],
      "params": [
        "password"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "name": "passwordMeetsRequirements(java.lang.String)"
    },
    "removeActiveAdmin(android.content.ComponentName)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "removeActiveAdmin(android.content.ComponentName)"
    },
    "resetPassword(java.lang.String,int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "password",
        "flags"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "name": "resetPassword(java.lang.String,int)"
    },
    "resetPasswordWithToken(android.content.ComponentName,java.lang.String,byte[],int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin",
        "password",
        "token",
        "flags"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "minSdk": 26,
      "name": "resetPasswordWithToken(android.content.ComponentName,java.lang.String,byte[],int)"
    },
    "setAccountManagementDisabled(android.content.ComponentName,java.lang.String,boolean)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin",
        "accountType",
        "disabled"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 21,
      "name": "setAccountManagementDisabled(android.content.ComponentName,java.lang.String,boolean)"
    },
    "setActiveAdmin(android.content.ComponentName)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "componentName"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setActiveAdmin(android.content.ComponentName)",
      "documentation": "Sets the given {@code componentName} as one of the active admins. "
    },
    "setActivePasswordSufficient(boolean)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "sufficient"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setActivePasswordSufficient(boolean)",
      "documentation": "Sets if the password meets the current requirements.\n\n@param sufficient indicates the password meets the current requirements\n"
    },
    "setAffiliationIds(android.content.ComponentName,java.util.Set\u003cjava.lang.String\u003e)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin",
        "ids"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 26,
      "name": "setAffiliationIds(android.content.ComponentName,java.util.Set\u003cjava.lang.String\u003e)"
    },
    "setApplicationHidden(android.content.ComponentName,java.lang.String,boolean)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin",
        "packageName",
        "hidden"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "minSdk": 21,
      "name": "setApplicationHidden(android.content.ComponentName,java.lang.String,boolean)"
    },
    "setApplicationRestrictions(android.content.ComponentName,java.lang.String,android.os.Bundle)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin",
        "packageName",
        "applicationRestrictions"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 21,
      "name": "setApplicationRestrictions(android.content.ComponentName,java.lang.String,android.os.Bundle)"
    },
    "setApplicationRestrictions(java.lang.String,android.os.Bundle)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "packageName",
        "applicationRestrictions"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setApplicationRestrictions(java.lang.String,android.os.Bundle)",
      "documentation": "Sets the application restrictions of the {@code packageName}.\n\n\u003cp\u003eThe new {@code applicationRestrictions} always completely overwrites any existing ones.\n"
    },
    "setAutoTimeRequired(android.content.ComponentName,boolean)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin",
        "required"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 21,
      "name": "setAutoTimeRequired(android.content.ComponentName,boolean)"
    },
    "setAutoTimeZoneEnabled(android.content.ComponentName,boolean)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin",
        "enabled"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 30,
      "name": "setAutoTimeZoneEnabled(android.content.ComponentName,boolean)"
    },
    "setBindDeviceAdminTargetUsers(java.util.List\u003candroid.os.UserHandle\u003e)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "bindDeviceAdminTargetUsers"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setBindDeviceAdminTargetUsers(java.util.List\u003candroid.os.UserHandle\u003e)",
      "documentation": "Set the list of target users that the calling device or profile owner can use when calling\n{@link #bindDeviceAdminServiceAsUser}.\n\n@see #getBindDeviceAdminTargetUsers(ComponentName)\n"
    },
    "setCameraDisabled(android.content.ComponentName,boolean)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin",
        "disabled"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setCameraDisabled(android.content.ComponentName,boolean)"
    },
    "setDeviceOwner(android.content.ComponentName)": {
      "isImplementation": true,
      "modifiers": [
        "public"
      ],
      "params": [
        "admin"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "minSdk": 24,
      "maxSdk": 32,
      "name": "setDeviceOwner(android.content.ComponentName)",
      "documentation": "Sets the admin as active admin and device owner.\n\n@see DevicePolicyManager#getDeviceOwner()\n"
    },
    "setDevicePolicyManagementRoleHolderPackage(java.lang.String)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "packageName"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setDevicePolicyManagementRoleHolderPackage(java.lang.String)",
      "documentation": "Sets the package name of the device policy management role holder.\n\n@see #getDevicePolicyManagementRoleHolderPackage()\n"
    },
    "setDeviceProvisioned(boolean)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "isProvisioned"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setDeviceProvisioned(boolean)",
      "documentation": "Sets whether the device is provisioned. "
    },
    "setDeviceProvisioningConfigApplied()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 26,
      "name": "setDeviceProvisioningConfigApplied()"
    },
    "setIsUniqueDeviceAttestationSupported(boolean)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "supported"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setIsUniqueDeviceAttestationSupported(boolean)"
    },
    "setIsUsbDataSignalingEnabled(boolean)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "isEnabled"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setIsUsbDataSignalingEnabled(boolean)",
      "documentation": "Sets USB signaling device restriction. "
    },
    "setKeyguardDisabledFeatures(android.content.ComponentName,int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin",
        "which"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 17,
      "name": "setKeyguardDisabledFeatures(android.content.ComponentName,int)"
    },
    "setLockTaskPackages(android.content.ComponentName,java.lang.String[])": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin",
        "packages"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 21,
      "name": "setLockTaskPackages(android.content.ComponentName,java.lang.String[])"
    },
    "setLongSupportMessage(android.content.ComponentName,java.lang.CharSequence)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin",
        "message"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 24,
      "name": "setLongSupportMessage(android.content.ComponentName,java.lang.CharSequence)"
    },
    "setMaximumFailedPasswordsForWipe(android.content.ComponentName,int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin",
        "num"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setMaximumFailedPasswordsForWipe(android.content.ComponentName,int)"
    },
    "setMaximumTimeToLock(android.content.ComponentName,long)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin",
        "timeMs"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setMaximumTimeToLock(android.content.ComponentName,long)"
    },
    "setNearbyAppStreamingPolicy(int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "policy"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 31,
      "name": "setNearbyAppStreamingPolicy(int)"
    },
    "setNearbyNotificationStreamingPolicy(int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "policy"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 31,
      "name": "setNearbyNotificationStreamingPolicy(int)"
    },
    "setOrganizationColor(android.content.ComponentName,int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin",
        "color"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 24,
      "name": "setOrganizationColor(android.content.ComponentName,int)"
    },
    "setOrganizationName(android.content.ComponentName,java.lang.CharSequence)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin",
        "name"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 24,
      "name": "setOrganizationName(android.content.ComponentName,java.lang.CharSequence)",
      "documentation": "Sets organization name.\n\n\u003cp\u003eThe API can only be called by profile owner since Android N and can be called by both of\nprofile owner and device owner since Android O.\n"
    },
    "setOrganizationOwnedDeviceWithManagedProfile(boolean)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "value"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setOrganizationOwnedDeviceWithManagedProfile(boolean)",
      "documentation": "Sets the return value of the {@link\nDevicePolicyManager#isOrganizationOwnedDeviceWithManagedProfile} method (only for Android R+).\n"
    },
    "setPackagesSuspended(android.content.ComponentName,java.lang.String[],boolean)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin",
        "packageNames",
        "suspended"
      ],
      "returnType": "java.lang.String[]",
      "exceptions": [],
      "minSdk": 24,
      "name": "setPackagesSuspended(android.content.ComponentName,java.lang.String[],boolean)"
    },
    "setPasswordComplexity(int)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "passwordComplexity"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setPasswordComplexity(int)",
      "documentation": "Sets the password complexity. "
    },
    "setPasswordExpiration(android.content.ComponentName,long)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "admin",
        "timeout"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setPasswordExpiration(android.content.ComponentName,long)",
      "documentation": "Sets the password expiration time for a particular admin.\n\n@param admin which DeviceAdminReceiver this request is associated with.\n@param timeout the password expiration time, in milliseconds since epoch.\n"
    },
    "setPasswordExpirationTimeout(android.content.ComponentName,long)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin",
        "timeout"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setPasswordExpirationTimeout(android.content.ComponentName,long)"
    },
    "setPasswordHistoryLength(android.content.ComponentName,int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin",
        "length"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setPasswordHistoryLength(android.content.ComponentName,int)"
    },
    "setPasswordMinimumLength(android.content.ComponentName,int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin",
        "length"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setPasswordMinimumLength(android.content.ComponentName,int)"
    },
    "setPasswordMinimumLetters(android.content.ComponentName,int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin",
        "length"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setPasswordMinimumLetters(android.content.ComponentName,int)"
    },
    "setPasswordMinimumLowerCase(android.content.ComponentName,int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin",
        "length"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setPasswordMinimumLowerCase(android.content.ComponentName,int)"
    },
    "setPasswordMinimumNonLetter(android.content.ComponentName,int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin",
        "length"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setPasswordMinimumNonLetter(android.content.ComponentName,int)"
    },
    "setPasswordMinimumNumeric(android.content.ComponentName,int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin",
        "length"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setPasswordMinimumNumeric(android.content.ComponentName,int)"
    },
    "setPasswordMinimumSymbols(android.content.ComponentName,int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin",
        "length"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setPasswordMinimumSymbols(android.content.ComponentName,int)"
    },
    "setPasswordMinimumUpperCase(android.content.ComponentName,int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin",
        "length"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setPasswordMinimumUpperCase(android.content.ComponentName,int)"
    },
    "setPasswordQuality(android.content.ComponentName,int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin",
        "quality"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setPasswordQuality(android.content.ComponentName,int)"
    },
    "setPermissionGrantState(android.content.ComponentName,java.lang.String,java.lang.String,int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin",
        "packageName",
        "permission",
        "grantState"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "minSdk": 23,
      "name": "setPermissionGrantState(android.content.ComponentName,java.lang.String,java.lang.String,int)"
    },
    "setPermissionPolicy(android.content.ComponentName,int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin",
        "policy"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 23,
      "name": "setPermissionPolicy(android.content.ComponentName,int)"
    },
    "setPermittedAccessibilityServices(android.content.ComponentName,java.util.List\u003cjava.lang.String\u003e)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin",
        "packageNames"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "minSdk": 21,
      "name": "setPermittedAccessibilityServices(android.content.ComponentName,java.util.List\u003cjava.lang.String\u003e)",
      "documentation": "Sets permitted accessibility services.\n\n\u003cp\u003eThe API can be called by either a profile or device owner.\n\n\u003cp\u003eThis method does not check already enabled non-system accessibility services, so will always\nset the restriction and return true.\n"
    },
    "setPermittedInputMethods(android.content.ComponentName,java.util.List\u003cjava.lang.String\u003e)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin",
        "packageNames"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "minSdk": 21,
      "name": "setPermittedInputMethods(android.content.ComponentName,java.util.List\u003cjava.lang.String\u003e)",
      "documentation": "Sets permitted input methods.\n\n\u003cp\u003eThe API can be called by either a profile or device owner.\n\n\u003cp\u003eThis method does not check already enabled non-system input methods, so will always set the\nrestriction and return true.\n"
    },
    "setPolicyManagedProfiles(java.util.List\u003candroid.os.UserHandle\u003e)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "policyManagedProfiles"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setPolicyManagedProfiles(java.util.List\u003candroid.os.UserHandle\u003e)",
      "documentation": "Sets the value returned by {@link #getPolicyManagedProfiles(UserHandle)}. "
    },
    "setProfileOwner(android.content.ComponentName)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "admin"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setProfileOwner(android.content.ComponentName)",
      "documentation": "Sets the admin as active admin and profile owner.\n\n@see DevicePolicyManager#getProfileOwner()\n"
    },
    "setProfileOwnerName(int,java.lang.String)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "userId",
        "name"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setProfileOwnerName(int,java.lang.String)"
    },
    "setResetPasswordToken(android.content.ComponentName,byte[])": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin",
        "token"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "minSdk": 26,
      "name": "setResetPasswordToken(android.content.ComponentName,byte[])"
    },
    "setShortSupportMessage(android.content.ComponentName,java.lang.CharSequence)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin",
        "message"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 24,
      "name": "setShortSupportMessage(android.content.ComponentName,java.lang.CharSequence)"
    },
    "setStorageEncryption(android.content.ComponentName,boolean)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin",
        "encrypt"
      ],
      "returnType": "int",
      "exceptions": [],
      "name": "setStorageEncryption(android.content.ComponentName,boolean)"
    },
    "setStorageEncryptionStatus(int)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "status"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setStorageEncryptionStatus(int)",
      "documentation": "Setter for {@link DevicePolicyManager#getStorageEncryptionStatus()}. "
    },
    "setSystemUpdatePolicy(android.app.admin.SystemUpdatePolicy)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "policy"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setSystemUpdatePolicy(android.app.admin.SystemUpdatePolicy)",
      "documentation": "Sets the system update policy.\n\n@see #setSystemUpdatePolicy(ComponentName, SystemUpdatePolicy)\n"
    },
    "setSystemUpdatePolicy(android.content.ComponentName,android.app.admin.SystemUpdatePolicy)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin",
        "policy"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 23,
      "name": "setSystemUpdatePolicy(android.content.ComponentName,android.app.admin.SystemUpdatePolicy)"
    },
    "setTimeZone(android.content.ComponentName,java.lang.String)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin",
        "timeZone"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "minSdk": 28,
      "name": "setTimeZone(android.content.ComponentName,java.lang.String)"
    },
    "setUninstallBlocked(android.content.ComponentName,java.lang.String,boolean)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin",
        "packageName",
        "uninstallBlocked"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 21,
      "name": "setUninstallBlocked(android.content.ComponentName,java.lang.String,boolean)"
    },
    "setUserProvisioningState(int)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "state"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setUserProvisioningState(int)",
      "documentation": "Sets the user provisioning state.\n\n@param state to store provisioning state\n"
    },
    "setUserProvisioningState(int,android.os.UserHandle)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "state",
        "userHandle"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 33,
      "name": "setUserProvisioningState(int,android.os.UserHandle)"
    },
    "transferOwnership(android.content.ComponentName,android.content.ComponentName,android.os.PersistableBundle)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "admin",
        "target",
        "bundle"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 28,
      "name": "transferOwnership(android.content.ComponentName,android.content.ComponentName,android.os.PersistableBundle)"
    },
    "wasPackageEverHidden(java.lang.String)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "packageName"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "name": "wasPackageEverHidden(java.lang.String)",
      "documentation": "Returns {@code true} if the given {@code packageName} was ever hidden. "
    },
    "wasSystemAppEnabled(java.lang.String)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "packageName"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "name": "wasSystemAppEnabled(java.lang.String)",
      "documentation": "Returns {@code true} if the given {@code packageName} was a system app and was enabled. "
    },
    "wipeData(int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "flags"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "wipeData(int)"
    }
  },
  "imports": [
    "android.os.Build.VERSION_CODES.JELLY_BEAN_MR1",
    "android.os.Build.VERSION_CODES.JELLY_BEAN_MR2",
    "android.os.Build.VERSION_CODES.LOLLIPOP",
    "android.os.Build.VERSION_CODES.LOLLIPOP_MR1",
    "android.os.Build.VERSION_CODES.M",
    "android.os.Build.VERSION_CODES.N",
    "android.os.Build.VERSION_CODES.N_MR1",
    "android.os.Build.VERSION_CODES.O",
    "android.os.Build.VERSION_CODES.P",
    "android.os.Build.VERSION_CODES.Q",
    "android.os.Build.VERSION_CODES.R",
    "android.os.Build.VERSION_CODES.S",
    "android.os.Build.VERSION_CODES.S_V2",
    "android.os.Build.VERSION_CODES.TIRAMISU",
    "org.robolectric.Shadows.shadowOf",
    "org.robolectric.shadow.api.Shadow.invokeConstructor",
    "org.robolectric.util.ReflectionHelpers.ClassParameter.from",
    "android.accounts.Account",
    "android.annotation.NonNull",
    "android.annotation.Nullable",
    "android.annotation.RequiresPermission",
    "android.annotation.SuppressLint",
    "android.annotation.SystemApi",
    "android.app.ApplicationPackageManager",
    "android.app.KeyguardManager",
    "android.app.admin.DeviceAdminReceiver",
    "android.app.admin.DevicePolicyManager",
    "android.app.admin.DevicePolicyManager.NearbyStreamingPolicy",
    "android.app.admin.DevicePolicyManager.PasswordComplexity",
    "android.app.admin.DevicePolicyManager.UserProvisioningState",
    "android.app.admin.IDevicePolicyManager",
    "android.app.admin.SystemUpdatePolicy",
    "android.content.ComponentName",
    "android.content.Context",
    "android.content.Intent",
    "android.content.IntentFilter",
    "android.content.ServiceConnection",
    "android.content.pm.PackageInfo",
    "android.content.pm.PackageManager",
    "android.content.pm.PackageManager.NameNotFoundException",
    "android.os.Build",
    "android.os.Build.VERSION_CODES",
    "android.os.Bundle",
    "android.os.Handler",
    "android.os.PersistableBundle",
    "android.os.Process",
    "android.os.UserHandle",
    "android.text.TextUtils",
    "com.android.internal.util.Preconditions",
    "com.google.common.collect.ImmutableList",
    "java.util.ArrayList",
    "java.util.Arrays",
    "java.util.Collection",
    "java.util.Collections",
    "java.util.HashMap",
    "java.util.HashSet",
    "java.util.List",
    "java.util.Map",
    "java.util.Objects",
    "java.util.Set",
    "org.robolectric.RuntimeEnvironment",
    "org.robolectric.annotation.Implementation",
    "org.robolectric.annotation.Implements",
    "org.robolectric.annotation.RealObject",
    "org.robolectric.shadow.api.Shadow",
    "org.robolectric.shadows.ShadowDevicePolicyManager.PackageAndPermission"
  ],
  "name": "org.robolectric.shadows.ShadowDevicePolicyManager"
}