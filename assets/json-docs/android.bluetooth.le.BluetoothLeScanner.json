{
  "methods": {
    "addScanResult(android.bluetooth.le.ScanResult)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "scanResult"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "addScanResult(android.bluetooth.le.ScanResult)"
    },
    "getActiveScans()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "java.util.List\u003corg.robolectric.shadows.ShadowBluetoothLeScanner.ScanParams\u003e",
      "exceptions": [],
      "name": "getActiveScans()",
      "documentation": "Returns all {@link ScanParams}s representing active scans. "
    },
    "getScanCallbacks()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "java.util.Set\u003candroid.bluetooth.le.ScanCallback\u003e",
      "exceptions": [],
      "name": "getScanCallbacks()",
      "documentation": "Returns all currently active {@link ScanCallback}s. "
    },
    "startScan(java.util.List\u003candroid.bluetooth.le.ScanFilter\u003e,android.bluetooth.le.ScanSettings,android.app.PendingIntent)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "filters",
        "settings",
        "pendingIntent"
      ],
      "returnType": "int",
      "exceptions": [],
      "minSdk": 26,
      "name": "startScan(java.util.List\u003candroid.bluetooth.le.ScanFilter\u003e,android.bluetooth.le.ScanSettings,android.app.PendingIntent)",
      "documentation": "Tracks ongoing scans. Use {@link #getScanCallbacks} to get a list of any currently registered\n{@link ScanCallback}s.\n"
    },
    "startScan(java.util.List\u003candroid.bluetooth.le.ScanFilter\u003e,android.bluetooth.le.ScanSettings,android.bluetooth.le.ScanCallback)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "filters",
        "settings",
        "callback"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "startScan(java.util.List\u003candroid.bluetooth.le.ScanFilter\u003e,android.bluetooth.le.ScanSettings,android.bluetooth.le.ScanCallback)",
      "documentation": "Tracks ongoing scans. Use {@link #getScanCallbacks} to get a list of any currently registered\n{@link ScanCallback}s.\n"
    },
    "stopScan(android.app.PendingIntent)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "pendingIntent"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 26,
      "name": "stopScan(android.app.PendingIntent)"
    },
    "stopScan(android.bluetooth.le.ScanCallback)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "callback"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "stopScan(android.bluetooth.le.ScanCallback)"
    }
  },
  "imports": [
    "android.os.Build.VERSION_CODES.LOLLIPOP",
    "android.os.Build.VERSION_CODES.O",
    "com.google.common.base.Preconditions.checkNotNull",
    "java.util.Collections.unmodifiableList",
    "android.app.PendingIntent",
    "android.bluetooth.le.BluetoothLeScanner",
    "android.bluetooth.le.ScanCallback",
    "android.bluetooth.le.ScanFilter",
    "android.bluetooth.le.ScanResult",
    "android.bluetooth.le.ScanSettings",
    "com.google.auto.value.AutoValue",
    "com.google.common.collect.ImmutableList",
    "com.google.common.collect.Iterables",
    "com.google.common.collect.Lists",
    "java.util.ArrayList",
    "java.util.Collections",
    "java.util.HashSet",
    "java.util.List",
    "java.util.Objects",
    "java.util.Set",
    "javax.annotation.Nullable",
    "org.robolectric.annotation.Implementation",
    "org.robolectric.annotation.Implements",
    "org.robolectric.shadows.ShadowBluetoothLeScanner.ScanParams"
  ],
  "name": "org.robolectric.shadows.ShadowBluetoothLeScanner",
  "documentation": "Adds Robolectric support for BLE scanning. "
}