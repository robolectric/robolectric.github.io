{
  "methods": {
    "__constructor__()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "__constructor__()"
    },
    "addChild(android.view.View)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "child"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "addChild(android.view.View)"
    },
    "addChild(android.view.View,int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "root",
        "virtualDescendantId"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "addChild(android.view.View,int)"
    },
    "addChild(android.view.accessibility.AccessibilityNodeInfo)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "child"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "addChild(android.view.accessibility.AccessibilityNodeInfo)",
      "documentation": "Add a child node to this one. Also initializes the parent field of the\nchild.\n\n@param child The node to be added as a child.\n"
    },
    "areThereUnrecycledNodes(boolean)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "printUnrecycledNodesToSystemErr"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "name": "areThereUnrecycledNodes(boolean)",
      "documentation": "Check for leaked objects that were {@code obtain}ed but never\n{@code recycle}d.\n\n@param printUnrecycledNodesToSystemErr - if true, stack traces of calls\n       to {@code obtain} that lack matching calls to {@code recycle} are\n       dumped to System.err.\n@return {@code true} if there are unrecycled nodes\n"
    },
    "describeContents()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "int",
      "exceptions": [],
      "name": "describeContents()"
    },
    "equals(java.lang.Object)": {
      "isImplementation": true,
      "modifiers": [
        "public"
      ],
      "params": [
        "object"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "name": "equals(java.lang.Object)",
      "documentation": "Equality check based on reference equality of the Views from which these instances were\ncreated, or the equality of their assigned IDs.\n"
    },
    "getChild(int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "index"
      ],
      "returnType": "android.view.accessibility.AccessibilityNodeInfo",
      "exceptions": [],
      "name": "getChild(int)"
    },
    "getChildCount()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "int",
      "exceptions": [],
      "name": "getChildCount()"
    },
    "getClone()": {
      "isImplementation": false,
      "modifiers": [
        "private"
      ],
      "params": [],
      "returnType": "android.view.accessibility.AccessibilityNodeInfo",
      "exceptions": [],
      "name": "getClone()",
      "documentation": "@return A shallow copy.\n"
    },
    "getLabelFor()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "android.view.accessibility.AccessibilityNodeInfo",
      "exceptions": [],
      "minSdk": 18,
      "name": "getLabelFor()"
    },
    "getLabeledBy()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "android.view.accessibility.AccessibilityNodeInfo",
      "exceptions": [],
      "minSdk": 17,
      "name": "getLabeledBy()"
    },
    "getParent()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "android.view.accessibility.AccessibilityNodeInfo",
      "exceptions": [],
      "name": "getParent()"
    },
    "getPerformedActions()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "java.util.List\u003cjava.lang.Integer\u003e",
      "exceptions": [],
      "name": "getPerformedActions()",
      "documentation": "@return The list of arguments for the various calls to performAction. Unmodifiable.\n"
    },
    "getPerformedActionsWithArgs()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "java.util.List\u003candroid.util.Pair\u003cjava.lang.Integer,android.os.Bundle\u003e\u003e",
      "exceptions": [],
      "name": "getPerformedActionsWithArgs()",
      "documentation": "@return The list of arguments for the various calls to performAction. Unmodifiable.\n"
    },
    "getText()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "java.lang.CharSequence",
      "exceptions": [],
      "name": "getText()"
    },
    "getTraversalAfter()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "android.view.accessibility.AccessibilityNodeInfo",
      "exceptions": [],
      "minSdk": 22,
      "name": "getTraversalAfter()"
    },
    "getTraversalBefore()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "android.view.accessibility.AccessibilityNodeInfo",
      "exceptions": [],
      "minSdk": 22,
      "name": "getTraversalBefore()"
    },
    "getWindow()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "android.view.accessibility.AccessibilityWindowInfo",
      "exceptions": [],
      "minSdk": 21,
      "name": "getWindow()"
    },
    "getWindowId()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "int",
      "exceptions": [],
      "name": "getWindowId()",
      "documentation": "Returns the id of the window from which the info comes. "
    },
    "hashCode()": {
      "isImplementation": true,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "int",
      "exceptions": [],
      "name": "hashCode()"
    },
    "isPasteable()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "name": "isPasteable()"
    },
    "isTextSelectionSetable()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "name": "isTextSelectionSetable()"
    },
    "obtain()": {
      "isImplementation": true,
      "modifiers": [
        "protected",
        "static"
      ],
      "params": [],
      "returnType": "android.view.accessibility.AccessibilityNodeInfo",
      "exceptions": [],
      "name": "obtain()"
    },
    "obtain(android.view.View)": {
      "isImplementation": true,
      "modifiers": [
        "protected",
        "static"
      ],
      "params": [
        "view"
      ],
      "returnType": "android.view.accessibility.AccessibilityNodeInfo",
      "exceptions": [],
      "name": "obtain(android.view.View)"
    },
    "obtain(android.view.View,int)": {
      "isImplementation": true,
      "modifiers": [
        "protected",
        "static"
      ],
      "params": [
        "root",
        "virtualDescendantId"
      ],
      "returnType": "android.view.accessibility.AccessibilityNodeInfo",
      "exceptions": [],
      "name": "obtain(android.view.View,int)"
    },
    "obtain(android.view.accessibility.AccessibilityNodeInfo)": {
      "isImplementation": true,
      "modifiers": [
        "protected",
        "static"
      ],
      "params": [
        "info"
      ],
      "returnType": "android.view.accessibility.AccessibilityNodeInfo",
      "exceptions": [],
      "name": "obtain(android.view.accessibility.AccessibilityNodeInfo)"
    },
    "performAction(int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "action"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "name": "performAction(int)"
    },
    "performAction(int,android.os.Bundle)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "action",
        "arguments"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "name": "performAction(int,android.os.Bundle)"
    },
    "recycle()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "recycle()"
    },
    "refresh()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "minSdk": 18,
      "name": "refresh()"
    },
    "resetObtainedInstances()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "resetObtainedInstances()",
      "documentation": "Clear list of obtained instance objects. {@code areThereUnrecycledNodes}\nwill always return false if called immediately afterwards.\n"
    },
    "setAccessibilityWindowInfo(android.view.accessibility.AccessibilityWindowInfo)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "info"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setAccessibilityWindowInfo(android.view.accessibility.AccessibilityWindowInfo)"
    },
    "setLabelFor(android.view.accessibility.AccessibilityNodeInfo)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "info"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setLabelFor(android.view.accessibility.AccessibilityNodeInfo)"
    },
    "setLabeledBy(android.view.accessibility.AccessibilityNodeInfo)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "info"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setLabeledBy(android.view.accessibility.AccessibilityNodeInfo)"
    },
    "setOnPerformActionListener(org.robolectric.shadows.ShadowAccessibilityNodeInfo.OnPerformActionListener)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "listener"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setOnPerformActionListener(org.robolectric.shadows.ShadowAccessibilityNodeInfo.OnPerformActionListener)",
      "documentation": "Configure the return result of an action if it is performed\n\n@param listener The listener.\n"
    },
    "setPasteable(boolean)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "isPasteable"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setPasteable(boolean)"
    },
    "setRefreshReturnValue(boolean)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "refreshReturnValue"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setRefreshReturnValue(boolean)"
    },
    "setSource(android.view.View)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "source"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setSource(android.view.View)"
    },
    "setSource(android.view.View,int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "root",
        "virtualDescendantId"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setSource(android.view.View,int)"
    },
    "setText(java.lang.CharSequence)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "t"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setText(java.lang.CharSequence)"
    },
    "setTextSelectionSetable(boolean)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "isTextSelectionSetable"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setTextSelectionSetable(boolean)"
    },
    "setTraversalAfter(android.view.View,int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "view",
        "virtualDescendantId"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 22,
      "name": "setTraversalAfter(android.view.View,int)"
    },
    "setTraversalAfter(android.view.accessibility.AccessibilityNodeInfo)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "info"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setTraversalAfter(android.view.accessibility.AccessibilityNodeInfo)",
      "documentation": "Sets the view whose node is visited after this one in accessibility traversal.\n\nThis may be useful for configuring traversal order in tests before the corresponding\nviews have been inflated.\n\n@param info The previous node.\n@see #getTraversalAfter()\n"
    },
    "setTraversalBefore(android.view.View,int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "info",
        "virtualDescendantId"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 22,
      "name": "setTraversalBefore(android.view.View,int)"
    },
    "setTraversalBefore(android.view.accessibility.AccessibilityNodeInfo)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "info"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setTraversalBefore(android.view.accessibility.AccessibilityNodeInfo)",
      "documentation": "Sets the view before whose node this one should be visited during traversal.\n\nThis may be useful for configuring traversal order in tests before the corresponding\nviews have been inflated.\n\n@param info The view providing the preceding node.\n@see #getTraversalBefore()\n"
    },
    "toString()": {
      "isImplementation": true,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "java.lang.String",
      "exceptions": [],
      "name": "toString()"
    },
    "writeToParcel(android.os.Parcel,int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "dest",
        "flags"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "writeToParcel(android.os.Parcel,int)"
    }
  },
  "imports": [
    "android.os.Build.VERSION_CODES.JELLY_BEAN_MR1",
    "android.os.Build.VERSION_CODES.JELLY_BEAN_MR2",
    "android.os.Build.VERSION_CODES.KITKAT",
    "android.os.Build.VERSION_CODES.LOLLIPOP",
    "android.os.Build.VERSION_CODES.LOLLIPOP_MR1",
    "android.os.Build.VERSION_CODES.N",
    "android.os.Build.VERSION_CODES.O",
    "android.os.Build.VERSION_CODES.P",
    "org.robolectric.RuntimeEnvironment.getApiLevel",
    "org.robolectric.util.reflector.Reflector.reflector",
    "android.graphics.Rect",
    "android.os.Bundle",
    "android.os.Parcel",
    "android.os.Parcelable",
    "android.util.Pair",
    "android.util.SparseArray",
    "android.view.View",
    "android.view.accessibility.AccessibilityNodeInfo",
    "android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction",
    "android.view.accessibility.AccessibilityWindowInfo",
    "java.util.ArrayList",
    "java.util.Collections",
    "java.util.HashMap",
    "java.util.Iterator",
    "java.util.List",
    "java.util.Map",
    "org.robolectric.RuntimeEnvironment",
    "org.robolectric.annotation.Implementation",
    "org.robolectric.annotation.Implements",
    "org.robolectric.annotation.RealObject",
    "org.robolectric.annotation.ReflectorObject",
    "org.robolectric.annotation.Resetter",
    "org.robolectric.shadow.api.Shadow",
    "org.robolectric.util.ReflectionHelpers",
    "org.robolectric.util.reflector.Accessor",
    "org.robolectric.util.reflector.Direct",
    "org.robolectric.util.reflector.ForType",
    "org.robolectric.util.reflector.Static",
    "org.robolectric.shadows.ShadowAccessibilityNodeInfo.StrictEqualityNodeWrapper",
    "org.robolectric.shadows.ShadowAccessibilityNodeInfo.OnPerformActionListener",
    "org.robolectric.shadows.ShadowAccessibilityNodeInfo.AccessibilityNodeInfoReflector"
  ],
  "name": "org.robolectric.shadows.ShadowAccessibilityNodeInfo",
  "documentation": "Properties of {@link android.view.accessibility.AccessibilityNodeInfo} that are normally locked\nmay be changed using test APIs.\n\nCalls to {@code obtain()} and {@code recycle()} are tracked to help spot bugs.\n"
}