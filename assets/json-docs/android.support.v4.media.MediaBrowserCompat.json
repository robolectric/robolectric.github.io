{
  "methods": {
    "__constructor__(android.content.Context,android.content.ComponentName,android.support.v4.media.MediaBrowserCompat.ConnectionCallback,android.os.Bundle)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "context",
        "serviceComponent",
        "callback",
        "rootHints"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "__constructor__(android.content.Context,android.content.ComponentName,android.support.v4.media.MediaBrowserCompat.ConnectionCallback,android.os.Bundle)"
    },
    "applyOptionsToResults(java.util.List\u003candroid.support.v4.media.MediaBrowserCompat.MediaItem\u003e,android.os.Bundle)": {
      "isImplementation": false,
      "modifiers": [
        "private"
      ],
      "params": [
        "results",
        "options"
      ],
      "returnType": "java.util.List\u003candroid.support.v4.media.MediaBrowserCompat.MediaItem\u003e",
      "exceptions": [],
      "name": "applyOptionsToResults(java.util.List\u003candroid.support.v4.media.MediaBrowserCompat.MediaItem\u003e,android.os.Bundle)"
    },
    "connect()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "connect()"
    },
    "createMediaItem(java.lang.String,java.lang.String,java.lang.String,int)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "parentId",
        "mediaId",
        "title",
        "flag"
      ],
      "returnType": "android.support.v4.media.MediaBrowserCompat.MediaItem",
      "exceptions": [],
      "name": "createMediaItem(java.lang.String,java.lang.String,java.lang.String,int)",
      "documentation": "Creates a MediaItem and returns it.\n\n@param parentId the id of the parent MediaItem. If the MediaItem to be created will be the\n    root, parentId should be null.\n@param mediaId the id of the MediaItem to be created.\n@param title the title of the MediaItem to be created.\n@param flag says if the MediaItem to be created is browsable and/or playable.\n@return the newly created MediaItem.\n"
    },
    "disconnect()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "disconnect()"
    },
    "getCopyOfMediaItemChildren()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "java.util.Map\u003candroid.support.v4.media.MediaBrowserCompat.MediaItem,java.util.List\u003candroid.support.v4.media.MediaBrowserCompat.MediaItem\u003e\u003e",
      "exceptions": [],
      "name": "getCopyOfMediaItemChildren()",
      "documentation": "@return a copy of the internal {@link Map} that maps {@link MediaItem}s to their children. "
    },
    "getItem(java.lang.String,android.support.v4.media.MediaBrowserCompat.ItemCallback)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "mediaId",
        "cb"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "getItem(java.lang.String,android.support.v4.media.MediaBrowserCompat.ItemCallback)"
    },
    "getRoot()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "java.lang.String",
      "exceptions": [],
      "name": "getRoot()"
    },
    "getSessionToken()": {
      "isImplementation": true,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "android.support.v4.media.session.MediaSessionCompat.Token",
      "exceptions": [],
      "name": "getSessionToken()"
    },
    "isConnected()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "name": "isConnected()"
    },
    "search(java.lang.String,android.os.Bundle,android.support.v4.media.MediaBrowserCompat.SearchCallback)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "query",
        "extras",
        "callback"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "search(java.lang.String,android.os.Bundle,android.support.v4.media.MediaBrowserCompat.SearchCallback)",
      "documentation": "This differs from real Android search logic. Search results will contain all {@link\nMediaItem}\u0027s with a title that {@param query} is a substring of.\n"
    },
    "setRootId(java.lang.String)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "mediaId"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setRootId(java.lang.String)",
      "documentation": "Sets the root id. Can be called more than once.\n\n@param mediaId the id of the root MediaItem. This MediaItem should already have been created.\n"
    },
    "subscribe(java.lang.String,android.os.Bundle,android.support.v4.media.MediaBrowserCompat.SubscriptionCallback)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "parentId",
        "options",
        "callback"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "subscribe(java.lang.String,android.os.Bundle,android.support.v4.media.MediaBrowserCompat.SubscriptionCallback)"
    },
    "subscribe(java.lang.String,android.support.v4.media.MediaBrowserCompat.SubscriptionCallback)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "parentId",
        "callback"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "subscribe(java.lang.String,android.support.v4.media.MediaBrowserCompat.SubscriptionCallback)"
    }
  },
  "imports": [
    "android.support.v4.media.MediaBrowserCompat.EXTRA_PAGE",
    "android.support.v4.media.MediaBrowserCompat.EXTRA_PAGE_SIZE",
    "android.content.ComponentName",
    "android.content.Context",
    "android.net.Uri",
    "android.os.Bundle",
    "android.os.Handler",
    "android.support.annotation.NonNull",
    "android.support.annotation.Nullable",
    "android.support.v4.media.MediaBrowserCompat",
    "android.support.v4.media.MediaBrowserCompat.ConnectionCallback",
    "android.support.v4.media.MediaBrowserCompat.ItemCallback",
    "android.support.v4.media.MediaBrowserCompat.MediaItem",
    "android.support.v4.media.MediaBrowserCompat.SearchCallback",
    "android.support.v4.media.MediaBrowserCompat.SubscriptionCallback",
    "android.support.v4.media.MediaMetadataCompat",
    "android.support.v4.media.session.MediaSessionCompat",
    "android.support.v4.media.MediaBrowserServiceCompat",
    "java.util.ArrayList",
    "java.util.Collections",
    "java.util.LinkedHashMap",
    "java.util.List",
    "java.util.Map",
    "org.robolectric.annotation.Implementation",
    "org.robolectric.annotation.Implements",
    "org.robolectric.annotation.RealObject",
    "org.robolectric.shadow.api.Shadow",
    "org.robolectric.util.ReflectionHelpers.ClassParameter"
  ],
  "name": "org.robolectric.shadows.support.v4.ShadowMediaBrowserCompat",
  "documentation": "This will mimic the connection to a {@link MediaBrowserServiceCompat} by creating and maintaining\nits own account of {@link MediaItem}s.\n"
}