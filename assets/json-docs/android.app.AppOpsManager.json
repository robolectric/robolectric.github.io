{
  "methods": {
    "__constructor__(android.content.Context,com.android.internal.app.IAppOpsService)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "context",
        "service"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "__constructor__(android.content.Context,com.android.internal.app.IAppOpsService)"
    },
    "__staticInitializer__()": {
      "isImplementation": true,
      "modifiers": [
        "protected",
        "static"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "__staticInitializer__()"
    },
    "checkOp(java.lang.String,int,java.lang.String)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "op",
        "uid",
        "packageName"
      ],
      "returnType": "int",
      "exceptions": [],
      "minSdk": 30,
      "name": "checkOp(java.lang.String,int,java.lang.String)",
      "documentation": "Checks whether op was previously set using {@link #setMode} "
    },
    "checkOpNoThrow(int,int,java.lang.String)": {
      "isImplementation": true,
      "modifiers": [
        "public"
      ],
      "params": [
        "op",
        "uid",
        "packageName"
      ],
      "returnType": "int",
      "exceptions": [],
      "name": "checkOpNoThrow(int,int,java.lang.String)",
      "documentation": "Like {@link AppOpsManager#checkOp} but instead of throwing a {@link SecurityException} it\nreturns {@link AppOpsManager#MODE_ERRORED}.\n\n\u003cp\u003eMade public for testing {@link #setMode} as the method is {@code @hide}.\n"
    },
    "checkOpNoThrow(java.lang.String,int,java.lang.String)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "op",
        "uid",
        "packageName"
      ],
      "returnType": "int",
      "exceptions": [],
      "minSdk": 28,
      "name": "checkOpNoThrow(java.lang.String,int,java.lang.String)"
    },
    "checkPackage(int,java.lang.String)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "uid",
        "packageName"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "checkPackage(int,java.lang.String)"
    },
    "finishOp(int,int,java.lang.String)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "op",
        "uid",
        "packageName"
      ],
      "returnType": "void",
      "exceptions": [],
      "maxSdk": 29,
      "name": "finishOp(int,int,java.lang.String)",
      "documentation": "Removes a fake long-running operation from the set. "
    },
    "finishOp(java.lang.String,int,java.lang.String,java.lang.String)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "op",
        "uid",
        "packageName",
        "attributionTag"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 30,
      "name": "finishOp(java.lang.String,int,java.lang.String,java.lang.String)",
      "documentation": "Removes a fake long-running operation from the set. "
    },
    "getAudioRestrictionKey(int,int)": {
      "isImplementation": false,
      "modifiers": [
        "private",
        "static"
      ],
      "params": [
        "code",
        "usage"
      ],
      "returnType": "int",
      "exceptions": [],
      "name": "getAudioRestrictionKey(int,int)"
    },
    "getOpString(int)": {
      "isImplementation": false,
      "modifiers": [
        "protected"
      ],
      "params": [
        "opCode"
      ],
      "returnType": "java.lang.String",
      "exceptions": [],
      "name": "getOpString(int)"
    },
    "getOpsForPackage(int,java.lang.String,int[])": {
      "isImplementation": true,
      "modifiers": [
        "public"
      ],
      "params": [
        "uid",
        "packageName",
        "ops"
      ],
      "returnType": "java.util.List\u003candroid.app.AppOpsManager.PackageOps\u003e",
      "exceptions": [],
      "name": "getOpsForPackage(int,java.lang.String,int[])"
    },
    "getOpsForPackage(int,java.lang.String,java.lang.String[])": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "uid",
        "packageName",
        "ops"
      ],
      "returnType": "java.util.List\u003candroid.app.AppOpsManager.PackageOps\u003e",
      "exceptions": [],
      "minSdk": 29,
      "name": "getOpsForPackage(int,java.lang.String,java.lang.String[])"
    },
    "getPackagesForOps(int[])": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "ops"
      ],
      "returnType": "java.util.List\u003candroid.app.AppOpsManager.PackageOps\u003e",
      "exceptions": [],
      "name": "getPackagesForOps(int[])",
      "documentation": "Returns app op details for all packages for which one of {@link #setMode} methods was used to\nset the value of one of the given app ops (it does return those set to \u0027default\u0027 mode, while\nthe true implementation usually doesn\u0027t). Also, we don\u0027t enforce any permission checks which\nmight be needed in the true implementation.\n\n@param ops The set of operations you are interested in, or null if you want all of them.\n@return app ops information about each package, containing only ops that were specified as an\n    argument\n"
    },
    "getPackagesForOps(java.lang.String[])": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "ops"
      ],
      "returnType": "java.util.List\u003candroid.app.AppOpsManager.PackageOps\u003e",
      "exceptions": [],
      "minSdk": 29,
      "name": "getPackagesForOps(java.lang.String[])",
      "documentation": "Returns app op details for all packages for which one of {@link #setMode} methods was used to\nset the value of one of the given app ops (it does return those set to \u0027default\u0027 mode, while\nthe true implementation usually doesn\u0027t). Also, we don\u0027t enforce any permission checks which\nmight be needed in the true implementation.\n\n@param ops The set of operations you are interested in, or null if you want all of them.\n@return app ops information about each package, containing only ops that were specified as an\n    argument\n"
    },
    "getRestriction(int,int)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "code",
        "usage"
      ],
      "returnType": "org.robolectric.shadows.ShadowAppOpsManager.ModeAndException",
      "exceptions": [],
      "name": "getRestriction(int,int)"
    },
    "isOpActive(java.lang.String,int,java.lang.String)": {
      "isImplementation": true,
      "modifiers": [
        "public"
      ],
      "params": [
        "op",
        "uid",
        "packageName"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "minSdk": 30,
      "name": "isOpActive(java.lang.String,int,java.lang.String)",
      "documentation": "Checks whether the given op is active, i.e. did someone call {@link #startOp(String, int,\nString, String, String)} without {@link #finishOp(String, int, String, String)} yet.\n"
    },
    "noteOp(int,int,java.lang.String)": {
      "isImplementation": true,
      "modifiers": [
        "public"
      ],
      "params": [
        "op",
        "uid",
        "packageName"
      ],
      "returnType": "int",
      "exceptions": [],
      "name": "noteOp(int,int,java.lang.String)"
    },
    "noteOp(int,int,java.lang.String,java.lang.String,java.lang.String)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "op",
        "uid",
        "packageName",
        "attributionTag",
        "message"
      ],
      "returnType": "int",
      "exceptions": [],
      "minSdk": 30,
      "name": "noteOp(int,int,java.lang.String,java.lang.String,java.lang.String)"
    },
    "noteOpInternal(int,int,java.lang.String,java.lang.String,java.lang.String)": {
      "isImplementation": false,
      "modifiers": [
        "private"
      ],
      "params": [
        "op",
        "uid",
        "packageName",
        "attributionTag",
        "message"
      ],
      "returnType": "int",
      "exceptions": [],
      "name": "noteOpInternal(int,int,java.lang.String,java.lang.String,java.lang.String)"
    },
    "noteOpNoThrow(int,int,java.lang.String)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "op",
        "uid",
        "packageName"
      ],
      "returnType": "int",
      "exceptions": [],
      "name": "noteOpNoThrow(int,int,java.lang.String)"
    },
    "noteOpNoThrow(int,int,java.lang.String,java.lang.String,java.lang.String)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "op",
        "uid",
        "packageName",
        "attributionTag",
        "message"
      ],
      "returnType": "int",
      "exceptions": [],
      "minSdk": 30,
      "name": "noteOpNoThrow(int,int,java.lang.String,java.lang.String,java.lang.String)"
    },
    "noteProxyOpNoThrow(int,java.lang.String)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "op",
        "proxiedPackageName"
      ],
      "returnType": "int",
      "exceptions": [],
      "minSdk": 23,
      "maxSdk": 29,
      "name": "noteProxyOpNoThrow(int,java.lang.String)"
    },
    "noteProxyOpNoThrow(int,java.lang.String,int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "op",
        "proxiedPackageName",
        "proxiedUid"
      ],
      "returnType": "int",
      "exceptions": [],
      "minSdk": 29,
      "maxSdk": 29,
      "name": "noteProxyOpNoThrow(int,java.lang.String,int)"
    },
    "noteProxyOpNoThrow(int,java.lang.String,int,java.lang.String,java.lang.String)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "op",
        "proxiedPackageName",
        "proxiedUid",
        "proxiedAttributionTag",
        "message"
      ],
      "returnType": "int",
      "exceptions": [],
      "minSdk": 30,
      "maxSdk": 30,
      "name": "noteProxyOpNoThrow(int,java.lang.String,int,java.lang.String,java.lang.String)"
    },
    "noteProxyOpNoThrow(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "op",
        "attributionSource",
        "message",
        "ignoredSkipProxyOperation"
      ],
      "returnType": "int",
      "exceptions": [],
      "minSdk": 31,
      "name": "noteProxyOpNoThrow(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)"
    },
    "reset()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "reset()"
    },
    "setMode(int,int,java.lang.String,int)": {
      "isImplementation": true,
      "modifiers": [
        "public"
      ],
      "params": [
        "op",
        "uid",
        "packageName",
        "mode"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setMode(int,int,java.lang.String,int)",
      "documentation": "Int version of {@link #setMode(String, int, String, int)}.\n\n\u003cp\u003eThis method is public for testing {@link #checkOpNoThrow}. If {@link #checkOpNoThrow} is *\ncalled afterwards with the {@code op}, {@code ui}, and {@code packageName} provided, it will *\nreturn the {@code mode} set here.\n"
    },
    "setMode(java.lang.String,int,java.lang.String,int)": {
      "isImplementation": true,
      "modifiers": [
        "public"
      ],
      "params": [
        "op",
        "uid",
        "packageName",
        "mode"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 28,
      "name": "setMode(java.lang.String,int,java.lang.String,int)",
      "documentation": "Change the operating mode for the given op in the given app package. You must pass in both the\nuid and name of the application whose mode is being modified; if these do not match, the\nmodification will not be applied.\n\n\u003cp\u003eThis method is public for testing {@link #checkOpNoThrow}. If {@link #checkOpNoThrow} is\ncalled afterwards with the {@code op}, {@code ui}, and {@code packageName} provided, it will\nreturn the {@code mode} set here.\n\n@param op The operation to modify. One of the OPSTR_* constants.\n@param uid The user id of the application whose mode will be changed.\n@param packageName The name of the application package name whose mode will be changed.\n"
    },
    "setRestriction(int,int,int,java.lang.String[])": {
      "isImplementation": true,
      "modifiers": [
        "public"
      ],
      "params": [
        "code",
        "usage",
        "mode",
        "exceptionPackages"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 21,
      "name": "setRestriction(int,int,int,java.lang.String[])",
      "documentation": "Sets audio restrictions.\n\n\u003cp\u003eThis method is public for testing, as the original method is {@code @hide}.\n"
    },
    "startOp(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "op",
        "uid",
        "packageName",
        "attributionTag",
        "message"
      ],
      "returnType": "int",
      "exceptions": [],
      "minSdk": 30,
      "name": "startOp(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)",
      "documentation": "Stores a fake long-running operation. It does not throw if a wrong uid is passed. "
    },
    "startOpNoThrow(int,int,java.lang.String)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "op",
        "uid",
        "packageName"
      ],
      "returnType": "int",
      "exceptions": [],
      "maxSdk": 29,
      "name": "startOpNoThrow(int,int,java.lang.String)",
      "documentation": "Stores a fake long-running operation. It does not throw if a wrong uid is passed. "
    },
    "startOpNoThrow(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "op",
        "uid",
        "packageName",
        "attributionTag",
        "message"
      ],
      "returnType": "int",
      "exceptions": [],
      "minSdk": 30,
      "name": "startOpNoThrow(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)",
      "documentation": "Stores a fake long-running operation. It does not throw if a wrong uid is passed. "
    },
    "startWatchingMode(int,java.lang.String,android.app.AppOpsManager.OnOpChangedListener)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "op",
        "packageName",
        "callback"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "startWatchingMode(int,java.lang.String,android.app.AppOpsManager.OnOpChangedListener)"
    },
    "startWatchingMode(int,java.lang.String,int,android.app.AppOpsManager.OnOpChangedListener)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "op",
        "packageName",
        "flags",
        "callback"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 29,
      "name": "startWatchingMode(int,java.lang.String,int,android.app.AppOpsManager.OnOpChangedListener)"
    },
    "startWatchingModeImpl(int,java.lang.String,int,android.app.AppOpsManager.OnOpChangedListener)": {
      "isImplementation": false,
      "modifiers": [
        "private"
      ],
      "params": [
        "op",
        "packageName",
        "flags",
        "callback"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "startWatchingModeImpl(int,java.lang.String,int,android.app.AppOpsManager.OnOpChangedListener)"
    },
    "stopWatchingMode(android.app.AppOpsManager.OnOpChangedListener)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "callback"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "stopWatchingMode(android.app.AppOpsManager.OnOpChangedListener)"
    },
    "toOpEntry(java.lang.Integer,int)": {
      "isImplementation": false,
      "modifiers": [
        "protected"
      ],
      "params": [
        "op",
        "mode"
      ],
      "returnType": "android.app.AppOpsManager.OpEntry",
      "exceptions": [],
      "name": "toOpEntry(java.lang.Integer,int)"
    },
    "unsafeCheckOpNoThrow(java.lang.String,int,java.lang.String)": {
      "isImplementation": true,
      "modifiers": [
        "public"
      ],
      "params": [
        "op",
        "uid",
        "packageName"
      ],
      "returnType": "int",
      "exceptions": [],
      "minSdk": 29,
      "name": "unsafeCheckOpNoThrow(java.lang.String,int,java.lang.String)"
    },
    "unsafeCheckOpRawNoThrow(int,int,java.lang.String)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "op",
        "uid",
        "packageName"
      ],
      "returnType": "int",
      "exceptions": [],
      "minSdk": 30,
      "name": "unsafeCheckOpRawNoThrow(int,int,java.lang.String)"
    },
    "unsafeCheckOpRawNoThrow(java.lang.String,int,java.lang.String)": {
      "isImplementation": true,
      "modifiers": [
        "public"
      ],
      "params": [
        "op",
        "uid",
        "packageName"
      ],
      "returnType": "int",
      "exceptions": [],
      "minSdk": 29,
      "name": "unsafeCheckOpRawNoThrow(java.lang.String,int,java.lang.String)",
      "documentation": "Like {@link #unsafeCheckOpNoThrow(String, int, String)} but returns the \u003cem\u003eraw\u003c/em\u003e mode\nassociated with the op. Does not throw a security exception, does not translate {@link\nAppOpsManager#MODE_FOREGROUND}.\n"
    }
  },
  "imports": [
    "android.os.Build.VERSION_CODES.LOLLIPOP",
    "android.os.Build.VERSION_CODES.M",
    "android.os.Build.VERSION_CODES.P",
    "android.os.Build.VERSION_CODES.Q",
    "android.os.Build.VERSION_CODES.R",
    "android.os.Build.VERSION_CODES.S",
    "android.os.Build.VERSION_CODES.TIRAMISU",
    "java.util.stream.Collectors.toSet",
    "org.robolectric.shadow.api.Shadow.invokeConstructor",
    "org.robolectric.util.reflector.Reflector.reflector",
    "android.annotation.NonNull",
    "android.annotation.Nullable",
    "android.annotation.RequiresApi",
    "android.annotation.RequiresPermission",
    "android.annotation.SystemApi",
    "android.app.AppOpsManager",
    "android.app.AppOpsManager.AttributedOpEntry",
    "android.app.AppOpsManager.NoteOpEvent",
    "android.app.AppOpsManager.OnOpChangedListener",
    "android.app.AppOpsManager.OpEntry",
    "android.app.AppOpsManager.OpEventProxyInfo",
    "android.app.AppOpsManager.PackageOps",
    "android.app.SyncNotedAppOp",
    "android.content.AttributionSource",
    "android.content.Context",
    "android.content.pm.PackageManager.NameNotFoundException",
    "android.media.AudioAttributes.AttributeUsage",
    "android.os.Binder",
    "android.os.Build",
    "android.util.ArrayMap",
    "android.util.LongSparseArray",
    "android.util.LongSparseLongArray",
    "com.android.internal.app.IAppOpsService",
    "com.google.auto.value.AutoValue",
    "com.google.common.base.Preconditions",
    "com.google.common.collect.HashMultimap",
    "com.google.common.collect.ImmutableList",
    "com.google.common.collect.Multimap",
    "com.google.common.collect.MultimapBuilder",
    "java.util.ArrayList",
    "java.util.Arrays",
    "java.util.Collection",
    "java.util.Collections",
    "java.util.HashMap",
    "java.util.HashSet",
    "java.util.List",
    "java.util.Map",
    "java.util.Objects",
    "java.util.Set",
    "java.util.stream.IntStream",
    "org.robolectric.RuntimeEnvironment",
    "org.robolectric.annotation.HiddenApi",
    "org.robolectric.annotation.Implementation",
    "org.robolectric.annotation.Implements",
    "org.robolectric.annotation.RealObject",
    "org.robolectric.annotation.Resetter",
    "org.robolectric.shadow.api.Shadow",
    "org.robolectric.util.ReflectionHelpers",
    "org.robolectric.util.ReflectionHelpers.ClassParameter",
    "org.robolectric.util.reflector.Accessor",
    "org.robolectric.util.reflector.ForType",
    "org.robolectric.shadows.ShadowAppOpsManager.Key",
    "org.robolectric.shadows.ShadowAppOpsManager.ModeAndException",
    "org.robolectric.shadows.ShadowAppOpsManager.AppOpInfoReflector"
  ],
  "name": "org.robolectric.shadows.ShadowAppOpsManager",
  "documentation": "Shadow for {@link AppOpsManager}. "
}