{
  "methods": {
    "addCamera(java.lang.String,android.hardware.camera2.CameraCharacteristics)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "cameraId",
        "characteristics"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "addCamera(java.lang.String,android.hardware.camera2.CameraCharacteristics)",
      "documentation": "Adds the given cameraId and characteristics to this shadow.\n\n\u003cp\u003eThe result from {@link #getCameraIdList()} will be in the order in which cameras were added.\n\n@throws IllegalArgumentException if there\u0027s already an existing camera with the given id.\n"
    },
    "getCameraCharacteristics(java.lang.String)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "cameraId"
      ],
      "returnType": "android.hardware.camera2.CameraCharacteristics",
      "exceptions": [],
      "name": "getCameraCharacteristics(java.lang.String)"
    },
    "getCameraIdList()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "java.lang.String[]",
      "exceptions": [
        "android.hardware.camera2.CameraAccessException"
      ],
      "name": "getCameraIdList()"
    },
    "getTorchMode(java.lang.String)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "cameraId"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "name": "getTorchMode(java.lang.String)",
      "documentation": "Returns what the supplied camera\u0027s torch is set to. "
    },
    "openCameraDeviceUserAsync(java.lang.String,android.hardware.camera2.CameraDevice.StateCallback,android.os.Handler)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "cameraId",
        "callback",
        "handler"
      ],
      "returnType": "android.hardware.camera2.CameraDevice",
      "exceptions": [
        "android.hardware.camera2.CameraAccessException"
      ],
      "minSdk": 21,
      "maxSdk": 24,
      "name": "openCameraDeviceUserAsync(java.lang.String,android.hardware.camera2.CameraDevice.StateCallback,android.os.Handler)",
      "documentation": "Enables {@link CameraManager#openCamera(String, StateCallback, Handler)} to open a\n{@link CameraDevice}.\n\n\u003cp\u003eIf the provided cameraId exists, this will always post\n{@link CameraDevice.StateCallback#onOpened(CameraDevice) to the provided {@link Handler}.\nUnlike on real Android, this will not check if the camera has been disabled by device policy\nand does not attempt to connect to the camera service, so\n{@link CameraDevice.StateCallback#onError(CameraDevice, int)} and\n{@link CameraDevice.StateCallback#onDisconnected(CameraDevice)} will not be triggered by\n{@link CameraManager#openCamera(String, StateCallback, Handler)}.\n"
    },
    "openCameraDeviceUserAsync(java.lang.String,android.hardware.camera2.CameraDevice.StateCallback,android.os.Handler,int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "cameraId",
        "callback",
        "handler",
        "uid"
      ],
      "returnType": "android.hardware.camera2.CameraDevice",
      "exceptions": [
        "android.hardware.camera2.CameraAccessException"
      ],
      "minSdk": 25,
      "maxSdk": 27,
      "name": "openCameraDeviceUserAsync(java.lang.String,android.hardware.camera2.CameraDevice.StateCallback,android.os.Handler,int)"
    },
    "openCameraDeviceUserAsync(java.lang.String,android.hardware.camera2.CameraDevice.StateCallback,java.util.concurrent.Executor,int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "cameraId",
        "callback",
        "executor",
        "uid"
      ],
      "returnType": "android.hardware.camera2.CameraDevice",
      "exceptions": [
        "android.hardware.camera2.CameraAccessException"
      ],
      "minSdk": 28,
      "maxSdk": 30,
      "name": "openCameraDeviceUserAsync(java.lang.String,android.hardware.camera2.CameraDevice.StateCallback,java.util.concurrent.Executor,int)"
    },
    "openCameraDeviceUserAsync(java.lang.String,android.hardware.camera2.CameraDevice.StateCallback,java.util.concurrent.Executor,int,int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "cameraId",
        "callback",
        "executor",
        "unusedClientUid",
        "unusedOomScoreOffset"
      ],
      "returnType": "android.hardware.camera2.CameraDevice",
      "exceptions": [],
      "minSdk": 31,
      "maxSdk": 33,
      "name": "openCameraDeviceUserAsync(java.lang.String,android.hardware.camera2.CameraDevice.StateCallback,java.util.concurrent.Executor,int,int)"
    },
    "openCameraDeviceUserAsync(java.lang.String,android.hardware.camera2.CameraDevice.StateCallback,java.util.concurrent.Executor,int,int,boolean)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "cameraId",
        "callback",
        "executor",
        "uid",
        "oomScoreOffset",
        "overrideToPortrait"
      ],
      "returnType": "android.hardware.camera2.CameraDevice",
      "exceptions": [],
      "minSdk": 34,
      "name": "openCameraDeviceUserAsync(java.lang.String,android.hardware.camera2.CameraDevice.StateCallback,java.util.concurrent.Executor,int,int,boolean)"
    },
    "registerAvailabilityCallback(android.hardware.camera2.CameraManager.AvailabilityCallback,android.os.Handler)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "callback",
        "handler"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 21,
      "name": "registerAvailabilityCallback(android.hardware.camera2.CameraManager.AvailabilityCallback,android.os.Handler)"
    },
    "removeCamera(java.lang.String)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "cameraId"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "removeCamera(java.lang.String)",
      "documentation": "Removes the given cameraId and associated characteristics from this shadow.\n\n@throws IllegalArgumentException if there is not an existing camera with the given id.\n"
    },
    "reset()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "reset()"
    },
    "setTorchMode(java.lang.String,boolean)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "cameraId",
        "enabled"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 23,
      "name": "setTorchMode(java.lang.String,boolean)"
    },
    "triggerDisconnect()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "triggerDisconnect()",
      "documentation": "Triggers a disconnect event, where any open camera will be disconnected (simulating the case\nwhere another app takes control of the camera).\n"
    },
    "triggerOnCameraAvailable(java.lang.String)": {
      "isImplementation": false,
      "modifiers": [
        "private"
      ],
      "params": [
        "cameraId"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "triggerOnCameraAvailable(java.lang.String)",
      "documentation": "Calls all registered callbacks\u0027s onCameraAvailable method. This is a no-op if no callbacks are\nregistered.\n"
    },
    "triggerOnCameraUnavailable(java.lang.String)": {
      "isImplementation": false,
      "modifiers": [
        "private"
      ],
      "params": [
        "cameraId"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "triggerOnCameraUnavailable(java.lang.String)",
      "documentation": "Calls all registered callbacks\u0027s onCameraUnavailable method. This is a no-op if no callbacks\nare registered.\n"
    },
    "unregisterAvailabilityCallback(android.hardware.camera2.CameraManager.AvailabilityCallback)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "callback"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 21,
      "name": "unregisterAvailabilityCallback(android.hardware.camera2.CameraManager.AvailabilityCallback)"
    },
    "updateCameraCallback(android.hardware.camera2.CameraDevice,android.hardware.camera2.CameraDevice.StateCallback,android.os.Handler,java.util.concurrent.Executor)": {
      "isImplementation": false,
      "modifiers": [
        "protected"
      ],
      "params": [
        "device",
        "callback",
        "handler",
        "executor"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "updateCameraCallback(android.hardware.camera2.CameraDevice,android.hardware.camera2.CameraDevice.StateCallback,android.os.Handler,java.util.concurrent.Executor)"
    }
  },
  "imports": [
    "org.robolectric.util.reflector.Reflector.reflector",
    "android.annotation.NonNull",
    "android.content.Context",
    "android.hardware.camera2.CameraAccessException",
    "android.hardware.camera2.CameraCharacteristics",
    "android.hardware.camera2.CameraDevice",
    "android.hardware.camera2.CameraDevice.StateCallback",
    "android.hardware.camera2.CameraManager",
    "android.hardware.camera2.impl.CameraDeviceImpl",
    "android.os.Build",
    "android.os.Build.VERSION_CODES",
    "android.os.Handler",
    "com.google.common.base.Preconditions",
    "java.util.Collections",
    "java.util.HashMap",
    "java.util.HashSet",
    "java.util.LinkedHashMap",
    "java.util.Map",
    "java.util.Set",
    "java.util.WeakHashMap",
    "java.util.concurrent.Executor",
    "javax.annotation.Nullable",
    "org.robolectric.RuntimeEnvironment",
    "org.robolectric.annotation.Implementation",
    "org.robolectric.annotation.Implements",
    "org.robolectric.annotation.RealObject",
    "org.robolectric.annotation.Resetter",
    "org.robolectric.util.ReflectionHelpers",
    "org.robolectric.util.ReflectionHelpers.ClassParameter",
    "org.robolectric.util.reflector.Accessor",
    "org.robolectric.util.reflector.ForType",
    "org.robolectric.versioning.AndroidVersions.U",
    "org.robolectric.shadows.ShadowCameraManager.ReflectorCameraManager",
    "org.robolectric.shadows.ShadowCameraManager.ShadowCameraManagerGlobal"
  ],
  "name": "org.robolectric.shadows.ShadowCameraManager",
  "documentation": "Shadow class for {@link CameraManager} "
}