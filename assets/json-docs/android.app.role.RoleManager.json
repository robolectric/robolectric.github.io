{
  "methods": {
    "__constructor__(android.content.Context)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "context"
      ],
      "returnType": "void",
      "exceptions": [],
      "maxSdk": 30,
      "name": "__constructor__(android.content.Context)"
    },
    "__constructor__(android.content.Context,android.app.role.IRoleManager)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "context",
        "service"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 31,
      "name": "__constructor__(android.content.Context,android.app.role.IRoleManager)"
    },
    "addAvailableRole(java.lang.String)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "roleName"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "addAvailableRole(java.lang.String)",
      "documentation": "Add a role that will be recognized as available when invoking {@link\nRoleManager#isRoleAvailable(String)}.\n"
    },
    "addHeldRole(java.lang.String)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "roleName"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "addHeldRole(java.lang.String)",
      "documentation": "Add a role that would be held by the calling app when invoking {@link\nRoleManager#isRoleHeld(String)}.\n\n\u003cp\u003eThis method makes the role available as well.\n"
    },
    "getDefaultApplication(java.lang.String)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "roleName"
      ],
      "returnType": "java.lang.String",
      "exceptions": [],
      "minSdk": 34,
      "name": "getDefaultApplication(java.lang.String)"
    },
    "isRoleAvailable(java.lang.String)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "roleName"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "name": "isRoleAvailable(java.lang.String)",
      "documentation": "Check whether a particular role is available on the device.\n\n\u003cp\u003eIdeally available roles would be autodetected based on the state of other services or\nfeatures present, but for now callers can add available roles via {@link\n#addAvailableRole(String)}.\n\n@param roleName the name of the role to check for\n@return whether the role is available\n"
    },
    "isRoleHeld(java.lang.String)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "roleName"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "name": "isRoleHeld(java.lang.String)",
      "documentation": "Check whether the calling application is holding a particular role.\n\n\u003cp\u003eCallers can add held roles via {@link #addHeldRole(String)}\n\n@param roleName the name of the role to check for\n@return whether the calling application is holding the role\n"
    },
    "removeAvailableRole(java.lang.String)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "roleName"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "removeAvailableRole(java.lang.String)"
    },
    "removeHeldRole(java.lang.String)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "roleName"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "removeHeldRole(java.lang.String)"
    },
    "reset()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "reset()"
    },
    "setDefaultApplication(java.lang.String,java.lang.String,int,java.util.concurrent.Executor,java.util.function.Consumer\u003cjava.lang.Boolean\u003e)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "roleName",
        "packageName",
        "flags",
        "executor",
        "callback"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 34,
      "name": "setDefaultApplication(java.lang.String,java.lang.String,int,java.util.concurrent.Executor,java.util.function.Consumer\u003cjava.lang.Boolean\u003e)"
    }
  },
  "imports": [
    "org.robolectric.shadow.api.Shadow.invokeConstructor",
    "org.robolectric.util.ReflectionHelpers.ClassParameter.from",
    "android.annotation.NonNull",
    "android.annotation.Nullable",
    "android.app.role.IRoleManager",
    "android.app.role.RoleManager",
    "android.content.Context",
    "android.content.pm.PackageManager",
    "android.os.Build",
    "com.android.internal.util.Preconditions",
    "java.util.Arrays",
    "java.util.HashMap",
    "java.util.Map",
    "java.util.concurrent.Executor",
    "java.util.function.Consumer",
    "org.robolectric.annotation.Implementation",
    "org.robolectric.annotation.Implements",
    "org.robolectric.annotation.RealObject",
    "org.robolectric.annotation.Resetter"
  ],
  "name": "org.robolectric.shadows.ShadowRoleManager",
  "documentation": "A shadow implementation of {@link android.app.role.RoleManager}. "
}