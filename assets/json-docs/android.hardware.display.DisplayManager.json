{
  "methods": {
    "__constructor__(android.content.Context)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "context"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "__constructor__(android.content.Context)"
    },
    "addDisplay(java.lang.String)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "qualifiersStr"
      ],
      "returnType": "int",
      "exceptions": [],
      "name": "addDisplay(java.lang.String)",
      "documentation": "Adds a simulated display and drain the main looper queue to ensure all the callbacks are\nprocessed.\n\n@param qualifiersStr the {@link Qualifiers} string representing characteristics of the new\n    display.\n@return the new display\u0027s ID\n"
    },
    "changeDisplay(int,java.lang.String)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "displayId",
        "qualifiersStr"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "changeDisplay(int,java.lang.String)",
      "documentation": "Changes properties of a simulated display. If {@param qualifiersStr} starts with a plus (\u0027+\u0027)\nsign, the display\u0027s previous configuration is modified with the given qualifiers; otherwise\ndefaults are applied as described \u003ca\nhref\u003d\"http://robolectric.org/device-configuration/\"\u003ehere\u003c/a\u003e.\n\n\u003cp\u003eIdles the main looper to ensure all listeners are notified.\n\n@param displayId the display id to change\n@param qualifiersStr the {@link Qualifiers} string representing characteristics of the new\n    display\n"
    },
    "changeDisplay(int,org.robolectric.util.Consumer\u003corg.robolectric.android.internal.DisplayConfig\u003e)": {
      "isImplementation": false,
      "modifiers": [
        "static"
      ],
      "params": [
        "displayId",
        "consumer"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "changeDisplay(int,org.robolectric.util.Consumer\u003corg.robolectric.android.internal.DisplayConfig\u003e)",
      "documentation": "Changes properties of a simulated display. The original properties will be passed to the\n{@param consumer}, which may modify them in place. The display will be updated with the new\nproperties.\n\n@param displayId the display id to change\n@param consumer a function which modifies the display properties\n"
    },
    "configureDefaultDisplay(android.content.res.Configuration,android.util.DisplayMetrics)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "configuration",
        "displayMetrics"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "configureDefaultDisplay(android.content.res.Configuration,android.util.DisplayMetrics)",
      "documentation": "internal only "
    },
    "createDisplayInfo(android.content.res.Configuration,android.util.DisplayMetrics,boolean)": {
      "isImplementation": false,
      "modifiers": [
        "private",
        "static"
      ],
      "params": [
        "configuration",
        "displayMetrics",
        "isNaturallyPortrait"
      ],
      "returnType": "android.view.DisplayInfo",
      "exceptions": [],
      "name": "createDisplayInfo(android.content.res.Configuration,android.util.DisplayMetrics,boolean)"
    },
    "createDisplayInfo(java.lang.String,java.lang.Integer)": {
      "isImplementation": false,
      "modifiers": [
        "private",
        "static"
      ],
      "params": [
        "qualifiersStr",
        "displayId"
      ],
      "returnType": "android.view.DisplayInfo",
      "exceptions": [],
      "name": "createDisplayInfo(java.lang.String,java.lang.Integer)"
    },
    "displayModeOf(int,int,int,float)": {
      "isImplementation": false,
      "modifiers": [
        "static"
      ],
      "params": [
        "modeId",
        "width",
        "height",
        "refreshRate"
      ],
      "returnType": "android.view.Display.Mode",
      "exceptions": [],
      "name": "displayModeOf(int,int,int,float)"
    },
    "fixNominalDimens(android.view.DisplayInfo)": {
      "isImplementation": false,
      "modifiers": [
        "private",
        "static"
      ],
      "params": [
        "displayInfo"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "fixNominalDimens(android.view.DisplayInfo)"
    },
    "getSaturationLevel()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "float",
      "exceptions": [],
      "name": "getSaturationLevel()",
      "documentation": "Returns the current display saturation level set via {@link\nandroid.hardware.display.DisplayManager#setSaturationLevel(float)}.\n"
    },
    "getShadowDisplayManagerGlobal()": {
      "isImplementation": false,
      "modifiers": [
        "private",
        "static"
      ],
      "params": [],
      "returnType": "org.robolectric.shadows.ShadowDisplayManagerGlobal",
      "exceptions": [],
      "name": "getShadowDisplayManagerGlobal()"
    },
    "isRotated(int)": {
      "isImplementation": false,
      "modifiers": [
        "private",
        "static"
      ],
      "params": [
        "rotation"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "name": "isRotated(int)"
    },
    "removeDisplay(int)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "displayId"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "removeDisplay(int)",
      "documentation": "Removes a simulated display and idles the main looper to ensure all listeners are notified.\n\n@param displayId the display id to remove\n"
    },
    "reset()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "reset()"
    },
    "setBrightnessConfiguration(java.lang.Object)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "config"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 28,
      "name": "setBrightnessConfiguration(java.lang.Object)"
    },
    "setBrightnessConfigurationForUser(java.lang.Object,java.lang.Object,java.lang.Object)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "config",
        "userId",
        "packageName"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 28,
      "name": "setBrightnessConfigurationForUser(java.lang.Object,java.lang.Object,java.lang.Object)"
    },
    "setBrightnessEvents(java.util.List\u003candroid.hardware.display.BrightnessChangeEvent\u003e)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "events"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setBrightnessEvents(java.util.List\u003candroid.hardware.display.BrightnessChangeEvent\u003e)",
      "documentation": "Set the slider events the system has seen. "
    },
    "setDefaultBrightnessConfiguration(java.lang.Object)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "config"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setDefaultBrightnessConfiguration(java.lang.Object)",
      "documentation": "Set the default brightness configuration for this device. "
    },
    "setNaturallyPortrait(int,boolean)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "displayId",
        "isNaturallyPortrait"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setNaturallyPortrait(int,boolean)",
      "documentation": "Changes the display to be naturally portrait or landscape. This will ensure that the rotation\nis configured consistently with orientation when the orientation is configured by {@link\n#changeDisplay}, e.g. if the display is naturally portrait and the orientation is configured as\nlandscape the rotation will be set to {@link Surface#ROTATION_90}.\n"
    },
    "setSaturationLevel(float)": {
      "isImplementation": true,
      "modifiers": [
        "public"
      ],
      "params": [
        "level"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 28,
      "name": "setSaturationLevel(float)",
      "documentation": "Sets the current display saturation level.\n\n\u003cp\u003eThis is a workaround for tests which cannot use the relevant hidden {@link\nandroid.annotation.SystemApi}, {@link\nandroid.hardware.display.DisplayManager#setSaturationLevel(float)}.\n"
    },
    "setSupportedModes(int,android.view.Display.Mode...)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "displayId",
        "supportedModes"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setSupportedModes(int,android.view.Display.Mode...)",
      "documentation": "Sets supported modes to the specified display with ID {@code displayId}.\n\n\u003cp\u003eIdles the main looper to ensure all listeners are notified.\n\n@param displayId the display id to change\n@param supportedModes the display\u0027s supported modes\n"
    }
  },
  "imports": [
    "android.content.res.Configuration.ORIENTATION_LANDSCAPE",
    "android.content.res.Configuration.ORIENTATION_PORTRAIT",
    "android.os.Build.VERSION_CODES.JELLY_BEAN_MR1",
    "android.os.Build.VERSION_CODES.P",
    "java.util.Objects.requireNonNull",
    "org.robolectric.shadow.api.Shadow.extract",
    "org.robolectric.shadow.api.Shadow.invokeConstructor",
    "org.robolectric.shadows.ShadowLooper.shadowMainLooper",
    "org.robolectric.util.reflector.Reflector.reflector",
    "android.content.Context",
    "android.content.res.Configuration",
    "android.hardware.display.BrightnessChangeEvent",
    "android.hardware.display.DisplayManager",
    "android.hardware.display.DisplayManagerGlobal",
    "android.os.Build",
    "android.util.DisplayMetrics",
    "android.view.Display",
    "android.view.DisplayInfo",
    "android.view.Surface",
    "androidx.annotation.Nullable",
    "androidx.annotation.RequiresApi",
    "com.google.auto.value.AutoBuilder",
    "java.util.HashMap",
    "java.util.List",
    "org.robolectric.RuntimeEnvironment",
    "org.robolectric.android.Bootstrap",
    "org.robolectric.android.internal.DisplayConfig",
    "org.robolectric.annotation.HiddenApi",
    "org.robolectric.annotation.Implementation",
    "org.robolectric.annotation.Implements",
    "org.robolectric.annotation.RealObject",
    "org.robolectric.annotation.Resetter",
    "org.robolectric.res.Qualifiers",
    "org.robolectric.util.Consumer",
    "org.robolectric.util.ReflectionHelpers.ClassParameter",
    "org.robolectric.util.reflector.Direct",
    "org.robolectric.util.reflector.ForType",
    "org.robolectric.shadows.ShadowDisplayManager.ModeBuilder",
    "org.robolectric.shadows.ShadowDisplayManager.DisplayManagerReflector"
  ],
  "name": "org.robolectric.shadows.ShadowDisplayManager",
  "documentation": "For tests, display properties may be changed and devices may be added or removed\nprogrammatically.\n"
}