{
  "methods": {
    "clearBroadcastIntents()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "clearBroadcastIntents()",
      "documentation": "Clears the broadcast intents sent during the tests (for all users). "
    },
    "clearNextStartedActivities()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "clearNextStartedActivities()",
      "documentation": "Clears all {@code Intent}s started by {@link\nContextWrapper#startActivity(android.content.Intent)}.\n"
    },
    "clearStartedServices()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "clearStartedServices()",
      "documentation": "Clears all {@code Intent} started by\n{@link android.content.Context#startService(android.content.Intent)}.\n"
    },
    "denyPermissions(int,int,java.lang.String...)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "pid",
        "uid",
        "permissions"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "denyPermissions(int,int,java.lang.String...)",
      "documentation": "Revoke the given permissions for the given process and user. "
    },
    "denyPermissions(java.lang.String...)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "permissionNames"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "denyPermissions(java.lang.String...)",
      "documentation": "Revoke the given permissions for the current process and user.\n\nHas no effect if permissions were not previously granted.\n"
    },
    "getBroadcastIntents()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "java.util.List\u003candroid.content.Intent\u003e",
      "exceptions": [],
      "name": "getBroadcastIntents()",
      "documentation": "Returns the broadcast intents sent during the tests (for all users). "
    },
    "getBroadcastIntentsForUser(android.os.UserHandle)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "userHandle"
      ],
      "returnType": "java.util.List\u003candroid.content.Intent\u003e",
      "exceptions": [],
      "name": "getBroadcastIntentsForUser(android.os.UserHandle)",
      "documentation": "Returns the broadcast intents sent to the given user. "
    },
    "getNextStartedActivity()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "android.content.Intent",
      "exceptions": [],
      "name": "getNextStartedActivity()",
      "documentation": "Consumes the most recent {@code Intent} started by {@link\nContextWrapper#startActivity(android.content.Intent)} and returns it.\n\n@return the most recently started {@code Intent}\n"
    },
    "getNextStartedActivityForResult()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "org.robolectric.shadows.ShadowActivity.IntentForResult",
      "exceptions": [],
      "name": "getNextStartedActivityForResult()",
      "documentation": "Consumes the most recent {@code IntentForResult} started by {@link *\nContextWrapper#startActivity(android.content.Intent, android.os.Bundle)} and returns it.\n\n@return the most recently started {@code IntentForResult}\n"
    },
    "getNextStartedService()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "android.content.Intent",
      "exceptions": [],
      "name": "getNextStartedService()",
      "documentation": "Consumes the most recent {@code Intent} started by {@link\nandroid.content.Context#startService(android.content.Intent)} and returns it.\n\n@return the most recently started {@code Intent}\n"
    },
    "getNextStoppedService()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "android.content.Intent",
      "exceptions": [],
      "name": "getNextStoppedService()",
      "documentation": "Consumes the {@code Intent} requested to stop a service by\n{@link android.content.Context#stopService(android.content.Intent)}\nfrom the bottom of the stack of stop requests.\n"
    },
    "getShadowInstrumentation()": {
      "isImplementation": false,
      "modifiers": [],
      "params": [],
      "returnType": "org.robolectric.shadows.ShadowInstrumentation",
      "exceptions": [],
      "name": "getShadowInstrumentation()"
    },
    "grantPermissions(int,int,java.lang.String...)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "pid",
        "uid",
        "permissions"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "grantPermissions(int,int,java.lang.String...)",
      "documentation": "Grant the given permissions for the given process and user. "
    },
    "grantPermissions(java.lang.String...)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "permissionNames"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "grantPermissions(java.lang.String...)",
      "documentation": "Grant the given permissions for the current process and user. "
    },
    "peekNextStartedActivity()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "android.content.Intent",
      "exceptions": [],
      "name": "peekNextStartedActivity()",
      "documentation": "Returns the most recent {@code Intent} started by {@link\nContextWrapper#startActivity(android.content.Intent)} without consuming it.\n\n@return the most recently started {@code Intent}\n"
    },
    "peekNextStartedActivityForResult()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "org.robolectric.shadows.ShadowActivity.IntentForResult",
      "exceptions": [],
      "name": "peekNextStartedActivityForResult()",
      "documentation": "Returns the most recent {@code IntentForResult} started by {@link\nContextWrapper#startActivity(android.content.Intent, android.os.Bundle)} without consuming it.\n\n@return the most recently started {@code IntentForResult}\n"
    },
    "peekNextStartedService()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "android.content.Intent",
      "exceptions": [],
      "name": "peekNextStartedService()",
      "documentation": "Returns the most recent {@code Intent} started by\n{@link android.content.Context#startService(android.content.Intent)} without consuming it.\n\n@return the most recently started {@code Intent}\n"
    },
    "removeSystemService(java.lang.String)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "name"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "removeSystemService(java.lang.String)",
      "documentation": "Makes {@link Context#getSystemService(String)} return {@code null} for the given system service\nname, mimicking a device that doesn\u0027t have that system service.\n"
    }
  },
  "imports": [
    "android.app.ActivityThread",
    "android.content.Context",
    "android.content.ContextWrapper",
    "android.content.Intent",
    "android.os.UserHandle",
    "java.util.List",
    "org.robolectric.RuntimeEnvironment",
    "org.robolectric.annotation.Implements",
    "org.robolectric.annotation.RealObject",
    "org.robolectric.shadow.api.Shadow",
    "org.robolectric.shadows.ShadowActivity.IntentForResult"
  ],
  "name": "org.robolectric.shadows.ShadowContextWrapper"
}