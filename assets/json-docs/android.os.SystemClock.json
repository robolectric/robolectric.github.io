{
  "methods": {
    "advanceBy(java.time.Duration)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "duration"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "advanceBy(java.time.Duration)",
      "documentation": "A convenience method for advancing the clock via {@link SystemClock#setCurrentTimeMillis(long)}\n\n@param duration The interval by which to advance.\n"
    },
    "currentGnssTimeClock()": {
      "isImplementation": true,
      "modifiers": [
        "protected",
        "static"
      ],
      "params": [],
      "returnType": "java.lang.Object",
      "exceptions": [],
      "minSdk": 29,
      "name": "currentGnssTimeClock()"
    },
    "currentTimeMillis()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [],
      "returnType": "long",
      "exceptions": [],
      "name": "currentTimeMillis()",
      "documentation": "Implements {@link System#currentTimeMillis} through ShadowWrangler.\n\n@return Current time in millis.\n"
    },
    "nanoTime()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [],
      "returnType": "long",
      "exceptions": [],
      "name": "nanoTime()",
      "documentation": "Implements {@link System#nanoTime}.\n\n@return Current time with nanos.\n@deprecated Don\u0027t call this method directly; instead, use {@link System#nanoTime()}.\n"
    },
    "reset()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "reset()"
    },
    "setGnssTimeAvailable(boolean)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "available"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setGnssTimeAvailable(boolean)",
      "documentation": "Sets whether gnss location based time is available. "
    },
    "setNanoTime(long)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "nanoTime"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setNanoTime(long)",
      "documentation": "Sets the value for {@link System#nanoTime()}.\n\n\u003cp\u003eMay only be used for {@link LooperMode.Mode#LEGACY}. For {@link LooperMode.Mode#PAUSED},\n{@param nanoTime} is calculated based on {@link SystemClock#uptimeMillis()} and can\u0027t be set\nexplicitly.\n"
    },
    "setNetworkTimeAvailable(boolean)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "available"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setNetworkTimeAvailable(boolean)",
      "documentation": "Sets whether network time is available. "
    }
  },
  "imports": [
    "android.os.Build.VERSION_CODES.Q",
    "java.time.ZoneOffset.UTC",
    "org.robolectric.shadows.ShadowLooper.assertLooperMode",
    "android.os.SimpleClock",
    "android.os.SystemClock",
    "java.time.DateTimeException",
    "java.time.Duration",
    "org.robolectric.annotation.Implementation",
    "org.robolectric.annotation.Implements",
    "org.robolectric.annotation.LooperMode",
    "org.robolectric.annotation.LooperMode.Mode",
    "org.robolectric.shadows.ShadowSystemClock.Picker"
  ],
  "name": "org.robolectric.shadows.ShadowSystemClock",
  "documentation": "The shadow API for {@link SystemClock}.\n\nThe behavior of SystemClock in Robolectric will differ based on the current {@link\nLooperMode}. See {@link ShadowLegacySystemClock} and {@link ShadowPausedSystemClock} for more\ndetails.\n"
}