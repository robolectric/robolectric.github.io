{
  "methods": {
    "createParcelFileDescriptorFromBitmap(android.graphics.Bitmap,java.lang.String)": {
      "isImplementation": false,
      "modifiers": [
        "private",
        "static"
      ],
      "params": [
        "image",
        "fileName"
      ],
      "returnType": "android.os.ParcelFileDescriptor",
      "exceptions": [],
      "name": "createParcelFileDescriptorFromBitmap(android.graphics.Bitmap,java.lang.String)",
      "documentation": "Returns an open, readable file descriptor to the given {@code image} or {@code null} if there\nis an {@link IOException}.\n"
    },
    "enforceWallpaperComponentPermission()": {
      "isImplementation": false,
      "modifiers": [
        "private",
        "static"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "enforceWallpaperComponentPermission()",
      "documentation": "Throws {@link SecurityException} if the caller doesn\u0027t have {@link\npermission.SET_WALLPAPER_COMPONENT}.\n"
    },
    "getAllWallpaperDimAmounts()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "java.util.List\u003cjava.lang.Float\u003e",
      "exceptions": [],
      "name": "getAllWallpaperDimAmounts()",
      "documentation": "Returns a list of all dim amounts set from calls to setWallpaperDimAmount. This can be used to\nverify that repeated calls to setWallpaperDimAmount are not done which can cause issues.\n"
    },
    "getBitmap(int)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "which"
      ],
      "returnType": "android.graphics.Bitmap",
      "exceptions": [],
      "name": "getBitmap(int)",
      "documentation": "Returns the memory cached {@link Bitmap} associated with {@code which}.\n\n@param which either {@link WallpaperManager#FLAG_LOCK} or {WallpaperManager#FLAG_SYSTEM}.\n@return The memory cached {@link Bitmap} associated with {@code which}. {@code null} if no\n    bitmap was set.\n"
    },
    "getWallpaperCommandRecords()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "java.util.List\u003corg.robolectric.shadows.ShadowWallpaperManager.WallpaperCommandRecord\u003e",
      "exceptions": [],
      "name": "getWallpaperCommandRecords()",
      "documentation": "Returns all the invocation records to {@link WallpaperManager#sendWallpaperCommand} "
    },
    "getWallpaperDimAmount()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "float",
      "exceptions": [],
      "minSdk": 33,
      "name": "getWallpaperDimAmount()"
    },
    "getWallpaperFile(int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "which"
      ],
      "returnType": "android.os.ParcelFileDescriptor",
      "exceptions": [],
      "minSdk": 24,
      "name": "getWallpaperFile(int)",
      "documentation": "Gets a wallpaper file associated with {@code which}.\n\n@param which either {@link WallpaperManager#FLAG_LOCK} or {WallpaperManager#FLAG_SYSTEM}\n@return An open, readable file descriptor to the requested wallpaper image file; {@code null}\n    if no such wallpaper is configured.\n"
    },
    "getWallpaperInfo()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "android.app.WallpaperInfo",
      "exceptions": [],
      "name": "getWallpaperInfo()",
      "documentation": "Returns the information about the wallpaper if the current wallpaper is a live wallpaper\ncomponent. Otherwise, if the wallpaper is a static image, this returns null.\n"
    },
    "hasResourceWallpaper(int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "resid"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "name": "hasResourceWallpaper(int)",
      "documentation": "Returns whether the current wallpaper has been set through {@link #setResource(int)} or {@link\n#setResource(int, int)} with the same resource id.\n"
    },
    "isSetWallpaperAllowed()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "minSdk": 24,
      "name": "isSetWallpaperAllowed()"
    },
    "isWallpaperSupported()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "minSdk": 23,
      "name": "isWallpaperSupported()"
    },
    "sendWallpaperCommand(android.os.IBinder,java.lang.String,int,int,int,android.os.Bundle)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "windowToken",
        "action",
        "x",
        "y",
        "z",
        "extras"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "sendWallpaperCommand(android.os.IBinder,java.lang.String,int,int,int,android.os.Bundle)"
    },
    "setBitmap(android.graphics.Bitmap,android.graphics.Rect,boolean,int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "fullImage",
        "visibleCropHint",
        "allowBackup",
        "which"
      ],
      "returnType": "int",
      "exceptions": [],
      "minSdk": 24,
      "name": "setBitmap(android.graphics.Bitmap,android.graphics.Rect,boolean,int)",
      "documentation": "Caches {@code fullImage} in the memory based on {@code which}.\n\n\u003cp\u003eAfter a success call, any previously set live wallpaper is removed,\n\n@param fullImage the bitmap image to be cached in the memory\n@param visibleCropHint not used\n@param allowBackup not used\n@param which either {@link WallpaperManager#FLAG_LOCK} or {WallpaperManager#FLAG_SYSTEM}\n@return 0 if fails to cache. Otherwise, 1.\n"
    },
    "setIsSetWallpaperAllowed(boolean)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "allowed"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setIsSetWallpaperAllowed(boolean)"
    },
    "setIsWallpaperSupported(boolean)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "supported"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setIsWallpaperSupported(boolean)"
    },
    "setResource(int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "resid"
      ],
      "returnType": "void",
      "exceptions": [],
      "maxSdk": 23,
      "name": "setResource(int)",
      "documentation": "Sets a resource id as the current wallpaper.\n\n\u003cp\u003eThis only caches the resource id in memory. Calling this will override any previously set\nresource and does not differentiate between users.\n"
    },
    "setResource(int,int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "resid",
        "which"
      ],
      "returnType": "int",
      "exceptions": [],
      "minSdk": 24,
      "name": "setResource(int,int)"
    },
    "setStream(java.io.InputStream,android.graphics.Rect,boolean,int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "bitmapData",
        "visibleCropHint",
        "allowBackup",
        "which"
      ],
      "returnType": "int",
      "exceptions": [],
      "minSdk": 24,
      "name": "setStream(java.io.InputStream,android.graphics.Rect,boolean,int)",
      "documentation": "Caches {@code bitmapData} in the memory based on {@code which}.\n\n@param bitmapData the input stream which contains a bitmap image to be cached in the memory\n@param visibleCropHint not used\n@param allowBackup not used\n@param which either {@link WallpaperManager#FLAG_LOCK} or {WallpaperManager#FLAG_SYSTEM}\n@return 0 if fails to cache. Otherwise, 1.\n"
    },
    "setWallpaperComponent(android.content.ComponentName)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "wallpaperService"
      ],
      "returnType": "boolean",
      "exceptions": [
        "java.io.IOException",
        "org.xmlpull.v1.XmlPullParserException"
      ],
      "minSdk": 23,
      "name": "setWallpaperComponent(android.content.ComponentName)",
      "documentation": "Sets a live wallpaper, {@code wallpaperService}, as the current wallpaper.\n\n\u003cp\u003eThis only caches the live wallpaper info in the memory. Calling this will remove any\npreviously set static wallpaper.\n"
    },
    "setWallpaperDimAmount(float)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "dimAmount"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 33,
      "name": "setWallpaperDimAmount(float)"
    }
  },
  "imports": [
    "android.os.Build.VERSION_CODES.M",
    "android.os.Build.VERSION_CODES.N",
    "android.os.Build.VERSION_CODES.TIRAMISU",
    "android.Manifest.permission",
    "android.annotation.FloatRange",
    "android.annotation.RequiresPermission",
    "android.annotation.SystemApi",
    "android.app.WallpaperInfo",
    "android.app.WallpaperManager",
    "android.content.ComponentName",
    "android.content.Intent",
    "android.content.pm.PackageManager",
    "android.content.pm.ResolveInfo",
    "android.graphics.Bitmap",
    "android.graphics.Bitmap.CompressFormat",
    "android.graphics.BitmapFactory",
    "android.graphics.Rect",
    "android.os.Bundle",
    "android.os.IBinder",
    "android.os.ParcelFileDescriptor",
    "android.util.MathUtils",
    "java.io.File",
    "java.io.FileOutputStream",
    "java.io.IOException",
    "java.io.InputStream",
    "java.util.ArrayList",
    "java.util.Collections",
    "java.util.List",
    "java.util.concurrent.atomic.AtomicInteger",
    "javax.annotation.Nullable",
    "org.robolectric.RuntimeEnvironment",
    "org.robolectric.annotation.Implementation",
    "org.robolectric.annotation.Implements",
    "org.robolectric.util.Logger",
    "org.xmlpull.v1.XmlPullParserException",
    "org.robolectric.shadows.ShadowWallpaperManager.WallpaperCommandRecord"
  ],
  "name": "org.robolectric.shadows.ShadowWallpaperManager"
}