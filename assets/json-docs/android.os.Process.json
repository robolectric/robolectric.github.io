{
  "methods": {
    "clearKilledProcesses()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "clearKilledProcesses()"
    },
    "getRandomApplicationUid()": {
      "isImplementation": false,
      "modifiers": [
        "static"
      ],
      "params": [],
      "returnType": "int",
      "exceptions": [],
      "name": "getRandomApplicationUid()"
    },
    "getThreadPriority(int)": {
      "isImplementation": true,
      "modifiers": [
        "protected",
        "static",
        "final"
      ],
      "params": [
        "tid"
      ],
      "returnType": "int",
      "exceptions": [],
      "name": "getThreadPriority(int)",
      "documentation": "Returns priority stored for the given thread.\n\n@param tid The identifier of the thread. If equals zero, the identifier of the calling thread\n    will be used.\n"
    },
    "killProcess(int)": {
      "isImplementation": true,
      "modifiers": [
        "protected",
        "static",
        "final"
      ],
      "params": [
        "pid"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "killProcess(int)",
      "documentation": "Stores requests for killing processes. Processe that were requested to be killed can be\nretrieved by calling {@link #wasKilled(int)}. Use {@link #clearKilledProcesses()} to clear the\nlist.\n"
    },
    "myPid()": {
      "isImplementation": true,
      "modifiers": [
        "protected",
        "static",
        "final"
      ],
      "params": [],
      "returnType": "int",
      "exceptions": [],
      "name": "myPid()"
    },
    "myTid()": {
      "isImplementation": true,
      "modifiers": [
        "protected",
        "static",
        "final"
      ],
      "params": [],
      "returnType": "int",
      "exceptions": [],
      "name": "myTid()",
      "documentation": "Returns the identifier ({@link java.lang.Thread#getId()}) of the current thread ({@link\njava.lang.Thread#currentThread()}).\n"
    },
    "myUid()": {
      "isImplementation": true,
      "modifiers": [
        "protected",
        "static",
        "final"
      ],
      "params": [],
      "returnType": "int",
      "exceptions": [],
      "name": "myUid()",
      "documentation": "Returns the identifier of this process\u0027s uid. Unlike Android UIDs are randomly initialized to\nprevent tests from depending on any given value. Tests should access the current process UID\nvia {@link android.os.Process#myUid()}. You can override this value by calling {@link\n#setUid(int)}.\n"
    },
    "reset()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "reset()"
    },
    "setPid(int)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "pid"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setPid(int)",
      "documentation": "Sets the identifier of this process.\n"
    },
    "setThreadPriority(int)": {
      "isImplementation": true,
      "modifiers": [
        "protected",
        "static",
        "final"
      ],
      "params": [
        "priority"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setThreadPriority(int)",
      "documentation": "Stores priority for the current thread, but doesn\u0027t actually change it to not mess up with test\nrunner. Unlike real implementation does not throw any exceptions.\n"
    },
    "setThreadPriority(int,int)": {
      "isImplementation": true,
      "modifiers": [
        "protected",
        "static",
        "final"
      ],
      "params": [
        "tid",
        "priority"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setThreadPriority(int,int)",
      "documentation": "Stores priority for the given thread, but doesn\u0027t actually change it to not mess up with test\nrunner. Unlike real implementation does not throw any exceptions.\n\n@param tid The identifier of the thread. If equals zero, the identifier of the calling thread\n    will be used.\n"
    },
    "setUid(int)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "uid"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setUid(int)",
      "documentation": "Sets the identifier of this process.\n"
    },
    "wasKilled(int)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "pid"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "name": "wasKilled(int)",
      "documentation": "Gets an indication of whether or not a process was killed (using {@link #killProcess(int)}).\n"
    }
  },
  "imports": [
    "com.google.common.base.Preconditions.checkArgument",
    "java.util.HashMap",
    "java.util.HashSet",
    "java.util.Map",
    "java.util.Set",
    "java.util.concurrent.ThreadLocalRandom",
    "javax.annotation.concurrent.GuardedBy",
    "org.robolectric.annotation.Implementation",
    "org.robolectric.annotation.Implements",
    "org.robolectric.annotation.Resetter"
  ],
  "name": "org.robolectric.shadows.ShadowProcess"
}