{
  "methods": {
    "addThermalStatusListener(java.lang.Object)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "listener"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 29,
      "name": "addThermalStatusListener(java.lang.Object)",
      "documentation": "This function adds a listener for thermal status change. "
    },
    "addWakeLock(android.os.PowerManager.WakeLock)": {
      "isImplementation": false,
      "modifiers": [
        "static"
      ],
      "params": [
        "wl"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "addWakeLock(android.os.PowerManager.WakeLock)",
      "documentation": "Controls result from {@link #getLatestWakeLock()}\n\n@deprecated do not use\n"
    },
    "clearWakeLocks()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "clearWakeLocks()",
      "documentation": "Clears most recent recorded wakelock. "
    },
    "getAdaptivePowerSaveEnabled()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "name": "getAdaptivePowerSaveEnabled()",
      "documentation": "Gets the value set by {@link #setAdaptivePowerSaveEnabled(boolean)}. "
    },
    "getBatteryDischargePrediction()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "java.time.Duration",
      "exceptions": [],
      "minSdk": 31,
      "name": "getBatteryDischargePrediction()",
      "documentation": "Returns the current battery life remaining estimate.\n\n\u003cp\u003eDiffers from real implementation as the time that {@link #setBatteryDischargePrediction} was\ncalled is not taken into account.\n\n@return The estimated battery life remaining as a {@link Duration}. Will be {@code null} if the\n    prediction has not been set.\n"
    },
    "getContext()": {
      "isImplementation": false,
      "modifiers": [
        "private"
      ],
      "params": [],
      "returnType": "android.content.Context",
      "exceptions": [],
      "name": "getContext()"
    },
    "getCurrentThermalStatus()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "int",
      "exceptions": [],
      "minSdk": 29,
      "name": "getCurrentThermalStatus()",
      "documentation": "This function returns the current thermal status of the device. "
    },
    "getLatestWakeLock()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [],
      "returnType": "android.os.PowerManager.WakeLock",
      "exceptions": [],
      "name": "getLatestWakeLock()",
      "documentation": "Retrieves the most recent wakelock registered by the application\n\n@return Most recent wake lock.\n"
    },
    "getLocationPowerSaveMode()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "int",
      "exceptions": [],
      "minSdk": 28,
      "name": "getLocationPowerSaveMode()",
      "documentation": "Returns how location features should behave when battery saver is on. When battery saver is\noff, this will always return {@link #LOCATION_MODE_NO_CHANGE}.\n"
    },
    "getRebootReasons()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "com.google.common.collect.ImmutableList\u003cjava.lang.String\u003e",
      "exceptions": [],
      "name": "getRebootReasons()",
      "documentation": "Returns the list of reasons for each reboot, in chronological order. "
    },
    "getThermalStatusListeners()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "com.google.common.collect.ImmutableSet\u003cjava.lang.Object\u003e",
      "exceptions": [],
      "name": "getThermalStatusListeners()",
      "documentation": "This function gets listeners for thermal status change. "
    },
    "getTimesRebooted()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "int",
      "exceptions": [],
      "name": "getTimesRebooted()",
      "documentation": "Returns the number of times {@link #reboot(String)} was called. "
    },
    "isAmbientDisplayAvailable()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "minSdk": 30,
      "name": "isAmbientDisplayAvailable()",
      "documentation": "Returns true by default, or the value specified via {@link\n#setAmbientDisplayAvailable(boolean)}.\n"
    },
    "isAmbientDisplaySuppressed()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "minSdk": 30,
      "name": "isAmbientDisplaySuppressed()",
      "documentation": "Returns true if {@link #suppressAmbientDisplay(String, boolean)} has been called with any\ntoken.\n"
    },
    "isBatteryDischargePredictionPersonalized()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "minSdk": 31,
      "name": "isBatteryDischargePredictionPersonalized()",
      "documentation": "Returns whether the current battery life remaining estimate is personalized based on device\nusage history or not. This value does not take a device\u0027s powered or charging state into\naccount.\n\n@return A boolean indicating if the current discharge estimate is personalized based on\n    historical device usage or not.\n"
    },
    "isDeviceIdleMode()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "minSdk": 23,
      "name": "isDeviceIdleMode()",
      "documentation": "@return false by default, or the value specified via {@link #setIsDeviceIdleMode(boolean)}\n"
    },
    "isDeviceLightIdleMode()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "minSdk": 33,
      "name": "isDeviceLightIdleMode()"
    },
    "isIgnoringBatteryOptimizations(java.lang.String)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "packageName"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "minSdk": 23,
      "name": "isIgnoringBatteryOptimizations(java.lang.String)"
    },
    "isInteractive()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "minSdk": 21,
      "name": "isInteractive()"
    },
    "isLightDeviceIdleMode()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "minSdk": 24,
      "name": "isLightDeviceIdleMode()",
      "documentation": "@return false by default, or the value specified via {@link #setIsLightDeviceIdleMode(boolean)}\n"
    },
    "isPowerSaveMode()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "minSdk": 21,
      "name": "isPowerSaveMode()"
    },
    "isRebootingUserspaceSupported()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "minSdk": 30,
      "name": "isRebootingUserspaceSupported()",
      "documentation": "Returns last value specified in {@link #setIsRebootingUserspaceSupported(boolean)} or {@code\nfalse} by default.\n"
    },
    "isScreenOn()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "name": "isScreenOn()"
    },
    "isWakeLockLevelSupported(int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "level"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "minSdk": 21,
      "name": "isWakeLockLevelSupported(int)"
    },
    "newWakeLock(int,java.lang.String)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "flags",
        "tag"
      ],
      "returnType": "android.os.PowerManager.WakeLock",
      "exceptions": [],
      "name": "newWakeLock(int,java.lang.String)"
    },
    "reboot(java.lang.String)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "reason"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "reboot(java.lang.String)"
    },
    "removeThermalStatusListener(java.lang.Object)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "listener"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 29,
      "name": "removeThermalStatusListener(java.lang.Object)",
      "documentation": "This function removes a listener for thermal status change. "
    },
    "reset()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "reset()",
      "documentation": "Discards the most recent {@code PowerManager.WakeLock}s "
    },
    "setAdaptivePowerSaveEnabled(boolean)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "enabled"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "minSdk": 29,
      "name": "setAdaptivePowerSaveEnabled(boolean)",
      "documentation": "Sets whether Adaptive Power Saver is enabled.\n\n\u003cp\u003eThis has no effect, other than the value of {@link #getAdaptivePowerSaveEnabled()} is\nchanged, which can be used to ensure this method is called correctly.\n\n@return true if the value has changed.\n"
    },
    "setAmbientDisplayAvailable(boolean)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "available"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setAmbientDisplayAvailable(boolean)",
      "documentation": "Sets the value returned by {@link #isAmbientDisplayAvailable()}. "
    },
    "setBatteryDischargePrediction(java.time.Duration,boolean)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "timeRemaining",
        "isPersonalized"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 31,
      "name": "setBatteryDischargePrediction(java.time.Duration,boolean)",
      "documentation": "Differs from real implementation as device charging state is not checked.\n\n@param timeRemaining The time remaining as a {@link Duration}.\n@param isPersonalized true if personalized based on device usage history, false otherwise.\n"
    },
    "setCurrentThermalStatus(int)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "thermalStatus"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setCurrentThermalStatus(int)",
      "documentation": "Sets the value returned by {@link #getCurrentThermalStatus()}. "
    },
    "setIgnoringBatteryOptimizations(java.lang.String,boolean)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "packageName",
        "value"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setIgnoringBatteryOptimizations(java.lang.String,boolean)"
    },
    "setIsDeviceIdleMode(boolean)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "isDeviceIdleMode"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setIsDeviceIdleMode(boolean)",
      "documentation": "Sets the value returned by {@link #isDeviceIdleMode()}. "
    },
    "setIsDeviceLightIdleMode(boolean)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "lightDeviceIdleMode"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setIsDeviceLightIdleMode(boolean)",
      "documentation": "Sets the value returned by {@link #isDeviceLightIdleMode()}. "
    },
    "setIsInteractive(boolean)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "interactive"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setIsInteractive(boolean)",
      "documentation": "@deprecated Prefer {@link #turnScreenOn(boolean)} instead.\n"
    },
    "setIsLightDeviceIdleMode(boolean)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "lightDeviceIdleMode"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setIsLightDeviceIdleMode(boolean)",
      "documentation": "Sets the value returned by {@link #isLightDeviceIdleMode()}. "
    },
    "setIsPowerSaveMode(boolean)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "powerSaveMode"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setIsPowerSaveMode(boolean)"
    },
    "setIsRebootingUserspaceSupported(boolean)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "supported"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setIsRebootingUserspaceSupported(boolean)",
      "documentation": "Sets the value returned by {@link #isRebootingUserspaceSupported()}. "
    },
    "setIsScreenOn(boolean)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "screenOn"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setIsScreenOn(boolean)",
      "documentation": "@deprecated Use {@link #setIsInteractive(boolean)} instead.\n"
    },
    "setIsWakeLockLevelSupported(int,boolean)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "level",
        "supported"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setIsWakeLockLevelSupported(int,boolean)"
    },
    "setLocationPowerSaveMode(int)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "locationMode"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setLocationPowerSaveMode(int)",
      "documentation": "Sets the value returned by {@link #getLocationPowerSaveMode()} when battery saver is on. "
    },
    "suppressAmbientDisplay(java.lang.String,boolean)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "token",
        "suppress"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 30,
      "name": "suppressAmbientDisplay(java.lang.String,boolean)",
      "documentation": "If true, suppress the device\u0027s ambient display. Ambient display is defined as anything visible\non the display when {@link PowerManager#isInteractive} is false.\n\n@param token An identifier for the ambient display suppression.\n@param suppress If {@code true}, suppresses the ambient display. Otherwise, unsuppresses the\n    ambient display for the given token.\n"
    },
    "turnScreenOn(boolean)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "screenOn"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "turnScreenOn(boolean)",
      "documentation": "Emulates turning the screen on/off if the screen is not already on/off. "
    }
  },
  "imports": [
    "android.content.Intent.ACTION_SCREEN_OFF",
    "android.content.Intent.ACTION_SCREEN_ON",
    "android.os.Build.VERSION_CODES.LOLLIPOP",
    "android.os.Build.VERSION_CODES.LOLLIPOP_MR1",
    "android.os.Build.VERSION_CODES.M",
    "android.os.Build.VERSION_CODES.N",
    "android.os.Build.VERSION_CODES.O",
    "android.os.Build.VERSION_CODES.P",
    "android.os.Build.VERSION_CODES.Q",
    "android.os.Build.VERSION_CODES.R",
    "android.os.Build.VERSION_CODES.S",
    "android.os.Build.VERSION_CODES.TIRAMISU",
    "com.google.common.base.Preconditions.checkState",
    "org.robolectric.util.reflector.Reflector.reflector",
    "android.Manifest.permission",
    "android.annotation.NonNull",
    "android.annotation.Nullable",
    "android.annotation.RequiresPermission",
    "android.annotation.SystemApi",
    "android.content.Context",
    "android.content.Intent",
    "android.os.Binder",
    "android.os.Build.VERSION_CODES",
    "android.os.PowerManager",
    "android.os.PowerManager.WakeLock",
    "android.os.SystemClock",
    "android.os.WorkSource",
    "com.google.common.collect.ImmutableList",
    "com.google.common.collect.ImmutableSet",
    "java.time.Duration",
    "java.util.ArrayList",
    "java.util.Collections",
    "java.util.HashMap",
    "java.util.HashSet",
    "java.util.List",
    "java.util.Map",
    "java.util.Optional",
    "java.util.Set",
    "org.robolectric.RuntimeEnvironment",
    "org.robolectric.annotation.HiddenApi",
    "org.robolectric.annotation.Implementation",
    "org.robolectric.annotation.Implements",
    "org.robolectric.annotation.RealObject",
    "org.robolectric.annotation.Resetter",
    "org.robolectric.shadow.api.Shadow",
    "org.robolectric.util.reflector.Accessor",
    "org.robolectric.util.reflector.ForType",
    "org.robolectric.shadows.ShadowPowerManager.ShadowWakeLock",
    "org.robolectric.shadows.ShadowPowerManager.ReflectorPowerManager"
  ],
  "name": "org.robolectric.shadows.ShadowPowerManager",
  "documentation": "Shadow of PowerManager "
}