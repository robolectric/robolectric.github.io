{
  "methods": {
    "addJavascriptInterface(java.lang.Object,java.lang.String)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "obj",
        "interfaceName"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "addJavascriptInterface(java.lang.Object,java.lang.String)"
    },
    "canGoBack()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "name": "canGoBack()"
    },
    "canGoForward()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "name": "canGoForward()"
    },
    "clearCache(boolean)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "includeDiskFiles"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "clearCache(boolean)"
    },
    "clearFormData()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "clearFormData()"
    },
    "clearHistory()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "clearHistory()"
    },
    "clearView()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "clearView()"
    },
    "copyBackForwardList()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "android.webkit.WebBackForwardList",
      "exceptions": [],
      "name": "copyBackForwardList()"
    },
    "createHitTestResult(int,java.lang.String)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "type",
        "extra"
      ],
      "returnType": "android.webkit.WebView.HitTestResult",
      "exceptions": [],
      "name": "createHitTestResult(int,java.lang.String)",
      "documentation": "Creates an instance of {@link HitTestResult}. "
    },
    "createWebMessageChannel()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "android.webkit.WebMessagePort[]",
      "exceptions": [],
      "minSdk": 23,
      "name": "createWebMessageChannel()"
    },
    "destroy()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "destroy()"
    },
    "didClearCacheIncludeDiskFiles()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "name": "didClearCacheIncludeDiskFiles()"
    },
    "ensureProviderCreated()": {
      "isImplementation": true,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "ensureProviderCreated()"
    },
    "evaluateJavascript(java.lang.String,android.webkit.ValueCallback\u003cjava.lang.String\u003e)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "script",
        "callback"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "evaluateJavascript(java.lang.String,android.webkit.ValueCallback\u003cjava.lang.String\u003e)"
    },
    "findAddress(java.lang.String)": {
      "isImplementation": true,
      "modifiers": [
        "protected",
        "static"
      ],
      "params": [
        "addr"
      ],
      "returnType": "java.lang.String",
      "exceptions": [],
      "name": "findAddress(java.lang.String)"
    },
    "getBackgroundColor()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "int",
      "exceptions": [],
      "name": "getBackgroundColor()",
      "documentation": "Returns the {@link android.graphics.Color} int that has been set by {@link\n#setBackgroundColor}.\n"
    },
    "getClassNamed(java.lang.String)": {
      "isImplementation": false,
      "modifiers": [
        "private"
      ],
      "params": [
        "className"
      ],
      "returnType": "java.lang.Class\u003c?\u003e",
      "exceptions": [],
      "name": "getClassNamed(java.lang.String)"
    },
    "getCreatedPorts()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "java.util.List\u003corg.robolectric.fakes.RoboWebMessagePort[]\u003e",
      "exceptions": [],
      "name": "getCreatedPorts()"
    },
    "getCurrentWebViewPackage()": {
      "isImplementation": true,
      "modifiers": [
        "protected",
        "static"
      ],
      "params": [],
      "returnType": "android.content.pm.PackageInfo",
      "exceptions": [],
      "minSdk": 26,
      "name": "getCurrentWebViewPackage()",
      "documentation": "Overrides the system implementation for getting the WebView package.\n\n\u003cp\u003eReturns null by default, but this can be changed with {@code #setCurrentWebviewPackage()}.\n"
    },
    "getDownloadListener()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "android.webkit.DownloadListener",
      "exceptions": [],
      "name": "getDownloadListener()",
      "documentation": "Returns the {@link DownloadListener} set with {@link #setDownloadListener}, if any. "
    },
    "getFactory()": {
      "isImplementation": true,
      "modifiers": [
        "protected",
        "static"
      ],
      "params": [],
      "returnType": "android.webkit.WebViewFactoryProvider",
      "exceptions": [],
      "name": "getFactory()"
    },
    "getFavicon()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "android.graphics.Bitmap",
      "exceptions": [],
      "name": "getFavicon()",
      "documentation": "Gets the favicon for the current page set by {@link #setFavicon}. "
    },
    "getGoBackInvocations()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "int",
      "exceptions": [],
      "name": "getGoBackInvocations()",
      "documentation": "Returns the number of times {@code android.webkit.WebView#goBack()} was invoked. "
    },
    "getGoForwardInvocations()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "int",
      "exceptions": [],
      "name": "getGoForwardInvocations()",
      "documentation": "Returns the number of times {@code android.webkit.WebView#goForward()} was invoked. "
    },
    "getHitTestResult()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "android.webkit.WebView.HitTestResult",
      "exceptions": [],
      "name": "getHitTestResult()"
    },
    "getJavascriptInterface(java.lang.String)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "interfaceName"
      ],
      "returnType": "java.lang.Object",
      "exceptions": [],
      "name": "getJavascriptInterface(java.lang.String)"
    },
    "getLastAdditionalHttpHeaders()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "java.util.Map\u003cjava.lang.String,java.lang.String\u003e",
      "exceptions": [],
      "name": "getLastAdditionalHttpHeaders()",
      "documentation": "@return the additional Http headers that in the same request with last loaded url\n"
    },
    "getLastEvaluatedJavascript()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "java.lang.String",
      "exceptions": [],
      "name": "getLastEvaluatedJavascript()",
      "documentation": "Returns the last evaluated Javascript value provided to {@link #evaluateJavascript(String,\nValueCallback)} or null if the method has not been called.\n"
    },
    "getLastEvaluatedJavascriptCallback()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "android.webkit.ValueCallback\u003cjava.lang.String\u003e",
      "exceptions": [],
      "name": "getLastEvaluatedJavascriptCallback()",
      "documentation": "Returns the last callback value provided to {@link #evaluateJavascript(String, ValueCallback)}\nor null if the method has not been called.\n"
    },
    "getLastLoadData()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "org.robolectric.shadows.ShadowWebView.LoadData",
      "exceptions": [],
      "name": "getLastLoadData()"
    },
    "getLastLoadDataWithBaseURL()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "org.robolectric.shadows.ShadowWebView.LoadDataWithBaseURL",
      "exceptions": [],
      "name": "getLastLoadDataWithBaseURL()"
    },
    "getLastLoadedUrl()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "java.lang.String",
      "exceptions": [],
      "name": "getLastLoadedUrl()",
      "documentation": "@return the last loaded url\n"
    },
    "getOriginalUrl()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "java.lang.String",
      "exceptions": [],
      "name": "getOriginalUrl()"
    },
    "getReloadInvocations()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "int",
      "exceptions": [],
      "name": "getReloadInvocations()",
      "documentation": "Returns the number of times {@code android.webkit.WebView#reload()} was invoked "
    },
    "getSettings()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "android.webkit.WebSettings",
      "exceptions": [],
      "name": "getSettings()"
    },
    "getTitle()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "java.lang.String",
      "exceptions": [],
      "name": "getTitle()"
    },
    "getUrl()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "java.lang.String",
      "exceptions": [],
      "name": "getUrl()"
    },
    "getWebChromeClient()": {
      "isImplementation": true,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "android.webkit.WebChromeClient",
      "exceptions": [],
      "minSdk": 26,
      "name": "getWebChromeClient()",
      "documentation": "@return webChromeClient\n"
    },
    "getWebViewClient()": {
      "isImplementation": true,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "android.webkit.WebViewClient",
      "exceptions": [],
      "minSdk": 26,
      "name": "getWebViewClient()"
    },
    "goBack()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "goBack()"
    },
    "goBackOrForward(int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "steps"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "goBackOrForward(int)"
    },
    "goForward()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "goForward()"
    },
    "loadData(java.lang.String,java.lang.String,java.lang.String)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "data",
        "mimeType",
        "encoding"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "loadData(java.lang.String,java.lang.String,java.lang.String)"
    },
    "loadDataWithBaseURL(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "baseUrl",
        "data",
        "mimeType",
        "encoding",
        "historyUrl"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "loadDataWithBaseURL(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
    },
    "loadUrl(java.lang.String)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "url"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "loadUrl(java.lang.String)"
    },
    "loadUrl(java.lang.String,java.util.Map\u003cjava.lang.String,java.lang.String\u003e)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "url",
        "additionalHttpHeaders"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "loadUrl(java.lang.String,java.util.Map\u003cjava.lang.String,java.lang.String\u003e)",
      "documentation": "Fires a request to load the given {@code url} in WebView.\n\n\u003cp\u003eThe {@code url} is is not added to the history until {@link #pushEntryToHistory(String)} is\ncalled. If you want to simulate a redirect you can pass the redirect URL to {@link\n#pushEntryToHistory(String)}.\n"
    },
    "nullish(java.lang.reflect.Method)": {
      "isImplementation": false,
      "modifiers": [
        "private"
      ],
      "params": [
        "method"
      ],
      "returnType": "java.lang.Object",
      "exceptions": [],
      "name": "nullish(java.lang.reflect.Method)"
    },
    "onPause()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "onPause()"
    },
    "onResume()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "onResume()"
    },
    "performNoPageLoadClientCallbacks()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "performNoPageLoadClientCallbacks()",
      "documentation": "Performs no callbacks on {@link WebViewClient} and {@link WebChromeClient} when any of {@link\n#loadUrl}, {@link loadData} or {@link #loadDataWithBaseURL} is called.\n"
    },
    "performPageLoadType(java.lang.String)": {
      "isImplementation": false,
      "modifiers": [
        "private"
      ],
      "params": [
        "url"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "performPageLoadType(java.lang.String)"
    },
    "performSuccessfulPageLoad(java.lang.String)": {
      "isImplementation": false,
      "modifiers": [
        "private"
      ],
      "params": [
        "url"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "performSuccessfulPageLoad(java.lang.String)"
    },
    "performSuccessfulPageLoadClientCallbacks()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "performSuccessfulPageLoadClientCallbacks()",
      "documentation": "Performs callbacks on {@link WebViewClient} and {@link WebChromeClient} that simulates a\nsuccessful page load when any of {@link #loadUrl}, {@link loadData} or {@link\n#loadDataWithBaseURL} is called.\n"
    },
    "pushEntryToHistory(java.lang.String)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "url"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "pushEntryToHistory(java.lang.String)",
      "documentation": "Pushes an entry to the history with the given {@code url}.\n\n\u003cp\u003eThis method can be used after a {@link #loadUrl(String)} call to push that navigation into\nthe history. This matches the prod behaviour of WebView, a navigation is never committed to\nhistory inline and can take an arbitrary amount of time depending on the network connection.\nNotice that the given {@code url} does not need to match that of the {@link #loadUrl(String)}\nas URL can be changed e.g. through server-side redirects without WebView being notified by the\ntime it is committed.\n\n\u003cp\u003eThis method can also be used to simulate navigations started by user interaction, as these\nwould still add an entry to the history themselves.\n\n\u003cp\u003eIf there are any entries ahead of the current index (for forward navigation) these are\nremoved.\n"
    },
    "reload()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "reload()"
    },
    "removeJavascriptInterface(java.lang.String)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "name"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "removeJavascriptInterface(java.lang.String)"
    },
    "reset()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "reset()"
    },
    "restoreState(android.os.Bundle)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "inState"
      ],
      "returnType": "android.webkit.WebBackForwardList",
      "exceptions": [],
      "name": "restoreState(android.os.Bundle)"
    },
    "saveState(android.os.Bundle)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "outState"
      ],
      "returnType": "android.webkit.WebBackForwardList",
      "exceptions": [],
      "name": "saveState(android.os.Bundle)"
    },
    "setBackgroundColor(int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "backgroundColor"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setBackgroundColor(int)",
      "documentation": "Sets the {@link android.graphics.Color} int that should be returned from {@link\n#getBackgroundColor}.\n\n\u003cp\u003eWebView uses the background color set by the {@link\nandroid.webkit.WebView#setBackgroundColor} method to internally tint the background color of\nweb pages until they are drawn. The way this API works is completely independent of the {@link\nandroid.view.View#setBackgroundColor} method and it interacts directly with WebView renderers.\nTests can access the set background color using the {@link #getBackgroundColor} method.\n"
    },
    "setCanGoBack(boolean)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "canGoBack"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setCanGoBack(boolean)",
      "documentation": "Sets the value to return from {@code android.webkit.WebView#canGoBack()}\n\n@param canGoBack Value to return from {@code android.webkit.WebView#canGoBack()}\n@deprecated Do not depend on this method as it will be removed in a future update. The\n    preferred method is to populate a fake web history to use for going back.\n"
    },
    "setCurrentWebViewPackage(android.content.pm.PackageInfo)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "webViewPackageInfo"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setCurrentWebViewPackage(android.content.pm.PackageInfo)",
      "documentation": "Sets the value to return from {@code #getCurrentWebviewPackage()}. "
    },
    "setDownloadListener(android.webkit.DownloadListener)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "downloadListener"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setDownloadListener(android.webkit.DownloadListener)"
    },
    "setFavicon(android.graphics.Bitmap)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "favicon"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setFavicon(android.graphics.Bitmap)",
      "documentation": "Sets the favicon to return from {@link #getFavicon}. "
    },
    "setHitTestResult(android.webkit.WebView.HitTestResult)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "hitTestResult"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setHitTestResult(android.webkit.WebView.HitTestResult)",
      "documentation": "Sets the {@link HitTestResult} that should be returned from {@link #getHitTestResult()}. "
    },
    "setLayoutParams(android.view.ViewGroup.LayoutParams)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "params"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setLayoutParams(android.view.ViewGroup.LayoutParams)"
    },
    "setWebChromeClient(android.webkit.WebChromeClient)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "client"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setWebChromeClient(android.webkit.WebChromeClient)"
    },
    "setWebContentsDebuggingEnabled(boolean)": {
      "isImplementation": true,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "enabled"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setWebContentsDebuggingEnabled(boolean)"
    },
    "setWebViewClient(android.webkit.WebViewClient)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "client"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setWebViewClient(android.webkit.WebViewClient)"
    },
    "wasClearCacheCalled()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "name": "wasClearCacheCalled()"
    },
    "wasClearFormDataCalled()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "name": "wasClearFormDataCalled()"
    },
    "wasClearHistoryCalled()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "name": "wasClearHistoryCalled()"
    },
    "wasClearViewCalled()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "name": "wasClearViewCalled()"
    },
    "wasDestroyCalled()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "name": "wasDestroyCalled()"
    },
    "wasOnPauseCalled()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "name": "wasOnPauseCalled()"
    },
    "wasOnResumeCalled()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "name": "wasOnResumeCalled()"
    }
  },
  "imports": [
    "android.annotation.ColorInt",
    "android.content.pm.PackageInfo",
    "android.graphics.Bitmap",
    "android.os.Build",
    "android.os.Build.VERSION",
    "android.os.Build.VERSION_CODES",
    "android.os.Bundle",
    "android.os.Handler",
    "android.os.Looper",
    "android.view.ViewGroup.LayoutParams",
    "android.webkit.DownloadListener",
    "android.webkit.ValueCallback",
    "android.webkit.WebBackForwardList",
    "android.webkit.WebChromeClient",
    "android.webkit.WebHistoryItem",
    "android.webkit.WebMessagePort",
    "android.webkit.WebSettings",
    "android.webkit.WebView",
    "android.webkit.WebView.HitTestResult",
    "android.webkit.WebViewClient",
    "android.webkit.WebViewFactoryProvider",
    "com.google.common.collect.ImmutableList",
    "java.lang.reflect.Field",
    "java.lang.reflect.InvocationHandler",
    "java.lang.reflect.Method",
    "java.lang.reflect.Proxy",
    "java.util.ArrayList",
    "java.util.Collections",
    "java.util.HashMap",
    "java.util.List",
    "java.util.Map",
    "org.robolectric.annotation.HiddenApi",
    "org.robolectric.annotation.Implementation",
    "org.robolectric.annotation.Implements",
    "org.robolectric.annotation.RealObject",
    "org.robolectric.annotation.Resetter",
    "org.robolectric.fakes.RoboWebMessagePort",
    "org.robolectric.fakes.RoboWebSettings",
    "org.robolectric.util.ReflectionHelpers",
    "org.robolectric.shadows.ShadowWebView.LoadDataWithBaseURL",
    "org.robolectric.shadows.ShadowWebView.LoadData",
    "org.robolectric.shadows.ShadowWebView.PageLoadType",
    "org.robolectric.shadows.ShadowWebView.BackForwardList",
    "org.robolectric.shadows.ShadowWebView.HistoryItem"
  ],
  "name": "org.robolectric.shadows.ShadowWebView"
}