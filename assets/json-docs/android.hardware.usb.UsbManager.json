{
  "methods": {
    "addOrUpdateUsbDevice(android.hardware.usb.UsbDevice,boolean)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "usbDevice",
        "hasPermission"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "addOrUpdateUsbDevice(android.hardware.usb.UsbDevice,boolean)",
      "documentation": "Adds a USB device into available USB devices map with permission value. If the USB device\nalready exists, updates the USB device with new permission value.\n"
    },
    "addPort(java.lang.String)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "portId"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "addPort(java.lang.String)",
      "documentation": "Adds a USB port with given ID to UsbManager. "
    },
    "addPort(java.lang.String,int,int,int,int)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "portId",
        "statusCurrentMode",
        "statusCurrentPowerRole",
        "statusCurrentDataRole",
        "statusSupportedRoleCombinations"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "addPort(java.lang.String,int,int,int,int)",
      "documentation": "Adds a USB port with given ID and {@link UsbPortStatus} parameters to UsbManager for Q+. "
    },
    "clearPorts()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "clearPorts()",
      "documentation": "Remove all added ports from UsbManager. "
    },
    "createUsbPort(android.hardware.usb.UsbManager,java.lang.String,int)": {
      "isImplementation": false,
      "modifiers": [
        "private",
        "static"
      ],
      "params": [
        "usbManager",
        "id",
        "supportedModes"
      ],
      "returnType": "java.lang.Object",
      "exceptions": [],
      "name": "createUsbPort(android.hardware.usb.UsbManager,java.lang.String,int)",
      "documentation": "Helper method for creating a {@link UsbPort}.\n\n\u003cp\u003eReturns Object to avoid referencing the API M+ UsbPort when running on older platforms.\n"
    },
    "createUsbPortStatus(int,int,int,int)": {
      "isImplementation": false,
      "modifiers": [
        "private",
        "static"
      ],
      "params": [
        "currentMode",
        "currentPowerRole",
        "currentDataRole",
        "supportedRoleCombinations"
      ],
      "returnType": "java.lang.Object",
      "exceptions": [],
      "name": "createUsbPortStatus(int,int,int,int)",
      "documentation": "Helper method for creating a {@link UsbPortStatus}.\n\n\u003cp\u003eReturns Object to avoid referencing the API M+ UsbPortStatus when running on older\nplatforms.\n"
    },
    "getAccessoryList()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "android.hardware.usb.UsbAccessory[]",
      "exceptions": [],
      "name": "getAccessoryList()"
    },
    "getDeviceList()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "java.util.HashMap\u003cjava.lang.String,android.hardware.usb.UsbDevice\u003e",
      "exceptions": [],
      "name": "getDeviceList()",
      "documentation": "Returns a HashMap containing all USB devices currently attached. USB device name is the key for\nthe returned HashMap. The result will be empty if no devices are attached, or if USB host mode\nis inactive or unsupported.\n"
    },
    "getPortStatus(java.lang.Object)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "port"
      ],
      "returnType": "java.lang.Object",
      "exceptions": [],
      "minSdk": 23,
      "name": "getPortStatus(java.lang.Object)"
    },
    "getPortStatus(java.lang.String)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "portId"
      ],
      "returnType": "java.lang.Object",
      "exceptions": [],
      "name": "getPortStatus(java.lang.String)",
      "documentation": "Returns the {@link UsbPortStatus} corresponding to the {@link UsbPort} with given {@code\nportId} if present; otherwise returns {@code null}.\n"
    },
    "getPorts()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "java.lang.Object",
      "exceptions": [],
      "minSdk": 23,
      "name": "getPorts()"
    },
    "grantPermission(android.hardware.usb.UsbDevice)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "device"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 24,
      "name": "grantPermission(android.hardware.usb.UsbDevice)"
    },
    "grantPermission(android.hardware.usb.UsbDevice,java.lang.String)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "device",
        "packageName"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 25,
      "name": "grantPermission(android.hardware.usb.UsbDevice,java.lang.String)"
    },
    "hasPermission(android.hardware.usb.UsbDevice)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "device"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "name": "hasPermission(android.hardware.usb.UsbDevice)",
      "documentation": "Returns true if the caller has permission to access the device. "
    },
    "hasPermissionForPackage(android.hardware.usb.UsbDevice,java.lang.String)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "device",
        "packageName"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "name": "hasPermissionForPackage(android.hardware.usb.UsbDevice,java.lang.String)",
      "documentation": "Returns true if the given package has permission to access the device. "
    },
    "openAccessory(android.hardware.usb.UsbAccessory)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "accessory"
      ],
      "returnType": "android.os.ParcelFileDescriptor",
      "exceptions": [],
      "name": "openAccessory(android.hardware.usb.UsbAccessory)",
      "documentation": "Opens a file descriptor from a temporary file. "
    },
    "removeUsbDevice(android.hardware.usb.UsbDevice)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "usbDevice"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "removeUsbDevice(android.hardware.usb.UsbDevice)",
      "documentation": "Removes a USB device from available USB devices map. "
    },
    "revokePermission(android.hardware.usb.UsbDevice,java.lang.String)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "device",
        "packageName"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "revokePermission(android.hardware.usb.UsbDevice,java.lang.String)",
      "documentation": "Revokes permission to a USB device granted to a package. This method does nothing if the\npackage doesn\u0027t have permission to access the device.\n"
    },
    "setAttachedUsbAccessory(android.hardware.usb.UsbAccessory)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "usbAccessory"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setAttachedUsbAccessory(android.hardware.usb.UsbAccessory)",
      "documentation": "Sets the currently attached Usb accessory returned in #getAccessoryList. "
    },
    "setPortRoles(java.lang.Object,java.lang.Object,java.lang.Object)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "port",
        "powerRole",
        "dataRole"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 23,
      "name": "setPortRoles(java.lang.Object,java.lang.Object,java.lang.Object)"
    }
  },
  "imports": [
    "android.os.Build.VERSION_CODES.M",
    "android.os.Build.VERSION_CODES.N",
    "android.os.Build.VERSION_CODES.N_MR1",
    "org.robolectric.RuntimeEnvironment.application",
    "org.robolectric.util.ReflectionHelpers.ClassParameter.from",
    "org.robolectric.util.ReflectionHelpers.callConstructor",
    "org.robolectric.util.ReflectionHelpers.getStaticField",
    "android.annotation.Nullable",
    "android.annotation.TargetApi",
    "android.content.Intent",
    "android.hardware.usb.UsbAccessory",
    "android.hardware.usb.UsbDevice",
    "android.hardware.usb.UsbManager",
    "android.hardware.usb.UsbPort",
    "android.hardware.usb.UsbPortStatus",
    "android.os.Build",
    "android.os.ParcelFileDescriptor",
    "com.google.common.base.Preconditions",
    "java.io.File",
    "java.io.FileNotFoundException",
    "java.util.ArrayList",
    "java.util.HashMap",
    "java.util.List",
    "org.robolectric.RuntimeEnvironment",
    "org.robolectric.annotation.HiddenApi",
    "org.robolectric.annotation.Implementation",
    "org.robolectric.annotation.Implements",
    "org.robolectric.annotation.RealObject",
    "org.robolectric.util.reflector.ForType",
    "org.robolectric.shadows.ShadowUsbManager._UsbManager_",
    "org.robolectric.shadows.ShadowUsbManager._UsbManagerQ_"
  ],
  "name": "org.robolectric.shadows.ShadowUsbManager",
  "documentation": "Robolectric implementation of {@link android.hardware.usb.UsbManager}. "
}