{
  "methods": {
    "clearSource()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "clearSource()",
      "documentation": "Resets {@link AudioRecordSource} to be used for providing data to {@link AudioRecord}, so that\nall requests are fulfilled for audio data by completely filling any requested buffers.\n"
    },
    "getAudioRecordSource()": {
      "isImplementation": false,
      "modifiers": [
        "private"
      ],
      "params": [],
      "returnType": "org.robolectric.shadows.ShadowAudioRecord.AudioRecordSource",
      "exceptions": [],
      "name": "getAudioRecordSource()"
    },
    "native_get_min_buff_size(int,int,int)": {
      "isImplementation": true,
      "modifiers": [
        "protected",
        "static"
      ],
      "params": [
        "sampleRateInHz",
        "channelCount",
        "audioFormat"
      ],
      "returnType": "int",
      "exceptions": [],
      "name": "native_get_min_buff_size(int,int,int)"
    },
    "native_read_in_byte_array(byte[],int,int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "audioData",
        "offsetInBytes",
        "sizeInBytes"
      ],
      "returnType": "int",
      "exceptions": [],
      "maxSdk": 22,
      "name": "native_read_in_byte_array(byte[],int,int)"
    },
    "native_read_in_byte_array(byte[],int,int,boolean)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "audioData",
        "offsetInBytes",
        "sizeInBytes",
        "isBlocking"
      ],
      "returnType": "int",
      "exceptions": [],
      "minSdk": 23,
      "name": "native_read_in_byte_array(byte[],int,int,boolean)"
    },
    "native_read_in_direct_buffer(java.lang.Object,int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "jBuffer",
        "sizeInBytes"
      ],
      "returnType": "int",
      "exceptions": [],
      "maxSdk": 22,
      "name": "native_read_in_direct_buffer(java.lang.Object,int)"
    },
    "native_read_in_direct_buffer(java.lang.Object,int,boolean)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "jBuffer",
        "sizeInBytes",
        "isBlocking"
      ],
      "returnType": "int",
      "exceptions": [],
      "minSdk": 23,
      "name": "native_read_in_direct_buffer(java.lang.Object,int,boolean)"
    },
    "native_read_in_float_array(float[],int,int,boolean)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "audioData",
        "offsetInFloats",
        "sizeInFloats",
        "isBlocking"
      ],
      "returnType": "int",
      "exceptions": [],
      "minSdk": 23,
      "name": "native_read_in_float_array(float[],int,int,boolean)"
    },
    "native_read_in_short_array(short[],int,int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "audioData",
        "offsetInShorts",
        "sizeInShorts"
      ],
      "returnType": "int",
      "exceptions": [],
      "maxSdk": 22,
      "name": "native_read_in_short_array(short[],int,int)"
    },
    "native_read_in_short_array(short[],int,int,boolean)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "audioData",
        "offsetInShorts",
        "sizeInShorts",
        "isBlocking"
      ],
      "returnType": "int",
      "exceptions": [],
      "minSdk": 23,
      "name": "native_read_in_short_array(short[],int,int,boolean)"
    },
    "native_setInputDevice(int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "preferredDeviceId"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "minSdk": 23,
      "name": "native_setInputDevice(int)"
    },
    "native_start(int,int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "syncEvent",
        "sessionId"
      ],
      "returnType": "int",
      "exceptions": [],
      "name": "native_start(int,int)"
    },
    "setSource(org.robolectric.shadows.ShadowAudioRecord.AudioRecordSource)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "source"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setSource(org.robolectric.shadows.ShadowAudioRecord.AudioRecordSource)",
      "documentation": "Sets {@link AudioRecordSource} to be used for providing data to {@link AudioRecord}.\n\n@deprecated use {@link #setSourceProvider(AudioRecordSourceProvider)}.\n"
    },
    "setSourceProvider(org.robolectric.shadows.ShadowAudioRecord.AudioRecordSourceProvider)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "audioRecordSourceProvider"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setSourceProvider(org.robolectric.shadows.ShadowAudioRecord.AudioRecordSourceProvider)",
      "documentation": "Sets {@link AudioRecordSourceProvider} to be used for providing data of {@link AudioRecord}.\n"
    }
  },
  "imports": [
    "android.media.AudioRecord.ERROR_BAD_VALUE",
    "android.os.Build.VERSION_CODES.LOLLIPOP",
    "android.os.Build.VERSION_CODES.LOLLIPOP_MR1",
    "android.os.Build.VERSION_CODES.M",
    "android.media.AudioFormat",
    "android.media.AudioRecord",
    "android.media.AudioSystem",
    "java.nio.Buffer",
    "java.nio.ByteBuffer",
    "java.util.concurrent.atomic.AtomicReference",
    "org.robolectric.annotation.Implementation",
    "org.robolectric.annotation.Implements",
    "org.robolectric.annotation.RealObject",
    "org.robolectric.annotation.Resetter",
    "org.robolectric.shadows.ShadowAudioRecord.AudioRecordSourceProvider",
    "org.robolectric.shadows.ShadowAudioRecord.AudioRecordSource"
  ],
  "name": "org.robolectric.shadows.ShadowAudioRecord",
  "documentation": "Shadow {@link AudioRecord} which by default will fulfil any requests for audio data by completely\nfilling any requested buffers.\n\n\u003cp\u003eIt is also possible to provide the underlying data by implementing {@link AudioRecordSource}\nand setting this via {@link #setSourceProvider(AudioRecordSourceProvider)}.\n"
}