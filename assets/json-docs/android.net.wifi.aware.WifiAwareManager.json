{
  "methods": {
    "attach(android.net.wifi.aware.AttachCallback,android.os.Handler)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "callback",
        "handler"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "attach(android.net.wifi.aware.AttachCallback,android.os.Handler)"
    },
    "isAvailable()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "name": "isAvailable()"
    },
    "newPublishDiscoverySession(android.net.wifi.aware.WifiAwareManager,int,int)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "manager",
        "clientId",
        "sessionId"
      ],
      "returnType": "android.net.wifi.aware.PublishDiscoverySession",
      "exceptions": [],
      "name": "newPublishDiscoverySession(android.net.wifi.aware.WifiAwareManager,int,int)",
      "documentation": "Returns a new instance of PublishDiscoverySession. "
    },
    "newSubscribeDiscoverySession(android.net.wifi.aware.WifiAwareManager,int,int)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "manager",
        "clientId",
        "sessionId"
      ],
      "returnType": "android.net.wifi.aware.SubscribeDiscoverySession",
      "exceptions": [],
      "name": "newSubscribeDiscoverySession(android.net.wifi.aware.WifiAwareManager,int,int)",
      "documentation": "Returns a new instance of SubscribeDiscoverySession. "
    },
    "newWifiAwareSession(android.net.wifi.aware.WifiAwareManager,android.os.Binder,int)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "manager",
        "binder",
        "clientId"
      ],
      "returnType": "android.net.wifi.aware.WifiAwareSession",
      "exceptions": [],
      "name": "newWifiAwareSession(android.net.wifi.aware.WifiAwareManager,android.os.Binder,int)",
      "documentation": "Returns a new instance of WifiAwareSession. "
    },
    "publish(int,android.os.Looper,android.net.wifi.aware.PublishConfig,android.net.wifi.aware.DiscoverySessionCallback)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "clientId",
        "looper",
        "publishConfig",
        "callback"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "publish(int,android.os.Looper,android.net.wifi.aware.PublishConfig,android.net.wifi.aware.DiscoverySessionCallback)"
    },
    "setAvailable(boolean)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "available"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setAvailable(boolean)",
      "documentation": "Sets the availability of the wifiAwareManager. "
    },
    "setDiscoverySessionToPublish(android.net.wifi.aware.PublishDiscoverySession)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "publishDiscoverySession"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setDiscoverySessionToPublish(android.net.wifi.aware.PublishDiscoverySession)",
      "documentation": "Sets parameter to pass to DiscoverySessionCallback#onPublishStarted(PublishDiscoverySession)\n"
    },
    "setDiscoverySessionToSubscribe(android.net.wifi.aware.SubscribeDiscoverySession)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "subscribeDiscoverySession"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setDiscoverySessionToSubscribe(android.net.wifi.aware.SubscribeDiscoverySession)",
      "documentation": "Sets param to pass to DiscoverySessionCallback#onSubscribeStarted(SubscribeDiscoverySession)\n"
    },
    "setSessionDetached(boolean)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "sessionDetached"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setSessionDetached(boolean)",
      "documentation": "Sets the boolean value indicating if a wifiAwareSession has been detached. "
    },
    "setWifiAwareSession(android.net.wifi.aware.WifiAwareSession)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "session"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setWifiAwareSession(android.net.wifi.aware.WifiAwareSession)",
      "documentation": "Sets parameter to pass to AttachCallback#onAttach(WifiAwareSession session) "
    },
    "subscribe(int,android.os.Looper,android.net.wifi.aware.SubscribeConfig,android.net.wifi.aware.DiscoverySessionCallback)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "clientId",
        "looper",
        "subscribeConfig",
        "callback"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "subscribe(int,android.os.Looper,android.net.wifi.aware.SubscribeConfig,android.net.wifi.aware.DiscoverySessionCallback)"
    }
  },
  "imports": [
    "android.os.Build.VERSION_CODES.O",
    "android.net.wifi.aware.AttachCallback",
    "android.net.wifi.aware.DiscoverySessionCallback",
    "android.net.wifi.aware.PublishConfig",
    "android.net.wifi.aware.PublishDiscoverySession",
    "android.net.wifi.aware.SubscribeConfig",
    "android.net.wifi.aware.SubscribeDiscoverySession",
    "android.net.wifi.aware.WifiAwareManager",
    "android.net.wifi.aware.WifiAwareSession",
    "android.os.Binder",
    "android.os.Handler",
    "android.os.Looper",
    "org.robolectric.annotation.Implementation",
    "org.robolectric.annotation.Implements"
  ],
  "name": "org.robolectric.shadows.ShadowWifiAwareManager",
  "documentation": "Shadow Implementation of {@link android.net.wifi.aware.WifiAwareManager} "
}