{
  "methods": {
    "__constructor__(android.content.Context)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "context"
      ],
      "returnType": "void",
      "exceptions": [],
      "maxSdk": 19,
      "name": "__constructor__(android.content.Context)"
    },
    "__constructor__(android.content.Context,com.android.internal.appwidget.IAppWidgetService)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "context",
        "service"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 21,
      "name": "__constructor__(android.content.Context,com.android.internal.appwidget.IAppWidgetService)"
    },
    "addBoundWidget(int,android.appwidget.AppWidgetProviderInfo)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "appWidgetId",
        "providerInfo"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "addBoundWidget(int,android.appwidget.AppWidgetProviderInfo)"
    },
    "addInstalledProvider(android.appwidget.AppWidgetProviderInfo)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "appWidgetProviderInfo"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "addInstalledProvider(android.appwidget.AppWidgetProviderInfo)"
    },
    "addInstalledProvidersForProfile(android.os.UserHandle,android.appwidget.AppWidgetProviderInfo)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "userHandle",
        "appWidgetProviderInfo"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "addInstalledProvidersForProfile(android.os.UserHandle,android.appwidget.AppWidgetProviderInfo)"
    },
    "bindAppWidgetId(int,android.content.ComponentName)": {
      "isImplementation": true,
      "modifiers": [
        "public"
      ],
      "params": [
        "appWidgetId",
        "provider"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "bindAppWidgetId(int,android.content.ComponentName)"
    },
    "bindAppWidgetId(int,android.content.ComponentName,android.os.Bundle)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "appWidgetId",
        "provider",
        "options"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 17,
      "name": "bindAppWidgetId(int,android.content.ComponentName,android.os.Bundle)"
    },
    "bindAppWidgetIdIfAllowed(int,android.content.ComponentName)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "appWidgetId",
        "provider"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "name": "bindAppWidgetIdIfAllowed(int,android.content.ComponentName)",
      "documentation": "Create an internal presentation of the widget and cache it locally. This implementation doesn\u0027t\ntrigger {@code AppWidgetProvider.onUpdate}\n"
    },
    "bindAppWidgetIdIfAllowed(int,android.content.ComponentName,android.os.Bundle)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "appWidgetId",
        "provider",
        "options"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "minSdk": 17,
      "name": "bindAppWidgetIdIfAllowed(int,android.content.ComponentName,android.os.Bundle)",
      "documentation": "Create an internal presentation of the widget locally and store the options {@link Bundle} with\nit. This implementation doesn\u0027t trigger {@code AppWidgetProvider.onUpdate}\n"
    },
    "canReapplyRemoteViews(org.robolectric.shadows.ShadowAppWidgetManager.WidgetInfo,android.widget.RemoteViews)": {
      "isImplementation": false,
      "modifiers": [
        "private"
      ],
      "params": [
        "widgetInfo",
        "views"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "name": "canReapplyRemoteViews(org.robolectric.shadows.ShadowAppWidgetManager.WidgetInfo,android.widget.RemoteViews)"
    },
    "createWidget(java.lang.Class\u003c? extends android.appwidget.AppWidgetProvider\u003e,int)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "appWidgetProviderClass",
        "widgetLayoutId"
      ],
      "returnType": "int",
      "exceptions": [],
      "name": "createWidget(java.lang.Class\u003c? extends android.appwidget.AppWidgetProvider\u003e,int)",
      "documentation": "Creates a widget by inflating its layout.\n\n@param appWidgetProviderClass the app widget provider class\n@param widgetLayoutId id of the layout to inflate\n@return the ID of the new widget\n"
    },
    "createWidgets(java.lang.Class\u003c? extends android.appwidget.AppWidgetProvider\u003e,int,int)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "appWidgetProviderClass",
        "widgetLayoutId",
        "howManyToCreate"
      ],
      "returnType": "int[]",
      "exceptions": [],
      "name": "createWidgets(java.lang.Class\u003c? extends android.appwidget.AppWidgetProvider\u003e,int,int)",
      "documentation": "Creates a bunch of widgets by inflating the same layout multiple times.\n\n@param appWidgetProviderClass the app widget provider class\n@param widgetLayoutId id of the layout to inflate\n@param howManyToCreate number of new widgets to create\n@return the IDs of the new widgets\n"
    },
    "enableWidgetsIfNecessary(java.lang.Class\u003c? extends android.appwidget.AppWidgetProvider\u003e)": {
      "isImplementation": false,
      "modifiers": [
        "private"
      ],
      "params": [
        "appWidgetProviderClass"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "enableWidgetsIfNecessary(java.lang.Class\u003c? extends android.appwidget.AppWidgetProvider\u003e)"
    },
    "getAlwaysRecreateViewsDuringUpdate()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "name": "getAlwaysRecreateViewsDuringUpdate()",
      "documentation": "@return the state of the{@code alwaysRecreateViewsDuringUpdate} flag\n"
    },
    "getAppWidgetIds(android.content.ComponentName)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "provider"
      ],
      "returnType": "int[]",
      "exceptions": [],
      "name": "getAppWidgetIds(android.content.ComponentName)"
    },
    "getAppWidgetInfo(int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "appWidgetId"
      ],
      "returnType": "android.appwidget.AppWidgetProviderInfo",
      "exceptions": [],
      "name": "getAppWidgetInfo(int)"
    },
    "getAppWidgetOptions(int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "appWidgetId"
      ],
      "returnType": "android.os.Bundle",
      "exceptions": [],
      "name": "getAppWidgetOptions(int)",
      "documentation": "Gets the appWidgetOptions Bundle stored in a local cache. "
    },
    "getAppWidgetProviderFor(int)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "widgetId"
      ],
      "returnType": "android.appwidget.AppWidgetProvider",
      "exceptions": [],
      "name": "getAppWidgetProviderFor(int)",
      "documentation": "@param widgetId id of the widget whose provider is to be returned\n@return the {@code AppWidgetProvider} associated with {@code widgetId}\n"
    },
    "getInstalledProviders()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "java.util.List\u003candroid.appwidget.AppWidgetProviderInfo\u003e",
      "exceptions": [],
      "name": "getInstalledProviders()"
    },
    "getInstalledProvidersForPackage(java.lang.String,android.os.UserHandle)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "packageName",
        "profile"
      ],
      "returnType": "java.util.List\u003candroid.appwidget.AppWidgetProviderInfo\u003e",
      "exceptions": [],
      "minSdk": 26,
      "name": "getInstalledProvidersForPackage(java.lang.String,android.os.UserHandle)"
    },
    "getInstalledProvidersForProfile(android.os.UserHandle)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "profile"
      ],
      "returnType": "java.util.List\u003candroid.appwidget.AppWidgetProviderInfo\u003e",
      "exceptions": [],
      "minSdk": 21,
      "name": "getInstalledProvidersForProfile(android.os.UserHandle)"
    },
    "getRemoteViewsToApply(android.widget.RemoteViews)": {
      "isImplementation": false,
      "modifiers": [
        "private"
      ],
      "params": [
        "views"
      ],
      "returnType": "android.widget.RemoteViews",
      "exceptions": [],
      "name": "getRemoteViewsToApply(android.widget.RemoteViews)"
    },
    "getViewFor(int)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "widgetId"
      ],
      "returnType": "android.view.View",
      "exceptions": [],
      "name": "getViewFor(int)",
      "documentation": "@param widgetId id of the desired widget\n@return the widget associated with {@code widgetId}\n"
    },
    "hasLandscapeAndPortraitLayouts(android.widget.RemoteViews)": {
      "isImplementation": false,
      "modifiers": [
        "private",
        "static"
      ],
      "params": [
        "views"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "name": "hasLandscapeAndPortraitLayouts(android.widget.RemoteViews)"
    },
    "isRequestPinAppWidgetSupported()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "minSdk": 26,
      "name": "isRequestPinAppWidgetSupported()",
      "documentation": "Returns true if {@link setSupportedToRequestPinAppWidget} is called with {@code true} "
    },
    "putWidgetInfo(int,android.appwidget.AppWidgetProviderInfo)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "appWidgetId",
        "expectedWidgetInfo"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "putWidgetInfo(int,android.appwidget.AppWidgetProviderInfo)"
    },
    "reconstructWidgetViewAsIfPhoneWasRotated(int)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "appWidgetId"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "reconstructWidgetViewAsIfPhoneWasRotated(int)",
      "documentation": "Triggers a reapplication of the most recent set of actions against the widget, which is what\nhappens when the phone is rotated. Does not attempt to simulate a change in screen geometry.\n\n@param appWidgetId the ID of the widget to be affected\n"
    },
    "removeInstalledProvider(android.appwidget.AppWidgetProviderInfo)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "appWidgetProviderInfo"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "name": "removeInstalledProvider(android.appwidget.AppWidgetProviderInfo)"
    },
    "requestPinAppWidget(android.content.ComponentName,android.os.Bundle,android.app.PendingIntent)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "provider",
        "extras",
        "successCallback"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "minSdk": 26,
      "name": "requestPinAppWidget(android.content.ComponentName,android.os.Bundle,android.app.PendingIntent)",
      "documentation": "This implementation currently uses {@code requestPinAppWidgetSupported} to determine if it\nshould bind the app widget provided and execute the {@code successCallback}.\n\n\u003cp\u003eNote: This implementation doesn\u0027t trigger {@code AppWidgetProvider.onUpdate}.\n\n@param provider The provider for the app widget to bind.\n@param extras Returned in the callback along with the ID of the newly bound app widget, sent as\n    {@link AppWidgetManager#EXTRA_APPWIDGET_ID}.\n@param successCallback Called after binding the app widget, if possible.\n@return true if the widget was installed, false otherwise.\n"
    },
    "setAllowedToBindAppWidgets(boolean)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "allowed"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setAllowedToBindAppWidgets(boolean)"
    },
    "setAlwaysRecreateViewsDuringUpdate(boolean)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "alwaysRecreate"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setAlwaysRecreateViewsDuringUpdate(boolean)",
      "documentation": "Enables testing of widget behavior when all of the views are recreated on every update. This is\nuseful for ensuring that your widget will behave correctly even if it is restarted by the OS\nbetween events.\n\n@param alwaysRecreate whether or not to always recreate the views\n"
    },
    "setRequestPinAppWidgetSupported(boolean)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "supported"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setRequestPinAppWidgetSupported(boolean)"
    },
    "setValidWidgetProviderComponentName(boolean)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "validWidgetProviderComponentName"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setValidWidgetProviderComponentName(boolean)"
    },
    "updateAppWidget(int,android.widget.RemoteViews)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "appWidgetId",
        "views"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "updateAppWidget(int,android.widget.RemoteViews)",
      "documentation": "Simulates updating an {@code AppWidget} with a new set of views\n\n@param appWidgetId id of widget\n@param views views to update\n"
    },
    "updateAppWidget(int[],android.widget.RemoteViews)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "appWidgetIds",
        "views"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "updateAppWidget(int[],android.widget.RemoteViews)"
    },
    "updateAppWidgetOptions(int,android.os.Bundle)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "appWidgetId",
        "options"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "updateAppWidgetOptions(int,android.os.Bundle)",
      "documentation": "Update the locally cached appWidgetOptions Bundle. Instead of triggering associated\nAppWidgetProvider.onAppWidgetOptionsChanged through Intent, this implementation calls the\nmethod directly.\n"
    }
  },
  "imports": [
    "android.os.Build.VERSION_CODES.JELLY_BEAN_MR1",
    "android.os.Build.VERSION_CODES.KITKAT",
    "android.os.Build.VERSION_CODES.L",
    "android.os.Build.VERSION_CODES.LOLLIPOP",
    "android.os.Build.VERSION_CODES.O",
    "org.robolectric.util.reflector.Reflector.reflector",
    "android.annotation.Nullable",
    "android.app.PendingIntent",
    "android.app.PendingIntent.CanceledException",
    "android.appwidget.AppWidgetHostView",
    "android.appwidget.AppWidgetManager",
    "android.appwidget.AppWidgetProvider",
    "android.appwidget.AppWidgetProviderInfo",
    "android.content.ComponentName",
    "android.content.Context",
    "android.content.Intent",
    "android.os.Build.VERSION",
    "android.os.Bundle",
    "android.os.UserHandle",
    "android.view.View",
    "android.widget.RemoteViews",
    "com.android.internal.appwidget.IAppWidgetService",
    "com.google.common.collect.HashMultimap",
    "com.google.common.collect.ImmutableList",
    "com.google.common.collect.Multimap",
    "java.util.ArrayList",
    "java.util.HashMap",
    "java.util.List",
    "java.util.Map",
    "java.util.stream.Collectors",
    "org.robolectric.annotation.HiddenApi",
    "org.robolectric.annotation.Implementation",
    "org.robolectric.annotation.Implements",
    "org.robolectric.annotation.RealObject",
    "org.robolectric.util.ReflectionHelpers",
    "org.robolectric.util.reflector.ForType",
    "org.robolectric.shadows.ShadowAppWidgetManager.WidgetInfo",
    "org.robolectric.shadows.ShadowAppWidgetManager.RemoteViewsReflector"
  ],
  "name": "org.robolectric.shadows.ShadowAppWidgetManager"
}