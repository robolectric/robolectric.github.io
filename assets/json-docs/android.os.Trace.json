{
  "methods": {
    "beginAsyncSection(java.lang.String,int)": {
      "isImplementation": true,
      "modifiers": [
        "protected",
        "static",
        "synchronized"
      ],
      "params": [
        "sectionName",
        "cookie"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 29,
      "name": "beginAsyncSection(java.lang.String,int)",
      "documentation": "Starts a new async trace section with given name. "
    },
    "beginSection(java.lang.String)": {
      "isImplementation": true,
      "modifiers": [
        "protected",
        "static"
      ],
      "params": [
        "sectionName"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "beginSection(java.lang.String)",
      "documentation": "Starts a new trace section with given name. "
    },
    "checkValidSectionName(java.lang.String)": {
      "isImplementation": false,
      "modifiers": [
        "private",
        "static"
      ],
      "params": [
        "sectionName"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "name": "checkValidSectionName(java.lang.String)"
    },
    "doNotUseSetCrashOnIncorrectUsage(boolean)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "crashOnIncorrectUsage"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "doNotUseSetCrashOnIncorrectUsage(boolean)",
      "documentation": "Do not use this method unless absolutely necessary. Prefer fixing the tests instead.\n\n\u003cp\u003eSets whether to crash on incorrect usage (e.g., calling {@link #endSection()} before {@link\nbeginSection(String)}. Default value - {@code true}.\n"
    },
    "endAsyncSection(java.lang.String,int)": {
      "isImplementation": true,
      "modifiers": [
        "protected",
        "static",
        "synchronized"
      ],
      "params": [
        "sectionName",
        "cookie"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 29,
      "name": "endAsyncSection(java.lang.String,int)",
      "documentation": "Ends async trace trace section. "
    },
    "endSection()": {
      "isImplementation": true,
      "modifiers": [
        "protected",
        "static"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "endSection()",
      "documentation": "Ends the most recent active trace section. "
    },
    "getCounters()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [],
      "returnType": "com.google.common.collect.ImmutableList\u003corg.robolectric.shadows.ShadowTrace.Counter\u003e",
      "exceptions": [],
      "name": "getCounters()",
      "documentation": "Returns an ordered list of previous counters. "
    },
    "getCurrentAsyncSections()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [],
      "returnType": "com.google.common.collect.ImmutableSet\u003corg.robolectric.shadows.ShadowTrace.AsyncTraceSection\u003e",
      "exceptions": [],
      "name": "getCurrentAsyncSections()",
      "documentation": "Returns a set of all the current active async trace sections. "
    },
    "getCurrentSections()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [],
      "returnType": "java.util.Deque\u003cjava.lang.String\u003e",
      "exceptions": [],
      "name": "getCurrentSections()",
      "documentation": "Returns a stack of the currently active trace sections for the current thread. "
    },
    "getPreviousAsyncSections()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [],
      "returnType": "com.google.common.collect.ImmutableSet\u003corg.robolectric.shadows.ShadowTrace.AsyncTraceSection\u003e",
      "exceptions": [],
      "name": "getPreviousAsyncSections()",
      "documentation": "Returns a set of all the previously active async trace sections. "
    },
    "getPreviousSections()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [],
      "returnType": "java.util.Queue\u003cjava.lang.String\u003e",
      "exceptions": [],
      "name": "getPreviousSections()",
      "documentation": "Returns a queue of all the previously active trace sections for the current thread. "
    },
    "isEnabled()": {
      "isImplementation": true,
      "modifiers": [
        "protected",
        "static"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "minSdk": 29,
      "name": "isEnabled()",
      "documentation": "Returns whether systrace is enabled. "
    },
    "nativeGetEnabledTags()": {
      "isImplementation": true,
      "modifiers": [
        "protected",
        "static"
      ],
      "params": [],
      "returnType": "long",
      "exceptions": [],
      "name": "nativeGetEnabledTags()"
    },
    "reset()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "reset()",
      "documentation": "Resets internal lists of active trace sections. "
    },
    "setAppTracingAllowed(boolean)": {
      "isImplementation": true,
      "modifiers": [
        "protected",
        "static"
      ],
      "params": [
        "appTracingAllowed"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setAppTracingAllowed(boolean)"
    },
    "setCounter(java.lang.String,long)": {
      "isImplementation": true,
      "modifiers": [
        "protected",
        "static"
      ],
      "params": [
        "counterName",
        "counterValue"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 29,
      "name": "setCounter(java.lang.String,long)"
    },
    "setEnabled(boolean)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "enabled"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setEnabled(boolean)",
      "documentation": "Sets the systrace to enabled or disabled. "
    }
  },
  "imports": [
    "android.os.Build.VERSION_CODES.Q",
    "com.google.common.base.Verify.verifyNotNull",
    "android.os.Trace",
    "android.util.Log",
    "com.google.auto.value.AutoValue",
    "com.google.common.collect.ImmutableList",
    "com.google.common.collect.ImmutableSet",
    "java.util.ArrayDeque",
    "java.util.ArrayList",
    "java.util.Deque",
    "java.util.HashSet",
    "java.util.List",
    "java.util.Queue",
    "java.util.Set",
    "java.util.function.Supplier",
    "org.robolectric.annotation.Implementation",
    "org.robolectric.annotation.Implements",
    "org.robolectric.annotation.Resetter",
    "org.robolectric.shadows.ShadowTrace.AsyncTraceSection",
    "org.robolectric.shadows.ShadowTrace.Counter"
  ],
  "name": "org.robolectric.shadows.ShadowTrace",
  "documentation": "Shadow implementation for {@link Trace}, which stores the traces locally in arrays (unlike the\nreal implementation) and allows reading them.\n"
}