{
  "methods": {
    "beginSection(java.lang.String)": {
      "isImplementation": true,
      "modifiers": [
        "protected",
        "static"
      ],
      "params": [
        "sectionName"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 18,
      "name": "beginSection(java.lang.String)",
      "documentation": "Starts a new trace section with given name. "
    },
    "doNotUseSetCrashOnIncorrectUsage(boolean)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "crashOnIncorrectUsage"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "doNotUseSetCrashOnIncorrectUsage(boolean)",
      "documentation": "Do not use this method unless absolutely necessary. Prefer fixing the tests instead.\n\n\u003cp\u003eSets whether to crash on incorrect usage (e.g., calling {@link #endSection()} before {@link\nbeginSection(String)}. Default value - {@code false}.\n"
    },
    "endSection()": {
      "isImplementation": true,
      "modifiers": [
        "protected",
        "static"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 18,
      "name": "endSection()",
      "documentation": "Ends the most recent active trace section.\n\n@throws {@link AssertionError} if called without any active trace section.\n"
    },
    "getCurrentSections()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [],
      "returnType": "java.util.Deque\u003cjava.lang.String\u003e",
      "exceptions": [],
      "name": "getCurrentSections()",
      "documentation": "Returns a stack of the currently active trace sections for the current thread. "
    },
    "getPreviousSections()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [],
      "returnType": "java.util.Queue\u003cjava.lang.String\u003e",
      "exceptions": [],
      "name": "getPreviousSections()",
      "documentation": "Returns a queue of all the previously active trace sections for the current thread. "
    },
    "isEnabled()": {
      "isImplementation": true,
      "modifiers": [
        "protected",
        "static"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "minSdk": 29,
      "name": "isEnabled()",
      "documentation": "Returns whether systrace is enabled. "
    },
    "isTagEnabled(long)": {
      "isImplementation": true,
      "modifiers": [
        "protected",
        "static"
      ],
      "params": [
        "traceTag"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "minSdk": 18,
      "name": "isTagEnabled(long)"
    },
    "reset()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "reset()",
      "documentation": "Resets internal lists of active trace sections. "
    },
    "setAppTracingAllowed(boolean)": {
      "isImplementation": true,
      "modifiers": [
        "protected",
        "static"
      ],
      "params": [
        "appTracingAllowed"
      ],
      "returnType": "void",
      "exceptions": [],
      "minSdk": 18,
      "name": "setAppTracingAllowed(boolean)"
    },
    "setEnabled(boolean)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "enabled"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setEnabled(boolean)",
      "documentation": "Sets the systrace to enabled or disabled. "
    }
  },
  "imports": [
    "android.os.Build.VERSION_CODES.JELLY_BEAN_MR2",
    "android.os.Build.VERSION_CODES.Q",
    "org.robolectric.shadow.api.Shadow.directlyOn",
    "android.os.Trace",
    "android.util.Log",
    "java.util.ArrayDeque",
    "java.util.Deque",
    "java.util.Queue",
    "java.util.function.Supplier",
    "org.robolectric.annotation.Implementation",
    "org.robolectric.annotation.Implements",
    "org.robolectric.annotation.Resetter",
    "org.robolectric.util.ReflectionHelpers.ClassParameter"
  ],
  "name": "org.robolectric.shadows.ShadowTrace",
  "documentation": "Shadow implementation for {@link Trace}, which stores the traces locally in arrays (unlike the\nreal implementation) and allows reading them.\n\n\u003cp\u003eThe shadow doesn\u0027t enforce the constrains by default (e.g., null section names, or incorrect\n{@link ShadowTrace.beginSection(String)} / {@link ShadowTrace.endSection()} sequences), but can\nbe configured to do so by calling {@link ShadowTrace.setCrashOnIncorrectUsage(boolean)}.\n"
}