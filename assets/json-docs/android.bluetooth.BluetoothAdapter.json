{
  "methods": {
    "addIncomingRfcommConnection(android.bluetooth.BluetoothDevice,java.util.UUID)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "remoteDevice",
        "uuid"
      ],
      "returnType": "android.bluetooth.BluetoothSocket",
      "exceptions": [
        "android.app.PendingIntent.CanceledException"
      ],
      "name": "addIncomingRfcommConnection(android.bluetooth.BluetoothDevice,java.util.UUID)",
      "documentation": "Creates an incoming socket connection from the given {@link BluetoothDevice} to a background\nBluetooth server created with {@link BluetoothAdapter#startRfcommServer(String, UUID,\nPendingIntent)} on the given uuid.\n\n\u003cp\u003eCreating this socket connection will invoke the {@link PendingIntent} provided in {@link\nBluetoothAdapter#startRfcommServer(String, UUID, PendingIntent)} when the server socket was\ncreated for the given UUID. The component provided in the intent can then call {@link\nBluetoothAdapter#retrieveConnectedRfcommSocket(UUID)} to obtain the server side socket.\n\n\u003cp\u003eA {@link ShadowBluetoothSocket} obtained from the returned {@link BluetoothSocket} can be\nused to send data to and receive data from the server side socket. This returned {@link\nBluetoothSocket} is the same socket as returned by {@link\nBluetoothAdapter#retrieveConnectedRfcommSocket(UUID)} and should generally not be used directly\noutside of obtaining the shadow, as this socket is normally not exposed outside of the\ncomponent started by the pending intent. {@link ShadowBluetoothSocket#getInputStreamFeeder()}\nand {@link ShadowBluetoothSocket#getOutputStreamSink()} can be used to send data to and from\nthe socket as if it was a remote connection.\n\n\u003cp\u003e\u003cb\u003eWarning:\u003c/b\u003e The socket returned by this method and the corresponding server side socket\nretrieved from {@link BluetoothAdapter#retrieveConnectedRfcommSocket(UUID)} do not support\nreads and writes from different threads. Once reading or writing is started for a given socket\non a given thread, that type of operation on that socket must only be done on that thread.\n\n@return a server side BluetoothSocket or {@code null} if the {@link UUID} is not registered.\n    This value should generally not be used directly, and is mainly used to obtain a shadow\n    with which a RFCOMM client can be simulated.\n@throws IllegalArgumentException if a server is not started for the given {@link UUID}.\n@throws CanceledException if the pending intent for the server socket was cancelled.\n"
    },
    "cancelDiscovery()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "name": "cancelDiscovery()"
    },
    "checkBluetoothAddress(java.lang.String)": {
      "isImplementation": true,
      "modifiers": [
        "protected",
        "static"
      ],
      "params": [
        "address"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "name": "checkBluetoothAddress(java.lang.String)",
      "documentation": "Validate a Bluetooth address, such as \"00:43:A8:23:10:F0\" Alphabetic characters must be\nuppercase to be valid.\n\n@param address Bluetooth address as string\n@return true if the address is valid, false otherwise\n"
    },
    "closeProfileProxy(int,android.bluetooth.BluetoothProfile)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "profile",
        "proxy"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "closeProfileProxy(int,android.bluetooth.BluetoothProfile)",
      "documentation": "Overrides behavior of {@link closeProfileProxy} if {@link\nShadowBluetoothAdapter#setProfileProxy} has been previously called.\n\n\u003cp\u003eIf the given non-null BluetoothProfile {@code proxy} was previously set for the given {@code\nprofile} by {@link ShadowBluetoothAdapter#setProfileProxy}, this proxy will be \"deactivated\".\n"
    },
    "createAdapter(java.lang.Object)": {
      "isImplementation": true,
      "modifiers": [
        "protected",
        "static"
      ],
      "params": [
        "attributionSource"
      ],
      "returnType": "java.lang.Object",
      "exceptions": [],
      "minSdk": 33,
      "name": "createAdapter(java.lang.Object)",
      "documentation": "Requires LooseSignatures because of {@link AttributionSource} parameter "
    },
    "disable()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "name": "disable()"
    },
    "disable(boolean)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "persist"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "name": "disable(boolean)"
    },
    "enable()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "name": "enable()"
    },
    "getAddress()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "java.lang.String",
      "exceptions": [],
      "name": "getAddress()"
    },
    "getBondedDevices()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "java.util.Set\u003candroid.bluetooth.BluetoothDevice\u003e",
      "exceptions": [],
      "name": "getBondedDevices()"
    },
    "getDefaultAdapter()": {
      "isImplementation": true,
      "modifiers": [
        "protected",
        "static"
      ],
      "params": [],
      "returnType": "android.bluetooth.BluetoothAdapter",
      "exceptions": [],
      "name": "getDefaultAdapter()"
    },
    "getDiscoverableTimeout()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "java.lang.Object",
      "exceptions": [],
      "name": "getDiscoverableTimeout()",
      "documentation": "Needs looseSignatures because the return value changed from {@code int} to {@link Duration}\nstarting in T.\n"
    },
    "getLeMaximumAdvertisingDataLength()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "int",
      "exceptions": [],
      "minSdk": 26,
      "name": "getLeMaximumAdvertisingDataLength()"
    },
    "getLeScanCallbacks()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "java.util.Set\u003candroid.bluetooth.BluetoothAdapter.LeScanCallback\u003e",
      "exceptions": [],
      "name": "getLeScanCallbacks()"
    },
    "getLeState()": {
      "isImplementation": true,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "int",
      "exceptions": [],
      "minSdk": 23,
      "name": "getLeState()",
      "documentation": "Decides the correct LE state. When off, BLE calls will fail or return null.\n\n\u003cp\u003eLE is enabled if either Bluetooth or BLE scans are enabled. LE is always off if Airplane\nMode is enabled.\n"
    },
    "getMostRecentlyConnectedDevices()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "java.util.List\u003candroid.bluetooth.BluetoothDevice\u003e",
      "exceptions": [],
      "minSdk": 33,
      "name": "getMostRecentlyConnectedDevices()"
    },
    "getName()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "java.lang.String",
      "exceptions": [],
      "name": "getName()"
    },
    "getProfileConnectionState(int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "profile"
      ],
      "returnType": "int",
      "exceptions": [],
      "name": "getProfileConnectionState(int)",
      "documentation": "Returns the connection state for the given Bluetooth {@code profile}, defaulting to {@link\nBluetoothProfile.STATE_DISCONNECTED} if the profile\u0027s connection state was never set.\n\n\u003cp\u003eSet a Bluetooth profile\u0027s connection state via {@link #setProfileConnectionState(int, int)}.\n"
    },
    "getProfileProxy(android.content.Context,android.bluetooth.BluetoothProfile.ServiceListener,int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "context",
        "listener",
        "profile"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "name": "getProfileProxy(android.content.Context,android.bluetooth.BluetoothProfile.ServiceListener,int)",
      "documentation": "Overrides behavior of {@link getProfileProxy} if {@link ShadowBluetoothAdapter#setProfileProxy}\nhas been previously called.\n\n\u003cp\u003eIf active (non-null) proxy has been set by {@link setProfileProxy} for the given {@code\nprofile}, {@link getProfileProxy} will immediately call {@code onServiceConnected} of the given\nBluetoothProfile.ServiceListener {@code listener}.\n\n@return \u0027true\u0027 if a proxy object has been set by {@link setProfileProxy} for the given\n    BluetoothProfile {@code profile}\n"
    },
    "getRegisteredRfcommServerUuids()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "java.util.Set\u003cjava.util.UUID\u003e",
      "exceptions": [],
      "name": "getRegisteredRfcommServerUuids()",
      "documentation": "Returns an immutable set of {@link UUID}s representing the currently registered RFCOMM servers.\n"
    },
    "getRemoteDevice(java.lang.String)": {
      "isImplementation": true,
      "modifiers": [
        "protected",
        "synchronized"
      ],
      "params": [
        "address"
      ],
      "returnType": "android.bluetooth.BluetoothDevice",
      "exceptions": [],
      "name": "getRemoteDevice(java.lang.String)"
    },
    "getScanMode()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "int",
      "exceptions": [],
      "name": "getScanMode()"
    },
    "getSingleLeScanCallback()": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [],
      "returnType": "android.bluetooth.BluetoothAdapter.LeScanCallback",
      "exceptions": [],
      "name": "getSingleLeScanCallback()"
    },
    "getState()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "int",
      "exceptions": [],
      "name": "getState()"
    },
    "hasActiveProfileProxy(int)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "profile"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "name": "hasActiveProfileProxy(int)",
      "documentation": "@return \u0027true\u0027 if active (non-null) proxy has been set by {@link\n    ShadowBluetoothAdapter#setProfileProxy} for the given {@code profile} AND it has not been\n    \"deactivated\" by a call to {@link BluetoothAdapter#closeProfileProxy}. Only meaningful if\n    {@link ShadowBluetoothAdapter#setProfileProxy} has been previously called.\n"
    },
    "isAirplaneMode()": {
      "isImplementation": false,
      "modifiers": [
        "private",
        "static"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "name": "isAirplaneMode()",
      "documentation": "True if either Bluetooth is enabled or BLE scanning is available. Always false if Airplane Mode\nis enabled. When false, BLE scans will fail. @Implementation(minSdk \u003d M) protected boolean\nisLeEnabled() { if (isAirplaneMode()) { return false; } return isEnabled() ||\nisBleScanAlwaysAvailable(); }\n"
    },
    "isBleScanAlwaysAvailable()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "minSdk": 23,
      "name": "isBleScanAlwaysAvailable()",
      "documentation": "When true, overrides the value of {@link #getLeState}. By default, this is false. "
    },
    "isDiscovering()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "name": "isDiscovering()"
    },
    "isDistanceMeasurementSupported()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "int",
      "exceptions": [],
      "minSdk": 34,
      "name": "isDistanceMeasurementSupported()"
    },
    "isEnabled()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "name": "isEnabled()"
    },
    "isLe2MPhySupported()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "minSdk": 34,
      "name": "isLe2MPhySupported()",
      "documentation": "Returns the last value of {@link #setIsLe2MPhySupported}, defaulting to true. "
    },
    "isLeAudioSupported()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "int",
      "exceptions": [],
      "minSdk": 33,
      "name": "isLeAudioSupported()"
    },
    "isLeCodedPhySupported()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "minSdk": 34,
      "name": "isLeCodedPhySupported()",
      "documentation": "Returns the last value of {@link #setIsLeCodedPhySupported}, defaulting to true. "
    },
    "isLeExtendedAdvertisingSupported()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "minSdk": 26,
      "name": "isLeExtendedAdvertisingSupported()",
      "documentation": "Returns the last value of {@link #setIsLeExtendedAdvertisingSupported}, defaulting to true. "
    },
    "isMultipleAdvertisementSupported()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "minSdk": 21,
      "name": "isMultipleAdvertisementSupported()"
    },
    "listenUsingInsecureL2capChannel()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "android.bluetooth.BluetoothServerSocket",
      "exceptions": [
        "java.io.IOException"
      ],
      "minSdk": 29,
      "name": "listenUsingInsecureL2capChannel()"
    },
    "listenUsingInsecureRfcommWithServiceRecord(java.lang.String,java.util.UUID)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "serviceName",
        "uuid"
      ],
      "returnType": "android.bluetooth.BluetoothServerSocket",
      "exceptions": [],
      "name": "listenUsingInsecureRfcommWithServiceRecord(java.lang.String,java.util.UUID)"
    },
    "listenUsingL2capChannel()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "android.bluetooth.BluetoothServerSocket",
      "exceptions": [
        "java.io.IOException"
      ],
      "minSdk": 29,
      "name": "listenUsingL2capChannel()"
    },
    "listenUsingRfcommWithServiceRecord(java.lang.String,java.util.UUID)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "serviceName",
        "uuid"
      ],
      "returnType": "android.bluetooth.BluetoothServerSocket",
      "exceptions": [
        "java.io.IOException"
      ],
      "name": "listenUsingRfcommWithServiceRecord(java.lang.String,java.util.UUID)"
    },
    "reset()": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [],
      "returnType": "void",
      "exceptions": [],
      "name": "reset()"
    },
    "retrieveConnectedRfcommSocket(java.util.UUID)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "uuid"
      ],
      "returnType": "android.bluetooth.BluetoothSocket",
      "exceptions": [],
      "minSdk": 33,
      "name": "retrieveConnectedRfcommSocket(java.util.UUID)"
    },
    "setAddress(java.lang.String)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "address"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setAddress(java.lang.String)"
    },
    "setBleScanAlwaysAvailable(boolean)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "alwaysAvailable"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setBleScanAlwaysAvailable(boolean)",
      "documentation": "Sets the value for {@link isBleScanAlwaysAvailable}. If true, {@link getLeState} will always\nreturn true.\n"
    },
    "setBluetoothLeAdvertiser(android.bluetooth.le.BluetoothLeAdvertiser)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "advertiser"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setBluetoothLeAdvertiser(android.bluetooth.le.BluetoothLeAdvertiser)",
      "documentation": "@deprecated use real BluetoothLeAdvertiser instead\n"
    },
    "setBondedDevices(java.util.Set\u003candroid.bluetooth.BluetoothDevice\u003e)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "bluetoothDevices"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setBondedDevices(java.util.Set\u003candroid.bluetooth.BluetoothDevice\u003e)"
    },
    "setDiscoverableTimeout(int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "timeout"
      ],
      "returnType": "void",
      "exceptions": [],
      "maxSdk": 32,
      "name": "setDiscoverableTimeout(int)"
    },
    "setDiscoverableTimeout(java.time.Duration)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "timeout"
      ],
      "returnType": "int",
      "exceptions": [],
      "minSdk": 33,
      "name": "setDiscoverableTimeout(java.time.Duration)"
    },
    "setDistanceMeasurementSupported(int)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "supported"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setDistanceMeasurementSupported(int)",
      "documentation": "Sets whether the distance measurement is supported or not. Minimum sdk version required is\nUPSIDE_DOWN_CAKE.\n"
    },
    "setEnabled(boolean)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "enabled"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setEnabled(boolean)",
      "documentation": "@deprecated Use {@link BluetoothAdapter#enable()} or {@link BluetoothAdapter#disable()}.\n"
    },
    "setIsBluetoothSupported(boolean)": {
      "isImplementation": false,
      "modifiers": [
        "public",
        "static"
      ],
      "params": [
        "supported"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setIsBluetoothSupported(boolean)",
      "documentation": "Determines if getDefaultAdapter() returns the default local adapter (true) or null (false). "
    },
    "setIsLe2MPhySupported(boolean)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "supported"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setIsLe2MPhySupported(boolean)",
      "documentation": "Sets the {@link #isLe2MPhySupported} to enable/disable LE 2M phy supported featured. "
    },
    "setIsLeCodedPhySupported(boolean)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "supported"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setIsLeCodedPhySupported(boolean)",
      "documentation": "Sets the {@link #isLeCodedPhySupported} to enable/disable LE coded phy supported featured. "
    },
    "setIsLeExtendedAdvertisingSupported(boolean)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "supported"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setIsLeExtendedAdvertisingSupported(boolean)",
      "documentation": "Sets the isLeExtendedAdvertisingSupported to enable/disable LE extended advertisements feature\n"
    },
    "setIsMultipleAdvertisementSupported(boolean)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "supported"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setIsMultipleAdvertisementSupported(boolean)",
      "documentation": "Sets the value for {@link isMultipleAdvertisementSupported}. "
    },
    "setLeAudioSupported(int)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "supported"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setLeAudioSupported(int)",
      "documentation": "Sets whether the Le Audio is supported or not. Minimum sdk version required is TIRAMISU. "
    },
    "setMostRecentlyConnectedDevices(java.util.List\u003candroid.bluetooth.BluetoothDevice\u003e)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "devices"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setMostRecentlyConnectedDevices(java.util.List\u003candroid.bluetooth.BluetoothDevice\u003e)"
    },
    "setName(java.lang.String)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "name"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "name": "setName(java.lang.String)"
    },
    "setProfileConnectionState(int,int)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "profile",
        "state"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setProfileConnectionState(int,int)",
      "documentation": "Sets the connection state {@code state} for the given BluetoothProfile {@code profile} "
    },
    "setProfileProxy(int,android.bluetooth.BluetoothProfile)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "profile",
        "proxy"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setProfileProxy(int,android.bluetooth.BluetoothProfile)",
      "documentation": "Sets the active BluetoothProfile {@code proxy} for the given {@code profile}. Will always\naffect behavior of {@link BluetoothAdapter#getProfileProxy} and {@link\nBluetoothAdapter#closeProfileProxy}. Call to {@link BluetoothAdapter#closeProfileProxy} can\nremove the set active proxy.\n\n@param proxy can be \u0027null\u0027 to simulate the situation where {@link\n    BluetoothAdapter#getProfileProxy} would return \u0027false\u0027. This can happen on older Android\n    versions for Bluetooth profiles introduced in later Android versions.\n"
    },
    "setScanMode(int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "scanMode"
      ],
      "returnType": "java.lang.Object",
      "exceptions": [],
      "name": "setScanMode(int)",
      "documentation": "Needs looseSignatures because in Android T the return value of this method was changed from\nbool to int.\n"
    },
    "setScanMode(int,int)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "scanMode",
        "discoverableTimeout"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "maxSdk": 29,
      "name": "setScanMode(int,int)"
    },
    "setScanMode(int,long)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "scanMode",
        "durationMillis"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "minSdk": 30,
      "maxSdk": 32,
      "name": "setScanMode(int,long)"
    },
    "setState(int)": {
      "isImplementation": false,
      "modifiers": [
        "public"
      ],
      "params": [
        "state"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "setState(int)"
    },
    "startDiscovery()": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [],
      "returnType": "boolean",
      "exceptions": [],
      "name": "startDiscovery()"
    },
    "startLeScan(android.bluetooth.BluetoothAdapter.LeScanCallback)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "callback"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "name": "startLeScan(android.bluetooth.BluetoothAdapter.LeScanCallback)"
    },
    "startLeScan(java.util.UUID[],android.bluetooth.BluetoothAdapter.LeScanCallback)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "serviceUuids",
        "callback"
      ],
      "returnType": "boolean",
      "exceptions": [],
      "name": "startLeScan(java.util.UUID[],android.bluetooth.BluetoothAdapter.LeScanCallback)"
    },
    "startRfcommServer(java.lang.String,java.util.UUID,android.app.PendingIntent)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "name",
        "uuid",
        "pendingIntent"
      ],
      "returnType": "int",
      "exceptions": [],
      "minSdk": 33,
      "name": "startRfcommServer(java.lang.String,java.util.UUID,android.app.PendingIntent)"
    },
    "stopLeScan(android.bluetooth.BluetoothAdapter.LeScanCallback)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "callback"
      ],
      "returnType": "void",
      "exceptions": [],
      "name": "stopLeScan(android.bluetooth.BluetoothAdapter.LeScanCallback)"
    },
    "stopRfcommServer(java.util.UUID)": {
      "isImplementation": true,
      "modifiers": [
        "protected"
      ],
      "params": [
        "uuid"
      ],
      "returnType": "int",
      "exceptions": [],
      "minSdk": 33,
      "name": "stopRfcommServer(java.util.UUID)"
    }
  },
  "imports": [
    "android.bluetooth.BluetoothAdapter.STATE_ON",
    "android.os.Build.VERSION_CODES.LOLLIPOP",
    "android.os.Build.VERSION_CODES.M",
    "android.os.Build.VERSION_CODES.O",
    "android.os.Build.VERSION_CODES.Q",
    "android.os.Build.VERSION_CODES.R",
    "android.os.Build.VERSION_CODES.S_V2",
    "android.os.Build.VERSION_CODES.TIRAMISU",
    "android.os.Build.VERSION_CODES.UPSIDE_DOWN_CAKE",
    "org.robolectric.Shadows.shadowOf",
    "org.robolectric.util.reflector.Reflector.reflector",
    "android.app.PendingIntent",
    "android.app.PendingIntent.CanceledException",
    "android.bluetooth.BluetoothAdapter",
    "android.bluetooth.BluetoothAdapter.LeScanCallback",
    "android.bluetooth.BluetoothDevice",
    "android.bluetooth.BluetoothProfile",
    "android.bluetooth.BluetoothServerSocket",
    "android.bluetooth.BluetoothSocket",
    "android.bluetooth.BluetoothStatusCodes",
    "android.bluetooth.IBluetoothManager",
    "android.bluetooth.IBluetoothProfileServiceConnection",
    "android.bluetooth.le.BluetoothLeAdvertiser",
    "android.bluetooth.le.BluetoothLeScanner",
    "android.content.AttributionSource",
    "android.content.Context",
    "android.os.Build",
    "android.os.Build.VERSION_CODES",
    "android.os.ParcelUuid",
    "android.os.RemoteException",
    "android.provider.Settings",
    "com.google.common.collect.ImmutableList",
    "java.io.IOException",
    "java.time.Duration",
    "java.util.ArrayList",
    "java.util.Collections",
    "java.util.HashMap",
    "java.util.HashSet",
    "java.util.List",
    "java.util.Map",
    "java.util.Set",
    "java.util.UUID",
    "java.util.concurrent.ConcurrentHashMap",
    "java.util.concurrent.ConcurrentMap",
    "javax.annotation.Nullable",
    "org.robolectric.RuntimeEnvironment",
    "org.robolectric.annotation.Implementation",
    "org.robolectric.annotation.Implements",
    "org.robolectric.annotation.RealObject",
    "org.robolectric.annotation.Resetter",
    "org.robolectric.util.ReflectionHelpers",
    "org.robolectric.util.ReflectionHelpers.ClassParameter",
    "org.robolectric.util.reflector.Accessor",
    "org.robolectric.util.reflector.Direct",
    "org.robolectric.util.reflector.ForType",
    "org.robolectric.util.reflector.Static",
    "org.robolectric.shadows.ShadowBluetoothAdapter.BackgroundRfcommServerEntry",
    "org.robolectric.shadows.ShadowBluetoothAdapter.BluetoothAdapterReflector",
    "org.robolectric.shadows.ShadowBluetoothAdapter.BluetoothManagerDelegate"
  ],
  "name": "org.robolectric.shadows.ShadowBluetoothAdapter"
}